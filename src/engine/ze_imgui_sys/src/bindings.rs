/* automatically generated by rust-bindgen 0.60.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _CRT_HAS_C11: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const _CRT_INTERNAL_STDIO_SYMBOL_PREFIX: &[u8; 1usize] = b"\0";
pub const _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION: u32 = 1;
pub const _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR: u32 = 2;
pub const _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS: u32 = 4;
pub const _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 8;
pub const _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS: u32 = 16;
pub const _CRT_INTERNAL_PRINTF_STANDARD_ROUNDING: u32 = 32;
pub const _CRT_INTERNAL_SCANF_SECURECRT: u32 = 1;
pub const _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS: u32 = 2;
pub const _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 4;
pub const BUFSIZ: u32 = 512;
pub const _NSTREAM_: u32 = 512;
pub const _IOB_ENTRIES: u32 = 3;
pub const EOF: i32 = -1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 64;
pub const _IONBF: u32 = 4;
pub const L_tmpnam: u32 = 260;
pub const L_tmpnam_s: u32 = 260;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_SET: u32 = 0;
pub const FILENAME_MAX: u32 = 260;
pub const FOPEN_MAX: u32 = 20;
pub const _SYS_OPEN: u32 = 20;
pub const TMP_MAX: u32 = 2147483647;
pub const TMP_MAX_S: u32 = 2147483647;
pub const _TMP_MAX_S: u32 = 2147483647;
pub const SYS_OPEN: u32 = 20;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const __GNUC_VA_LIST: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const IMGUI_HAS_DOCK: u32 = 1;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type size_t = ::std::os::raw::c_ulonglong;
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize);
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type __crt_bool = bool;
extern "C" {
    pub fn _invalid_parameter_noinfo();
}
extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn();
}
extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    );
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___crt_locale_data_public() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_data_public>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_data_public>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_data_public))
    );
    fn test_field__locale_pctype() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__crt_locale_data_public>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._locale_pctype) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__crt_locale_data_public),
                "::",
                stringify!(_locale_pctype)
            )
        );
    }
    test_field__locale_pctype();
    fn test_field__locale_mb_cur_max() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__crt_locale_data_public>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._locale_mb_cur_max) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__crt_locale_data_public),
                "::",
                stringify!(_locale_mb_cur_max)
            )
        );
    }
    test_field__locale_mb_cur_max();
    fn test_field__locale_lc_codepage() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__crt_locale_data_public>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._locale_lc_codepage) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__crt_locale_data_public),
                "::",
                stringify!(_locale_lc_codepage)
            )
        );
    }
    test_field__locale_lc_codepage();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[test]
fn bindgen_test_layout___crt_locale_pointers() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_pointers>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_pointers>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_pointers))
    );
    fn test_field_locinfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__crt_locale_pointers>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).locinfo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__crt_locale_pointers),
                "::",
                stringify!(locinfo)
            )
        );
    }
    test_field_locinfo();
    fn test_field_mbcinfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__crt_locale_pointers>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mbcinfo) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__crt_locale_pointers),
                "::",
                stringify!(mbcinfo)
            )
        );
    }
    test_field_mbcinfo();
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__Mbstatet() {
    assert_eq!(
        ::std::mem::size_of::<_Mbstatet>(),
        8usize,
        concat!("Size of: ", stringify!(_Mbstatet))
    );
    assert_eq!(
        ::std::mem::align_of::<_Mbstatet>(),
        4usize,
        concat!("Alignment of ", stringify!(_Mbstatet))
    );
    fn test_field__Wchar() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_Mbstatet>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._Wchar) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_Mbstatet),
                "::",
                stringify!(_Wchar)
            )
        );
    }
    test_field__Wchar();
    fn test_field__Byte() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_Mbstatet>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._Byte) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(_Mbstatet),
                "::",
                stringify!(_Byte)
            )
        );
    }
    test_field__Byte();
    fn test_field__State() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_Mbstatet>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._State) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(_Mbstatet),
                "::",
                stringify!(_State)
            )
        );
    }
    test_field__State();
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = size_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _iobuf {
    pub _Placeholder: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout__iobuf() {
    assert_eq!(
        ::std::mem::size_of::<_iobuf>(),
        8usize,
        concat!("Size of: ", stringify!(_iobuf))
    );
    assert_eq!(
        ::std::mem::align_of::<_iobuf>(),
        8usize,
        concat!("Alignment of ", stringify!(_iobuf))
    );
    fn test_field__Placeholder() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<_iobuf>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._Placeholder) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(_iobuf),
                "::",
                stringify!(_Placeholder)
            )
        );
    }
    test_field__Placeholder();
}
pub type FILE = _iobuf;
extern "C" {
    pub fn __acrt_iob_func(_Ix: ::std::os::raw::c_uint) -> *mut FILE;
}
extern "C" {
    pub fn fgetwc(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fgetwchar() -> wint_t;
}
extern "C" {
    pub fn fputwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fputwchar(_Character: wchar_t) -> wint_t;
}
extern "C" {
    pub fn getwc(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar() -> wint_t;
}
extern "C" {
    pub fn fgetws(
        _Buffer: *mut wchar_t,
        _BufferCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn fputws(_Buffer: *const wchar_t, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getws_s(_Buffer: *mut wchar_t, _BufferCount: size_t) -> *mut wchar_t;
}
extern "C" {
    pub fn putwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar(_Character: wchar_t) -> wint_t;
}
extern "C" {
    pub fn _putws(_Buffer: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetwc(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _wfdopen(_FileHandle: ::std::os::raw::c_int, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wfopen(_FileName: *const wchar_t, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wfopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wfreopen(
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _OldStream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _wfreopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
extern "C" {
    pub fn _wfsopen(
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _wperror(_ErrorMessage: *const wchar_t);
}
extern "C" {
    pub fn _wpopen(_Command: *const wchar_t, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wremove(_FileName: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtempnam(_Directory: *const wchar_t, _FilePrefix: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wtmpnam_s(_Buffer: *mut wchar_t, _BufferCount: size_t) -> errno_t;
}
extern "C" {
    pub fn _wtmpnam(_Buffer: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _fgetwc_nolock(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fputwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _getwc_nolock(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _putwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _ungetwc_nolock(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn __stdio_common_vfwprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsnwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _MaxCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const wchar_t,
        _BufferCount: size_t,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = ::std::os::raw::c_longlong;
extern "C" {
    pub fn _get_stream_buffer_pointers(
        _Stream: *mut FILE,
        _Base: *mut *mut *mut ::std::os::raw::c_char,
        _Pointer: *mut *mut *mut ::std::os::raw::c_char,
        _Count: *mut *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn clearerr_s(_Stream: *mut FILE) -> errno_t;
}
extern "C" {
    pub fn fopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn fread_s(
        _Buffer: *mut ::std::os::raw::c_void,
        _BufferSize: size_t,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn freopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
extern "C" {
    pub fn gets_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _Size: rsize_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpfile_s(_Stream: *mut *mut FILE) -> errno_t;
}
extern "C" {
    pub fn tmpnam_s(_Buffer: *mut ::std::os::raw::c_char, _Size: rsize_t) -> errno_t;
}
extern "C" {
    pub fn clearerr(_Stream: *mut FILE);
}
extern "C" {
    pub fn fclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn feof(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fgetchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpos(_Stream: *mut FILE, _Position: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        _Buffer: *mut ::std::os::raw::c_char,
        _MaxCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _flushall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fputc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fputchar(_Character: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(
        _Buffer: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        _Buffer: *mut ::std::os::raw::c_void,
        _ElementSize: ::std::os::raw::c_ulonglong,
        _ElementCount: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn freopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _fsopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fsetpos(_Stream: *mut FILE, _Position: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fseeki64(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _ftelli64(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fwrite(
        _Buffer: *const ::std::os::raw::c_void,
        _ElementSize: ::std::os::raw::c_ulonglong,
        _ElementCount: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn getc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getmaxstdio() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(_ErrorMessage: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn _pclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _popen(
        _Command: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn putc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(_Character: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(_Buffer: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putw(_Word: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        _OldFileName: *const ::std::os::raw::c_char,
        _NewFileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _unlink(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlink(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind(_Stream: *mut FILE);
}
extern "C" {
    pub fn _rmtmp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(_Stream: *mut FILE, _Buffer: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn _setmaxstdio(_Maximum: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setvbuf(
        _Stream: *mut FILE,
        _Buffer: *mut ::std::os::raw::c_char,
        _Mode: ::std::os::raw::c_int,
        _Size: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tempnam(
        _DirectoryName: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(_Buffer: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ungetc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _lock_file(_Stream: *mut FILE);
}
extern "C" {
    pub fn _unlock_file(_Stream: *mut FILE);
}
extern "C" {
    pub fn _fclose_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fflush_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fgetc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fputc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fread_nolock(
        _Buffer: *mut ::std::os::raw::c_void,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn _fread_nolock_s(
        _Buffer: *mut ::std::os::raw::c_void,
        _BufferSize: size_t,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn _fseek_nolock(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fseeki64_nolock(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ftell_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _ftelli64_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _fwrite_nolock(
        _Buffer: *const ::std::os::raw::c_void,
        _ElementSize: size_t,
        _ElementCount: size_t,
        _Stream: *mut FILE,
    ) -> size_t;
}
extern "C" {
    pub fn _getc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ungetc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __p__commode() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_printf_count_output(_Value: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _get_printf_count_output() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _Arglist: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsnprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _MaxCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tempnam(
        _Directory: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Format: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fgetchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flushall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputchar(_Ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(_Ch: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmtmp() -> ::std::os::raw::c_int;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub type __gnuc_va_list = __builtin_va_list;
pub type ImU64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiDockRequest {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiDockNodeSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableColumnsSettings {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_const_charPtr {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ImVector_const_charPtr() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_const_charPtr>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_const_charPtr))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_const_charPtr>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_const_charPtr))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_const_charPtr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_const_charPtr),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_const_charPtr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_const_charPtr),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_const_charPtr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_const_charPtr),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
pub type ImGuiCol = ::std::os::raw::c_int;
pub type ImGuiCond = ::std::os::raw::c_int;
pub type ImGuiDataType = ::std::os::raw::c_int;
pub type ImGuiDir = ::std::os::raw::c_int;
pub type ImGuiKey = ::std::os::raw::c_int;
pub type ImGuiNavInput = ::std::os::raw::c_int;
pub type ImGuiMouseButton = ::std::os::raw::c_int;
pub type ImGuiMouseCursor = ::std::os::raw::c_int;
pub type ImGuiSortDirection = ::std::os::raw::c_int;
pub type ImGuiStyleVar = ::std::os::raw::c_int;
pub type ImGuiTableBgTarget = ::std::os::raw::c_int;
pub type ImDrawFlags = ::std::os::raw::c_int;
pub type ImDrawListFlags = ::std::os::raw::c_int;
pub type ImFontAtlasFlags = ::std::os::raw::c_int;
pub type ImGuiBackendFlags = ::std::os::raw::c_int;
pub type ImGuiButtonFlags = ::std::os::raw::c_int;
pub type ImGuiColorEditFlags = ::std::os::raw::c_int;
pub type ImGuiConfigFlags = ::std::os::raw::c_int;
pub type ImGuiComboFlags = ::std::os::raw::c_int;
pub type ImGuiDockNodeFlags = ::std::os::raw::c_int;
pub type ImGuiDragDropFlags = ::std::os::raw::c_int;
pub type ImGuiFocusedFlags = ::std::os::raw::c_int;
pub type ImGuiHoveredFlags = ::std::os::raw::c_int;
pub type ImGuiInputTextFlags = ::std::os::raw::c_int;
pub type ImGuiModFlags = ::std::os::raw::c_int;
pub type ImGuiPopupFlags = ::std::os::raw::c_int;
pub type ImGuiSelectableFlags = ::std::os::raw::c_int;
pub type ImGuiSliderFlags = ::std::os::raw::c_int;
pub type ImGuiTabBarFlags = ::std::os::raw::c_int;
pub type ImGuiTabItemFlags = ::std::os::raw::c_int;
pub type ImGuiTableFlags = ::std::os::raw::c_int;
pub type ImGuiTableColumnFlags = ::std::os::raw::c_int;
pub type ImGuiTableRowFlags = ::std::os::raw::c_int;
pub type ImGuiTreeNodeFlags = ::std::os::raw::c_int;
pub type ImGuiViewportFlags = ::std::os::raw::c_int;
pub type ImGuiWindowFlags = ::std::os::raw::c_int;
pub type ImTextureID = *mut ::std::os::raw::c_void;
pub type ImDrawIdx = ::std::os::raw::c_ushort;
pub type ImGuiID = ::std::os::raw::c_uint;
pub type ImS8 = ::std::os::raw::c_schar;
pub type ImU8 = ::std::os::raw::c_uchar;
pub type ImS16 = ::std::os::raw::c_short;
pub type ImU16 = ::std::os::raw::c_ushort;
pub type ImS32 = ::std::os::raw::c_int;
pub type ImU32 = ::std::os::raw::c_uint;
pub type ImS64 = ::std::os::raw::c_longlong;
pub type ImWchar16 = ::std::os::raw::c_ushort;
pub type ImWchar32 = ::std::os::raw::c_uint;
pub type ImWchar = ImWchar16;
pub type ImGuiInputTextCallback = ::std::option::Option<
    unsafe extern "C" fn(data: *mut ImGuiInputTextCallbackData) -> ::std::os::raw::c_int,
>;
pub type ImGuiSizeCallback =
    ::std::option::Option<unsafe extern "C" fn(data: *mut ImGuiSizeCallbackData)>;
pub type ImGuiMemAllocFunc = ::std::option::Option<
    unsafe extern "C" fn(
        sz: size_t,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type ImGuiMemFreeFunc = ::std::option::Option<
    unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void, user_data: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVec2 {
    pub x: f32,
    pub y: f32,
}
#[test]
fn bindgen_test_layout_ImVec2() {
    assert_eq!(
        ::std::mem::size_of::<ImVec2>(),
        8usize,
        concat!("Size of: ", stringify!(ImVec2))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVec2>(),
        4usize,
        concat!("Alignment of ", stringify!(ImVec2))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVec2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!("Offset of field: ", stringify!(ImVec2), "::", stringify!(x))
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVec2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            4usize,
            concat!("Offset of field: ", stringify!(ImVec2), "::", stringify!(y))
        );
    }
    test_field_y();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVec4 {
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub w: f32,
}
#[test]
fn bindgen_test_layout_ImVec4() {
    assert_eq!(
        ::std::mem::size_of::<ImVec4>(),
        16usize,
        concat!("Size of: ", stringify!(ImVec4))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVec4>(),
        4usize,
        concat!("Alignment of ", stringify!(ImVec4))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVec4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!("Offset of field: ", stringify!(ImVec4), "::", stringify!(x))
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVec4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            4usize,
            concat!("Offset of field: ", stringify!(ImVec4), "::", stringify!(y))
        );
    }
    test_field_y();
    fn test_field_z() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVec4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize
            },
            8usize,
            concat!("Offset of field: ", stringify!(ImVec4), "::", stringify!(z))
        );
    }
    test_field_z();
    fn test_field_w() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVec4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize
            },
            12usize,
            concat!("Offset of field: ", stringify!(ImVec4), "::", stringify!(w))
        );
    }
    test_field_w();
}
pub const ImGuiWindowFlags__ImGuiWindowFlags_None: ImGuiWindowFlags_ = 0;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoTitleBar: ImGuiWindowFlags_ = 1;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoResize: ImGuiWindowFlags_ = 2;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoMove: ImGuiWindowFlags_ = 4;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoScrollbar: ImGuiWindowFlags_ = 8;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoScrollWithMouse: ImGuiWindowFlags_ = 16;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoCollapse: ImGuiWindowFlags_ = 32;
pub const ImGuiWindowFlags__ImGuiWindowFlags_AlwaysAutoResize: ImGuiWindowFlags_ = 64;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoBackground: ImGuiWindowFlags_ = 128;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoSavedSettings: ImGuiWindowFlags_ = 256;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoMouseInputs: ImGuiWindowFlags_ = 512;
pub const ImGuiWindowFlags__ImGuiWindowFlags_MenuBar: ImGuiWindowFlags_ = 1024;
pub const ImGuiWindowFlags__ImGuiWindowFlags_HorizontalScrollbar: ImGuiWindowFlags_ = 2048;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoFocusOnAppearing: ImGuiWindowFlags_ = 4096;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoBringToFrontOnFocus: ImGuiWindowFlags_ = 8192;
pub const ImGuiWindowFlags__ImGuiWindowFlags_AlwaysVerticalScrollbar: ImGuiWindowFlags_ = 16384;
pub const ImGuiWindowFlags__ImGuiWindowFlags_AlwaysHorizontalScrollbar: ImGuiWindowFlags_ = 32768;
pub const ImGuiWindowFlags__ImGuiWindowFlags_AlwaysUseWindowPadding: ImGuiWindowFlags_ = 65536;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoNavInputs: ImGuiWindowFlags_ = 262144;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoNavFocus: ImGuiWindowFlags_ = 524288;
pub const ImGuiWindowFlags__ImGuiWindowFlags_UnsavedDocument: ImGuiWindowFlags_ = 1048576;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoDocking: ImGuiWindowFlags_ = 2097152;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoNav: ImGuiWindowFlags_ = 786432;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoDecoration: ImGuiWindowFlags_ = 43;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NoInputs: ImGuiWindowFlags_ = 786944;
pub const ImGuiWindowFlags__ImGuiWindowFlags_NavFlattened: ImGuiWindowFlags_ = 8388608;
pub const ImGuiWindowFlags__ImGuiWindowFlags_ChildWindow: ImGuiWindowFlags_ = 16777216;
pub const ImGuiWindowFlags__ImGuiWindowFlags_Tooltip: ImGuiWindowFlags_ = 33554432;
pub const ImGuiWindowFlags__ImGuiWindowFlags_Popup: ImGuiWindowFlags_ = 67108864;
pub const ImGuiWindowFlags__ImGuiWindowFlags_Modal: ImGuiWindowFlags_ = 134217728;
pub const ImGuiWindowFlags__ImGuiWindowFlags_ChildMenu: ImGuiWindowFlags_ = 268435456;
pub const ImGuiWindowFlags__ImGuiWindowFlags_DockNodeHost: ImGuiWindowFlags_ = 536870912;
pub type ImGuiWindowFlags_ = ::std::os::raw::c_int;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_None: ImGuiInputTextFlags_ = 0;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CharsDecimal: ImGuiInputTextFlags_ = 1;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CharsHexadecimal: ImGuiInputTextFlags_ = 2;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CharsUppercase: ImGuiInputTextFlags_ = 4;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CharsNoBlank: ImGuiInputTextFlags_ = 8;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_AutoSelectAll: ImGuiInputTextFlags_ = 16;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_EnterReturnsTrue: ImGuiInputTextFlags_ = 32;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CallbackCompletion: ImGuiInputTextFlags_ = 64;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CallbackHistory: ImGuiInputTextFlags_ = 128;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CallbackAlways: ImGuiInputTextFlags_ = 256;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CallbackCharFilter: ImGuiInputTextFlags_ = 512;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_AllowTabInput: ImGuiInputTextFlags_ = 1024;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CtrlEnterForNewLine: ImGuiInputTextFlags_ = 2048;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_NoHorizontalScroll: ImGuiInputTextFlags_ = 4096;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_AlwaysOverwrite: ImGuiInputTextFlags_ = 8192;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_ReadOnly: ImGuiInputTextFlags_ = 16384;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_Password: ImGuiInputTextFlags_ = 32768;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_NoUndoRedo: ImGuiInputTextFlags_ = 65536;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CharsScientific: ImGuiInputTextFlags_ = 131072;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CallbackResize: ImGuiInputTextFlags_ = 262144;
pub const ImGuiInputTextFlags__ImGuiInputTextFlags_CallbackEdit: ImGuiInputTextFlags_ = 524288;
pub type ImGuiInputTextFlags_ = ::std::os::raw::c_int;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_None: ImGuiTreeNodeFlags_ = 0;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_Selected: ImGuiTreeNodeFlags_ = 1;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_Framed: ImGuiTreeNodeFlags_ = 2;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_AllowItemOverlap: ImGuiTreeNodeFlags_ = 4;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_NoTreePushOnOpen: ImGuiTreeNodeFlags_ = 8;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_NoAutoOpenOnLog: ImGuiTreeNodeFlags_ = 16;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_DefaultOpen: ImGuiTreeNodeFlags_ = 32;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_OpenOnDoubleClick: ImGuiTreeNodeFlags_ = 64;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_OpenOnArrow: ImGuiTreeNodeFlags_ = 128;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_Leaf: ImGuiTreeNodeFlags_ = 256;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_Bullet: ImGuiTreeNodeFlags_ = 512;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_FramePadding: ImGuiTreeNodeFlags_ = 1024;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_SpanAvailWidth: ImGuiTreeNodeFlags_ = 2048;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_SpanFullWidth: ImGuiTreeNodeFlags_ = 4096;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_NavLeftJumpsBackHere: ImGuiTreeNodeFlags_ = 8192;
pub const ImGuiTreeNodeFlags__ImGuiTreeNodeFlags_CollapsingHeader: ImGuiTreeNodeFlags_ = 26;
pub type ImGuiTreeNodeFlags_ = ::std::os::raw::c_int;
pub const ImGuiPopupFlags__ImGuiPopupFlags_None: ImGuiPopupFlags_ = 0;
pub const ImGuiPopupFlags__ImGuiPopupFlags_MouseButtonLeft: ImGuiPopupFlags_ = 0;
pub const ImGuiPopupFlags__ImGuiPopupFlags_MouseButtonRight: ImGuiPopupFlags_ = 1;
pub const ImGuiPopupFlags__ImGuiPopupFlags_MouseButtonMiddle: ImGuiPopupFlags_ = 2;
pub const ImGuiPopupFlags__ImGuiPopupFlags_MouseButtonMask_: ImGuiPopupFlags_ = 31;
pub const ImGuiPopupFlags__ImGuiPopupFlags_MouseButtonDefault_: ImGuiPopupFlags_ = 1;
pub const ImGuiPopupFlags__ImGuiPopupFlags_NoOpenOverExistingPopup: ImGuiPopupFlags_ = 32;
pub const ImGuiPopupFlags__ImGuiPopupFlags_NoOpenOverItems: ImGuiPopupFlags_ = 64;
pub const ImGuiPopupFlags__ImGuiPopupFlags_AnyPopupId: ImGuiPopupFlags_ = 128;
pub const ImGuiPopupFlags__ImGuiPopupFlags_AnyPopupLevel: ImGuiPopupFlags_ = 256;
pub const ImGuiPopupFlags__ImGuiPopupFlags_AnyPopup: ImGuiPopupFlags_ = 384;
pub type ImGuiPopupFlags_ = ::std::os::raw::c_int;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_None: ImGuiSelectableFlags_ = 0;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_DontClosePopups: ImGuiSelectableFlags_ = 1;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_SpanAllColumns: ImGuiSelectableFlags_ = 2;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_AllowDoubleClick: ImGuiSelectableFlags_ = 4;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_Disabled: ImGuiSelectableFlags_ = 8;
pub const ImGuiSelectableFlags__ImGuiSelectableFlags_AllowItemOverlap: ImGuiSelectableFlags_ = 16;
pub type ImGuiSelectableFlags_ = ::std::os::raw::c_int;
pub const ImGuiComboFlags__ImGuiComboFlags_None: ImGuiComboFlags_ = 0;
pub const ImGuiComboFlags__ImGuiComboFlags_PopupAlignLeft: ImGuiComboFlags_ = 1;
pub const ImGuiComboFlags__ImGuiComboFlags_HeightSmall: ImGuiComboFlags_ = 2;
pub const ImGuiComboFlags__ImGuiComboFlags_HeightRegular: ImGuiComboFlags_ = 4;
pub const ImGuiComboFlags__ImGuiComboFlags_HeightLarge: ImGuiComboFlags_ = 8;
pub const ImGuiComboFlags__ImGuiComboFlags_HeightLargest: ImGuiComboFlags_ = 16;
pub const ImGuiComboFlags__ImGuiComboFlags_NoArrowButton: ImGuiComboFlags_ = 32;
pub const ImGuiComboFlags__ImGuiComboFlags_NoPreview: ImGuiComboFlags_ = 64;
pub const ImGuiComboFlags__ImGuiComboFlags_HeightMask_: ImGuiComboFlags_ = 30;
pub type ImGuiComboFlags_ = ::std::os::raw::c_int;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_None: ImGuiTabBarFlags_ = 0;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_Reorderable: ImGuiTabBarFlags_ = 1;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_AutoSelectNewTabs: ImGuiTabBarFlags_ = 2;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_TabListPopupButton: ImGuiTabBarFlags_ = 4;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_NoCloseWithMiddleMouseButton: ImGuiTabBarFlags_ = 8;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_NoTabListScrollingButtons: ImGuiTabBarFlags_ = 16;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_NoTooltip: ImGuiTabBarFlags_ = 32;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_FittingPolicyResizeDown: ImGuiTabBarFlags_ = 64;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_FittingPolicyScroll: ImGuiTabBarFlags_ = 128;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_FittingPolicyMask_: ImGuiTabBarFlags_ = 192;
pub const ImGuiTabBarFlags__ImGuiTabBarFlags_FittingPolicyDefault_: ImGuiTabBarFlags_ = 64;
pub type ImGuiTabBarFlags_ = ::std::os::raw::c_int;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_None: ImGuiTabItemFlags_ = 0;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_UnsavedDocument: ImGuiTabItemFlags_ = 1;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_SetSelected: ImGuiTabItemFlags_ = 2;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_NoCloseWithMiddleMouseButton: ImGuiTabItemFlags_ = 4;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_NoPushId: ImGuiTabItemFlags_ = 8;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_NoTooltip: ImGuiTabItemFlags_ = 16;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_NoReorder: ImGuiTabItemFlags_ = 32;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_Leading: ImGuiTabItemFlags_ = 64;
pub const ImGuiTabItemFlags__ImGuiTabItemFlags_Trailing: ImGuiTabItemFlags_ = 128;
pub type ImGuiTabItemFlags_ = ::std::os::raw::c_int;
pub const ImGuiTableFlags__ImGuiTableFlags_None: ImGuiTableFlags_ = 0;
pub const ImGuiTableFlags__ImGuiTableFlags_Resizable: ImGuiTableFlags_ = 1;
pub const ImGuiTableFlags__ImGuiTableFlags_Reorderable: ImGuiTableFlags_ = 2;
pub const ImGuiTableFlags__ImGuiTableFlags_Hideable: ImGuiTableFlags_ = 4;
pub const ImGuiTableFlags__ImGuiTableFlags_Sortable: ImGuiTableFlags_ = 8;
pub const ImGuiTableFlags__ImGuiTableFlags_NoSavedSettings: ImGuiTableFlags_ = 16;
pub const ImGuiTableFlags__ImGuiTableFlags_ContextMenuInBody: ImGuiTableFlags_ = 32;
pub const ImGuiTableFlags__ImGuiTableFlags_RowBg: ImGuiTableFlags_ = 64;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersInnerH: ImGuiTableFlags_ = 128;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersOuterH: ImGuiTableFlags_ = 256;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersInnerV: ImGuiTableFlags_ = 512;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersOuterV: ImGuiTableFlags_ = 1024;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersH: ImGuiTableFlags_ = 384;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersV: ImGuiTableFlags_ = 1536;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersInner: ImGuiTableFlags_ = 640;
pub const ImGuiTableFlags__ImGuiTableFlags_BordersOuter: ImGuiTableFlags_ = 1280;
pub const ImGuiTableFlags__ImGuiTableFlags_Borders: ImGuiTableFlags_ = 1920;
pub const ImGuiTableFlags__ImGuiTableFlags_NoBordersInBody: ImGuiTableFlags_ = 2048;
pub const ImGuiTableFlags__ImGuiTableFlags_NoBordersInBodyUntilResize: ImGuiTableFlags_ = 4096;
pub const ImGuiTableFlags__ImGuiTableFlags_SizingFixedFit: ImGuiTableFlags_ = 8192;
pub const ImGuiTableFlags__ImGuiTableFlags_SizingFixedSame: ImGuiTableFlags_ = 16384;
pub const ImGuiTableFlags__ImGuiTableFlags_SizingStretchProp: ImGuiTableFlags_ = 24576;
pub const ImGuiTableFlags__ImGuiTableFlags_SizingStretchSame: ImGuiTableFlags_ = 32768;
pub const ImGuiTableFlags__ImGuiTableFlags_NoHostExtendX: ImGuiTableFlags_ = 65536;
pub const ImGuiTableFlags__ImGuiTableFlags_NoHostExtendY: ImGuiTableFlags_ = 131072;
pub const ImGuiTableFlags__ImGuiTableFlags_NoKeepColumnsVisible: ImGuiTableFlags_ = 262144;
pub const ImGuiTableFlags__ImGuiTableFlags_PreciseWidths: ImGuiTableFlags_ = 524288;
pub const ImGuiTableFlags__ImGuiTableFlags_NoClip: ImGuiTableFlags_ = 1048576;
pub const ImGuiTableFlags__ImGuiTableFlags_PadOuterX: ImGuiTableFlags_ = 2097152;
pub const ImGuiTableFlags__ImGuiTableFlags_NoPadOuterX: ImGuiTableFlags_ = 4194304;
pub const ImGuiTableFlags__ImGuiTableFlags_NoPadInnerX: ImGuiTableFlags_ = 8388608;
pub const ImGuiTableFlags__ImGuiTableFlags_ScrollX: ImGuiTableFlags_ = 16777216;
pub const ImGuiTableFlags__ImGuiTableFlags_ScrollY: ImGuiTableFlags_ = 33554432;
pub const ImGuiTableFlags__ImGuiTableFlags_SortMulti: ImGuiTableFlags_ = 67108864;
pub const ImGuiTableFlags__ImGuiTableFlags_SortTristate: ImGuiTableFlags_ = 134217728;
pub const ImGuiTableFlags__ImGuiTableFlags_SizingMask_: ImGuiTableFlags_ = 57344;
pub type ImGuiTableFlags_ = ::std::os::raw::c_int;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_None: ImGuiTableColumnFlags_ = 0;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_Disabled: ImGuiTableColumnFlags_ = 1;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_DefaultHide: ImGuiTableColumnFlags_ = 2;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_DefaultSort: ImGuiTableColumnFlags_ = 4;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_WidthStretch: ImGuiTableColumnFlags_ = 8;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_WidthFixed: ImGuiTableColumnFlags_ = 16;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoResize: ImGuiTableColumnFlags_ = 32;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoReorder: ImGuiTableColumnFlags_ = 64;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoHide: ImGuiTableColumnFlags_ = 128;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoClip: ImGuiTableColumnFlags_ = 256;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoSort: ImGuiTableColumnFlags_ = 512;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoSortAscending: ImGuiTableColumnFlags_ =
    1024;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoSortDescending: ImGuiTableColumnFlags_ =
    2048;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoHeaderLabel: ImGuiTableColumnFlags_ = 4096;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoHeaderWidth: ImGuiTableColumnFlags_ = 8192;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_PreferSortAscending: ImGuiTableColumnFlags_ =
    16384;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_PreferSortDescending:
    ImGuiTableColumnFlags_ = 32768;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IndentEnable: ImGuiTableColumnFlags_ = 65536;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IndentDisable: ImGuiTableColumnFlags_ =
    131072;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IsEnabled: ImGuiTableColumnFlags_ = 16777216;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IsVisible: ImGuiTableColumnFlags_ = 33554432;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IsSorted: ImGuiTableColumnFlags_ = 67108864;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IsHovered: ImGuiTableColumnFlags_ =
    134217728;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_WidthMask_: ImGuiTableColumnFlags_ = 24;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_IndentMask_: ImGuiTableColumnFlags_ = 196608;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_StatusMask_: ImGuiTableColumnFlags_ =
    251658240;
pub const ImGuiTableColumnFlags__ImGuiTableColumnFlags_NoDirectResize_: ImGuiTableColumnFlags_ =
    1073741824;
pub type ImGuiTableColumnFlags_ = ::std::os::raw::c_int;
pub const ImGuiTableRowFlags__ImGuiTableRowFlags_None: ImGuiTableRowFlags_ = 0;
pub const ImGuiTableRowFlags__ImGuiTableRowFlags_Headers: ImGuiTableRowFlags_ = 1;
pub type ImGuiTableRowFlags_ = ::std::os::raw::c_int;
pub const ImGuiTableBgTarget__ImGuiTableBgTarget_None: ImGuiTableBgTarget_ = 0;
pub const ImGuiTableBgTarget__ImGuiTableBgTarget_RowBg0: ImGuiTableBgTarget_ = 1;
pub const ImGuiTableBgTarget__ImGuiTableBgTarget_RowBg1: ImGuiTableBgTarget_ = 2;
pub const ImGuiTableBgTarget__ImGuiTableBgTarget_CellBg: ImGuiTableBgTarget_ = 3;
pub type ImGuiTableBgTarget_ = ::std::os::raw::c_int;
pub const ImGuiFocusedFlags__ImGuiFocusedFlags_None: ImGuiFocusedFlags_ = 0;
pub const ImGuiFocusedFlags__ImGuiFocusedFlags_ChildWindows: ImGuiFocusedFlags_ = 1;
pub const ImGuiFocusedFlags__ImGuiFocusedFlags_RootWindow: ImGuiFocusedFlags_ = 2;
pub const ImGuiFocusedFlags__ImGuiFocusedFlags_AnyWindow: ImGuiFocusedFlags_ = 4;
pub const ImGuiFocusedFlags__ImGuiFocusedFlags_NoPopupHierarchy: ImGuiFocusedFlags_ = 8;
pub const ImGuiFocusedFlags__ImGuiFocusedFlags_DockHierarchy: ImGuiFocusedFlags_ = 16;
pub const ImGuiFocusedFlags__ImGuiFocusedFlags_RootAndChildWindows: ImGuiFocusedFlags_ = 3;
pub type ImGuiFocusedFlags_ = ::std::os::raw::c_int;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_None: ImGuiHoveredFlags_ = 0;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_ChildWindows: ImGuiHoveredFlags_ = 1;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_RootWindow: ImGuiHoveredFlags_ = 2;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AnyWindow: ImGuiHoveredFlags_ = 4;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_NoPopupHierarchy: ImGuiHoveredFlags_ = 8;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_DockHierarchy: ImGuiHoveredFlags_ = 16;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AllowWhenBlockedByPopup: ImGuiHoveredFlags_ = 32;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AllowWhenBlockedByActiveItem: ImGuiHoveredFlags_ =
    128;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AllowWhenOverlapped: ImGuiHoveredFlags_ = 256;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_AllowWhenDisabled: ImGuiHoveredFlags_ = 512;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_NoNavOverride: ImGuiHoveredFlags_ = 1024;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_RectOnly: ImGuiHoveredFlags_ = 416;
pub const ImGuiHoveredFlags__ImGuiHoveredFlags_RootAndChildWindows: ImGuiHoveredFlags_ = 3;
pub type ImGuiHoveredFlags_ = ::std::os::raw::c_int;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_None: ImGuiDockNodeFlags_ = 0;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_KeepAliveOnly: ImGuiDockNodeFlags_ = 1;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_NoDockingInCentralNode: ImGuiDockNodeFlags_ = 4;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_PassthruCentralNode: ImGuiDockNodeFlags_ = 8;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_NoSplit: ImGuiDockNodeFlags_ = 16;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_NoResize: ImGuiDockNodeFlags_ = 32;
pub const ImGuiDockNodeFlags__ImGuiDockNodeFlags_AutoHideTabBar: ImGuiDockNodeFlags_ = 64;
pub type ImGuiDockNodeFlags_ = ::std::os::raw::c_int;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_None: ImGuiDragDropFlags_ = 0;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_SourceNoPreviewTooltip: ImGuiDragDropFlags_ = 1;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_SourceNoDisableHover: ImGuiDragDropFlags_ = 2;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_SourceNoHoldToOpenOthers: ImGuiDragDropFlags_ = 4;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_SourceAllowNullID: ImGuiDragDropFlags_ = 8;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_SourceExtern: ImGuiDragDropFlags_ = 16;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_SourceAutoExpirePayload: ImGuiDragDropFlags_ = 32;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_AcceptBeforeDelivery: ImGuiDragDropFlags_ = 1024;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_AcceptNoDrawDefaultRect: ImGuiDragDropFlags_ =
    2048;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_AcceptNoPreviewTooltip: ImGuiDragDropFlags_ = 4096;
pub const ImGuiDragDropFlags__ImGuiDragDropFlags_AcceptPeekOnly: ImGuiDragDropFlags_ = 3072;
pub type ImGuiDragDropFlags_ = ::std::os::raw::c_int;
pub const ImGuiDataType__ImGuiDataType_S8: ImGuiDataType_ = 0;
pub const ImGuiDataType__ImGuiDataType_U8: ImGuiDataType_ = 1;
pub const ImGuiDataType__ImGuiDataType_S16: ImGuiDataType_ = 2;
pub const ImGuiDataType__ImGuiDataType_U16: ImGuiDataType_ = 3;
pub const ImGuiDataType__ImGuiDataType_S32: ImGuiDataType_ = 4;
pub const ImGuiDataType__ImGuiDataType_U32: ImGuiDataType_ = 5;
pub const ImGuiDataType__ImGuiDataType_S64: ImGuiDataType_ = 6;
pub const ImGuiDataType__ImGuiDataType_U64: ImGuiDataType_ = 7;
pub const ImGuiDataType__ImGuiDataType_Float: ImGuiDataType_ = 8;
pub const ImGuiDataType__ImGuiDataType_Double: ImGuiDataType_ = 9;
pub const ImGuiDataType__ImGuiDataType_COUNT: ImGuiDataType_ = 10;
pub type ImGuiDataType_ = ::std::os::raw::c_int;
pub const ImGuiDir__ImGuiDir_None: ImGuiDir_ = -1;
pub const ImGuiDir__ImGuiDir_Left: ImGuiDir_ = 0;
pub const ImGuiDir__ImGuiDir_Right: ImGuiDir_ = 1;
pub const ImGuiDir__ImGuiDir_Up: ImGuiDir_ = 2;
pub const ImGuiDir__ImGuiDir_Down: ImGuiDir_ = 3;
pub const ImGuiDir__ImGuiDir_COUNT: ImGuiDir_ = 4;
pub type ImGuiDir_ = ::std::os::raw::c_int;
pub const ImGuiSortDirection__ImGuiSortDirection_None: ImGuiSortDirection_ = 0;
pub const ImGuiSortDirection__ImGuiSortDirection_Ascending: ImGuiSortDirection_ = 1;
pub const ImGuiSortDirection__ImGuiSortDirection_Descending: ImGuiSortDirection_ = 2;
pub type ImGuiSortDirection_ = ::std::os::raw::c_int;
pub const ImGuiKey__ImGuiKey_None: ImGuiKey_ = 0;
pub const ImGuiKey__ImGuiKey_Tab: ImGuiKey_ = 512;
pub const ImGuiKey__ImGuiKey_LeftArrow: ImGuiKey_ = 513;
pub const ImGuiKey__ImGuiKey_RightArrow: ImGuiKey_ = 514;
pub const ImGuiKey__ImGuiKey_UpArrow: ImGuiKey_ = 515;
pub const ImGuiKey__ImGuiKey_DownArrow: ImGuiKey_ = 516;
pub const ImGuiKey__ImGuiKey_PageUp: ImGuiKey_ = 517;
pub const ImGuiKey__ImGuiKey_PageDown: ImGuiKey_ = 518;
pub const ImGuiKey__ImGuiKey_Home: ImGuiKey_ = 519;
pub const ImGuiKey__ImGuiKey_End: ImGuiKey_ = 520;
pub const ImGuiKey__ImGuiKey_Insert: ImGuiKey_ = 521;
pub const ImGuiKey__ImGuiKey_Delete: ImGuiKey_ = 522;
pub const ImGuiKey__ImGuiKey_Backspace: ImGuiKey_ = 523;
pub const ImGuiKey__ImGuiKey_Space: ImGuiKey_ = 524;
pub const ImGuiKey__ImGuiKey_Enter: ImGuiKey_ = 525;
pub const ImGuiKey__ImGuiKey_Escape: ImGuiKey_ = 526;
pub const ImGuiKey__ImGuiKey_LeftCtrl: ImGuiKey_ = 527;
pub const ImGuiKey__ImGuiKey_LeftShift: ImGuiKey_ = 528;
pub const ImGuiKey__ImGuiKey_LeftAlt: ImGuiKey_ = 529;
pub const ImGuiKey__ImGuiKey_LeftSuper: ImGuiKey_ = 530;
pub const ImGuiKey__ImGuiKey_RightCtrl: ImGuiKey_ = 531;
pub const ImGuiKey__ImGuiKey_RightShift: ImGuiKey_ = 532;
pub const ImGuiKey__ImGuiKey_RightAlt: ImGuiKey_ = 533;
pub const ImGuiKey__ImGuiKey_RightSuper: ImGuiKey_ = 534;
pub const ImGuiKey__ImGuiKey_Menu: ImGuiKey_ = 535;
pub const ImGuiKey__ImGuiKey_0: ImGuiKey_ = 536;
pub const ImGuiKey__ImGuiKey_1: ImGuiKey_ = 537;
pub const ImGuiKey__ImGuiKey_2: ImGuiKey_ = 538;
pub const ImGuiKey__ImGuiKey_3: ImGuiKey_ = 539;
pub const ImGuiKey__ImGuiKey_4: ImGuiKey_ = 540;
pub const ImGuiKey__ImGuiKey_5: ImGuiKey_ = 541;
pub const ImGuiKey__ImGuiKey_6: ImGuiKey_ = 542;
pub const ImGuiKey__ImGuiKey_7: ImGuiKey_ = 543;
pub const ImGuiKey__ImGuiKey_8: ImGuiKey_ = 544;
pub const ImGuiKey__ImGuiKey_9: ImGuiKey_ = 545;
pub const ImGuiKey__ImGuiKey_A: ImGuiKey_ = 546;
pub const ImGuiKey__ImGuiKey_B: ImGuiKey_ = 547;
pub const ImGuiKey__ImGuiKey_C: ImGuiKey_ = 548;
pub const ImGuiKey__ImGuiKey_D: ImGuiKey_ = 549;
pub const ImGuiKey__ImGuiKey_E: ImGuiKey_ = 550;
pub const ImGuiKey__ImGuiKey_F: ImGuiKey_ = 551;
pub const ImGuiKey__ImGuiKey_G: ImGuiKey_ = 552;
pub const ImGuiKey__ImGuiKey_H: ImGuiKey_ = 553;
pub const ImGuiKey__ImGuiKey_I: ImGuiKey_ = 554;
pub const ImGuiKey__ImGuiKey_J: ImGuiKey_ = 555;
pub const ImGuiKey__ImGuiKey_K: ImGuiKey_ = 556;
pub const ImGuiKey__ImGuiKey_L: ImGuiKey_ = 557;
pub const ImGuiKey__ImGuiKey_M: ImGuiKey_ = 558;
pub const ImGuiKey__ImGuiKey_N: ImGuiKey_ = 559;
pub const ImGuiKey__ImGuiKey_O: ImGuiKey_ = 560;
pub const ImGuiKey__ImGuiKey_P: ImGuiKey_ = 561;
pub const ImGuiKey__ImGuiKey_Q: ImGuiKey_ = 562;
pub const ImGuiKey__ImGuiKey_R: ImGuiKey_ = 563;
pub const ImGuiKey__ImGuiKey_S: ImGuiKey_ = 564;
pub const ImGuiKey__ImGuiKey_T: ImGuiKey_ = 565;
pub const ImGuiKey__ImGuiKey_U: ImGuiKey_ = 566;
pub const ImGuiKey__ImGuiKey_V: ImGuiKey_ = 567;
pub const ImGuiKey__ImGuiKey_W: ImGuiKey_ = 568;
pub const ImGuiKey__ImGuiKey_X: ImGuiKey_ = 569;
pub const ImGuiKey__ImGuiKey_Y: ImGuiKey_ = 570;
pub const ImGuiKey__ImGuiKey_Z: ImGuiKey_ = 571;
pub const ImGuiKey__ImGuiKey_F1: ImGuiKey_ = 572;
pub const ImGuiKey__ImGuiKey_F2: ImGuiKey_ = 573;
pub const ImGuiKey__ImGuiKey_F3: ImGuiKey_ = 574;
pub const ImGuiKey__ImGuiKey_F4: ImGuiKey_ = 575;
pub const ImGuiKey__ImGuiKey_F5: ImGuiKey_ = 576;
pub const ImGuiKey__ImGuiKey_F6: ImGuiKey_ = 577;
pub const ImGuiKey__ImGuiKey_F7: ImGuiKey_ = 578;
pub const ImGuiKey__ImGuiKey_F8: ImGuiKey_ = 579;
pub const ImGuiKey__ImGuiKey_F9: ImGuiKey_ = 580;
pub const ImGuiKey__ImGuiKey_F10: ImGuiKey_ = 581;
pub const ImGuiKey__ImGuiKey_F11: ImGuiKey_ = 582;
pub const ImGuiKey__ImGuiKey_F12: ImGuiKey_ = 583;
pub const ImGuiKey__ImGuiKey_Apostrophe: ImGuiKey_ = 584;
pub const ImGuiKey__ImGuiKey_Comma: ImGuiKey_ = 585;
pub const ImGuiKey__ImGuiKey_Minus: ImGuiKey_ = 586;
pub const ImGuiKey__ImGuiKey_Period: ImGuiKey_ = 587;
pub const ImGuiKey__ImGuiKey_Slash: ImGuiKey_ = 588;
pub const ImGuiKey__ImGuiKey_Semicolon: ImGuiKey_ = 589;
pub const ImGuiKey__ImGuiKey_Equal: ImGuiKey_ = 590;
pub const ImGuiKey__ImGuiKey_LeftBracket: ImGuiKey_ = 591;
pub const ImGuiKey__ImGuiKey_Backslash: ImGuiKey_ = 592;
pub const ImGuiKey__ImGuiKey_RightBracket: ImGuiKey_ = 593;
pub const ImGuiKey__ImGuiKey_GraveAccent: ImGuiKey_ = 594;
pub const ImGuiKey__ImGuiKey_CapsLock: ImGuiKey_ = 595;
pub const ImGuiKey__ImGuiKey_ScrollLock: ImGuiKey_ = 596;
pub const ImGuiKey__ImGuiKey_NumLock: ImGuiKey_ = 597;
pub const ImGuiKey__ImGuiKey_PrintScreen: ImGuiKey_ = 598;
pub const ImGuiKey__ImGuiKey_Pause: ImGuiKey_ = 599;
pub const ImGuiKey__ImGuiKey_Keypad0: ImGuiKey_ = 600;
pub const ImGuiKey__ImGuiKey_Keypad1: ImGuiKey_ = 601;
pub const ImGuiKey__ImGuiKey_Keypad2: ImGuiKey_ = 602;
pub const ImGuiKey__ImGuiKey_Keypad3: ImGuiKey_ = 603;
pub const ImGuiKey__ImGuiKey_Keypad4: ImGuiKey_ = 604;
pub const ImGuiKey__ImGuiKey_Keypad5: ImGuiKey_ = 605;
pub const ImGuiKey__ImGuiKey_Keypad6: ImGuiKey_ = 606;
pub const ImGuiKey__ImGuiKey_Keypad7: ImGuiKey_ = 607;
pub const ImGuiKey__ImGuiKey_Keypad8: ImGuiKey_ = 608;
pub const ImGuiKey__ImGuiKey_Keypad9: ImGuiKey_ = 609;
pub const ImGuiKey__ImGuiKey_KeypadDecimal: ImGuiKey_ = 610;
pub const ImGuiKey__ImGuiKey_KeypadDivide: ImGuiKey_ = 611;
pub const ImGuiKey__ImGuiKey_KeypadMultiply: ImGuiKey_ = 612;
pub const ImGuiKey__ImGuiKey_KeypadSubtract: ImGuiKey_ = 613;
pub const ImGuiKey__ImGuiKey_KeypadAdd: ImGuiKey_ = 614;
pub const ImGuiKey__ImGuiKey_KeypadEnter: ImGuiKey_ = 615;
pub const ImGuiKey__ImGuiKey_KeypadEqual: ImGuiKey_ = 616;
pub const ImGuiKey__ImGuiKey_GamepadStart: ImGuiKey_ = 617;
pub const ImGuiKey__ImGuiKey_GamepadBack: ImGuiKey_ = 618;
pub const ImGuiKey__ImGuiKey_GamepadFaceUp: ImGuiKey_ = 619;
pub const ImGuiKey__ImGuiKey_GamepadFaceDown: ImGuiKey_ = 620;
pub const ImGuiKey__ImGuiKey_GamepadFaceLeft: ImGuiKey_ = 621;
pub const ImGuiKey__ImGuiKey_GamepadFaceRight: ImGuiKey_ = 622;
pub const ImGuiKey__ImGuiKey_GamepadDpadUp: ImGuiKey_ = 623;
pub const ImGuiKey__ImGuiKey_GamepadDpadDown: ImGuiKey_ = 624;
pub const ImGuiKey__ImGuiKey_GamepadDpadLeft: ImGuiKey_ = 625;
pub const ImGuiKey__ImGuiKey_GamepadDpadRight: ImGuiKey_ = 626;
pub const ImGuiKey__ImGuiKey_GamepadL1: ImGuiKey_ = 627;
pub const ImGuiKey__ImGuiKey_GamepadR1: ImGuiKey_ = 628;
pub const ImGuiKey__ImGuiKey_GamepadL2: ImGuiKey_ = 629;
pub const ImGuiKey__ImGuiKey_GamepadR2: ImGuiKey_ = 630;
pub const ImGuiKey__ImGuiKey_GamepadL3: ImGuiKey_ = 631;
pub const ImGuiKey__ImGuiKey_GamepadR3: ImGuiKey_ = 632;
pub const ImGuiKey__ImGuiKey_GamepadLStickUp: ImGuiKey_ = 633;
pub const ImGuiKey__ImGuiKey_GamepadLStickDown: ImGuiKey_ = 634;
pub const ImGuiKey__ImGuiKey_GamepadLStickLeft: ImGuiKey_ = 635;
pub const ImGuiKey__ImGuiKey_GamepadLStickRight: ImGuiKey_ = 636;
pub const ImGuiKey__ImGuiKey_GamepadRStickUp: ImGuiKey_ = 637;
pub const ImGuiKey__ImGuiKey_GamepadRStickDown: ImGuiKey_ = 638;
pub const ImGuiKey__ImGuiKey_GamepadRStickLeft: ImGuiKey_ = 639;
pub const ImGuiKey__ImGuiKey_GamepadRStickRight: ImGuiKey_ = 640;
pub const ImGuiKey__ImGuiKey_ModCtrl: ImGuiKey_ = 641;
pub const ImGuiKey__ImGuiKey_ModShift: ImGuiKey_ = 642;
pub const ImGuiKey__ImGuiKey_ModAlt: ImGuiKey_ = 643;
pub const ImGuiKey__ImGuiKey_ModSuper: ImGuiKey_ = 644;
pub const ImGuiKey__ImGuiKey_COUNT: ImGuiKey_ = 645;
pub const ImGuiKey__ImGuiKey_NamedKey_BEGIN: ImGuiKey_ = 512;
pub const ImGuiKey__ImGuiKey_NamedKey_END: ImGuiKey_ = 645;
pub const ImGuiKey__ImGuiKey_NamedKey_COUNT: ImGuiKey_ = 133;
pub const ImGuiKey__ImGuiKey_KeysData_SIZE: ImGuiKey_ = 645;
pub const ImGuiKey__ImGuiKey_KeysData_OFFSET: ImGuiKey_ = 0;
pub type ImGuiKey_ = ::std::os::raw::c_int;
pub const ImGuiModFlags__ImGuiModFlags_None: ImGuiModFlags_ = 0;
pub const ImGuiModFlags__ImGuiModFlags_Ctrl: ImGuiModFlags_ = 1;
pub const ImGuiModFlags__ImGuiModFlags_Shift: ImGuiModFlags_ = 2;
pub const ImGuiModFlags__ImGuiModFlags_Alt: ImGuiModFlags_ = 4;
pub const ImGuiModFlags__ImGuiModFlags_Super: ImGuiModFlags_ = 8;
pub type ImGuiModFlags_ = ::std::os::raw::c_int;
pub const ImGuiNavInput__ImGuiNavInput_Activate: ImGuiNavInput_ = 0;
pub const ImGuiNavInput__ImGuiNavInput_Cancel: ImGuiNavInput_ = 1;
pub const ImGuiNavInput__ImGuiNavInput_Input: ImGuiNavInput_ = 2;
pub const ImGuiNavInput__ImGuiNavInput_Menu: ImGuiNavInput_ = 3;
pub const ImGuiNavInput__ImGuiNavInput_DpadLeft: ImGuiNavInput_ = 4;
pub const ImGuiNavInput__ImGuiNavInput_DpadRight: ImGuiNavInput_ = 5;
pub const ImGuiNavInput__ImGuiNavInput_DpadUp: ImGuiNavInput_ = 6;
pub const ImGuiNavInput__ImGuiNavInput_DpadDown: ImGuiNavInput_ = 7;
pub const ImGuiNavInput__ImGuiNavInput_LStickLeft: ImGuiNavInput_ = 8;
pub const ImGuiNavInput__ImGuiNavInput_LStickRight: ImGuiNavInput_ = 9;
pub const ImGuiNavInput__ImGuiNavInput_LStickUp: ImGuiNavInput_ = 10;
pub const ImGuiNavInput__ImGuiNavInput_LStickDown: ImGuiNavInput_ = 11;
pub const ImGuiNavInput__ImGuiNavInput_FocusPrev: ImGuiNavInput_ = 12;
pub const ImGuiNavInput__ImGuiNavInput_FocusNext: ImGuiNavInput_ = 13;
pub const ImGuiNavInput__ImGuiNavInput_TweakSlow: ImGuiNavInput_ = 14;
pub const ImGuiNavInput__ImGuiNavInput_TweakFast: ImGuiNavInput_ = 15;
pub const ImGuiNavInput__ImGuiNavInput_KeyLeft_: ImGuiNavInput_ = 16;
pub const ImGuiNavInput__ImGuiNavInput_KeyRight_: ImGuiNavInput_ = 17;
pub const ImGuiNavInput__ImGuiNavInput_KeyUp_: ImGuiNavInput_ = 18;
pub const ImGuiNavInput__ImGuiNavInput_KeyDown_: ImGuiNavInput_ = 19;
pub const ImGuiNavInput__ImGuiNavInput_COUNT: ImGuiNavInput_ = 20;
pub type ImGuiNavInput_ = ::std::os::raw::c_int;
pub const ImGuiConfigFlags__ImGuiConfigFlags_None: ImGuiConfigFlags_ = 0;
pub const ImGuiConfigFlags__ImGuiConfigFlags_NavEnableKeyboard: ImGuiConfigFlags_ = 1;
pub const ImGuiConfigFlags__ImGuiConfigFlags_NavEnableGamepad: ImGuiConfigFlags_ = 2;
pub const ImGuiConfigFlags__ImGuiConfigFlags_NavEnableSetMousePos: ImGuiConfigFlags_ = 4;
pub const ImGuiConfigFlags__ImGuiConfigFlags_NavNoCaptureKeyboard: ImGuiConfigFlags_ = 8;
pub const ImGuiConfigFlags__ImGuiConfigFlags_NoMouse: ImGuiConfigFlags_ = 16;
pub const ImGuiConfigFlags__ImGuiConfigFlags_NoMouseCursorChange: ImGuiConfigFlags_ = 32;
pub const ImGuiConfigFlags__ImGuiConfigFlags_DockingEnable: ImGuiConfigFlags_ = 64;
pub const ImGuiConfigFlags__ImGuiConfigFlags_ViewportsEnable: ImGuiConfigFlags_ = 1024;
pub const ImGuiConfigFlags__ImGuiConfigFlags_DpiEnableScaleViewports: ImGuiConfigFlags_ = 16384;
pub const ImGuiConfigFlags__ImGuiConfigFlags_DpiEnableScaleFonts: ImGuiConfigFlags_ = 32768;
pub const ImGuiConfigFlags__ImGuiConfigFlags_IsSRGB: ImGuiConfigFlags_ = 1048576;
pub const ImGuiConfigFlags__ImGuiConfigFlags_IsTouchScreen: ImGuiConfigFlags_ = 2097152;
pub type ImGuiConfigFlags_ = ::std::os::raw::c_int;
pub const ImGuiBackendFlags__ImGuiBackendFlags_None: ImGuiBackendFlags_ = 0;
pub const ImGuiBackendFlags__ImGuiBackendFlags_HasGamepad: ImGuiBackendFlags_ = 1;
pub const ImGuiBackendFlags__ImGuiBackendFlags_HasMouseCursors: ImGuiBackendFlags_ = 2;
pub const ImGuiBackendFlags__ImGuiBackendFlags_HasSetMousePos: ImGuiBackendFlags_ = 4;
pub const ImGuiBackendFlags__ImGuiBackendFlags_RendererHasVtxOffset: ImGuiBackendFlags_ = 8;
pub const ImGuiBackendFlags__ImGuiBackendFlags_PlatformHasViewports: ImGuiBackendFlags_ = 1024;
pub const ImGuiBackendFlags__ImGuiBackendFlags_HasMouseHoveredViewport: ImGuiBackendFlags_ = 2048;
pub const ImGuiBackendFlags__ImGuiBackendFlags_RendererHasViewports: ImGuiBackendFlags_ = 4096;
pub type ImGuiBackendFlags_ = ::std::os::raw::c_int;
pub const ImGuiCol__ImGuiCol_Text: ImGuiCol_ = 0;
pub const ImGuiCol__ImGuiCol_TextDisabled: ImGuiCol_ = 1;
pub const ImGuiCol__ImGuiCol_WindowBg: ImGuiCol_ = 2;
pub const ImGuiCol__ImGuiCol_ChildBg: ImGuiCol_ = 3;
pub const ImGuiCol__ImGuiCol_PopupBg: ImGuiCol_ = 4;
pub const ImGuiCol__ImGuiCol_Border: ImGuiCol_ = 5;
pub const ImGuiCol__ImGuiCol_BorderShadow: ImGuiCol_ = 6;
pub const ImGuiCol__ImGuiCol_FrameBg: ImGuiCol_ = 7;
pub const ImGuiCol__ImGuiCol_FrameBgHovered: ImGuiCol_ = 8;
pub const ImGuiCol__ImGuiCol_FrameBgActive: ImGuiCol_ = 9;
pub const ImGuiCol__ImGuiCol_TitleBg: ImGuiCol_ = 10;
pub const ImGuiCol__ImGuiCol_TitleBgActive: ImGuiCol_ = 11;
pub const ImGuiCol__ImGuiCol_TitleBgCollapsed: ImGuiCol_ = 12;
pub const ImGuiCol__ImGuiCol_MenuBarBg: ImGuiCol_ = 13;
pub const ImGuiCol__ImGuiCol_ScrollbarBg: ImGuiCol_ = 14;
pub const ImGuiCol__ImGuiCol_ScrollbarGrab: ImGuiCol_ = 15;
pub const ImGuiCol__ImGuiCol_ScrollbarGrabHovered: ImGuiCol_ = 16;
pub const ImGuiCol__ImGuiCol_ScrollbarGrabActive: ImGuiCol_ = 17;
pub const ImGuiCol__ImGuiCol_CheckMark: ImGuiCol_ = 18;
pub const ImGuiCol__ImGuiCol_SliderGrab: ImGuiCol_ = 19;
pub const ImGuiCol__ImGuiCol_SliderGrabActive: ImGuiCol_ = 20;
pub const ImGuiCol__ImGuiCol_Button: ImGuiCol_ = 21;
pub const ImGuiCol__ImGuiCol_ButtonHovered: ImGuiCol_ = 22;
pub const ImGuiCol__ImGuiCol_ButtonActive: ImGuiCol_ = 23;
pub const ImGuiCol__ImGuiCol_Header: ImGuiCol_ = 24;
pub const ImGuiCol__ImGuiCol_HeaderHovered: ImGuiCol_ = 25;
pub const ImGuiCol__ImGuiCol_HeaderActive: ImGuiCol_ = 26;
pub const ImGuiCol__ImGuiCol_Separator: ImGuiCol_ = 27;
pub const ImGuiCol__ImGuiCol_SeparatorHovered: ImGuiCol_ = 28;
pub const ImGuiCol__ImGuiCol_SeparatorActive: ImGuiCol_ = 29;
pub const ImGuiCol__ImGuiCol_ResizeGrip: ImGuiCol_ = 30;
pub const ImGuiCol__ImGuiCol_ResizeGripHovered: ImGuiCol_ = 31;
pub const ImGuiCol__ImGuiCol_ResizeGripActive: ImGuiCol_ = 32;
pub const ImGuiCol__ImGuiCol_Tab: ImGuiCol_ = 33;
pub const ImGuiCol__ImGuiCol_TabHovered: ImGuiCol_ = 34;
pub const ImGuiCol__ImGuiCol_TabActive: ImGuiCol_ = 35;
pub const ImGuiCol__ImGuiCol_TabUnfocused: ImGuiCol_ = 36;
pub const ImGuiCol__ImGuiCol_TabUnfocusedActive: ImGuiCol_ = 37;
pub const ImGuiCol__ImGuiCol_DockingPreview: ImGuiCol_ = 38;
pub const ImGuiCol__ImGuiCol_DockingEmptyBg: ImGuiCol_ = 39;
pub const ImGuiCol__ImGuiCol_PlotLines: ImGuiCol_ = 40;
pub const ImGuiCol__ImGuiCol_PlotLinesHovered: ImGuiCol_ = 41;
pub const ImGuiCol__ImGuiCol_PlotHistogram: ImGuiCol_ = 42;
pub const ImGuiCol__ImGuiCol_PlotHistogramHovered: ImGuiCol_ = 43;
pub const ImGuiCol__ImGuiCol_TableHeaderBg: ImGuiCol_ = 44;
pub const ImGuiCol__ImGuiCol_TableBorderStrong: ImGuiCol_ = 45;
pub const ImGuiCol__ImGuiCol_TableBorderLight: ImGuiCol_ = 46;
pub const ImGuiCol__ImGuiCol_TableRowBg: ImGuiCol_ = 47;
pub const ImGuiCol__ImGuiCol_TableRowBgAlt: ImGuiCol_ = 48;
pub const ImGuiCol__ImGuiCol_TextSelectedBg: ImGuiCol_ = 49;
pub const ImGuiCol__ImGuiCol_DragDropTarget: ImGuiCol_ = 50;
pub const ImGuiCol__ImGuiCol_NavHighlight: ImGuiCol_ = 51;
pub const ImGuiCol__ImGuiCol_NavWindowingHighlight: ImGuiCol_ = 52;
pub const ImGuiCol__ImGuiCol_NavWindowingDimBg: ImGuiCol_ = 53;
pub const ImGuiCol__ImGuiCol_ModalWindowDimBg: ImGuiCol_ = 54;
pub const ImGuiCol__ImGuiCol_COUNT: ImGuiCol_ = 55;
pub type ImGuiCol_ = ::std::os::raw::c_int;
pub const ImGuiStyleVar__ImGuiStyleVar_Alpha: ImGuiStyleVar_ = 0;
pub const ImGuiStyleVar__ImGuiStyleVar_DisabledAlpha: ImGuiStyleVar_ = 1;
pub const ImGuiStyleVar__ImGuiStyleVar_WindowPadding: ImGuiStyleVar_ = 2;
pub const ImGuiStyleVar__ImGuiStyleVar_WindowRounding: ImGuiStyleVar_ = 3;
pub const ImGuiStyleVar__ImGuiStyleVar_WindowBorderSize: ImGuiStyleVar_ = 4;
pub const ImGuiStyleVar__ImGuiStyleVar_WindowMinSize: ImGuiStyleVar_ = 5;
pub const ImGuiStyleVar__ImGuiStyleVar_WindowTitleAlign: ImGuiStyleVar_ = 6;
pub const ImGuiStyleVar__ImGuiStyleVar_ChildRounding: ImGuiStyleVar_ = 7;
pub const ImGuiStyleVar__ImGuiStyleVar_ChildBorderSize: ImGuiStyleVar_ = 8;
pub const ImGuiStyleVar__ImGuiStyleVar_PopupRounding: ImGuiStyleVar_ = 9;
pub const ImGuiStyleVar__ImGuiStyleVar_PopupBorderSize: ImGuiStyleVar_ = 10;
pub const ImGuiStyleVar__ImGuiStyleVar_FramePadding: ImGuiStyleVar_ = 11;
pub const ImGuiStyleVar__ImGuiStyleVar_FrameRounding: ImGuiStyleVar_ = 12;
pub const ImGuiStyleVar__ImGuiStyleVar_FrameBorderSize: ImGuiStyleVar_ = 13;
pub const ImGuiStyleVar__ImGuiStyleVar_ItemSpacing: ImGuiStyleVar_ = 14;
pub const ImGuiStyleVar__ImGuiStyleVar_ItemInnerSpacing: ImGuiStyleVar_ = 15;
pub const ImGuiStyleVar__ImGuiStyleVar_IndentSpacing: ImGuiStyleVar_ = 16;
pub const ImGuiStyleVar__ImGuiStyleVar_CellPadding: ImGuiStyleVar_ = 17;
pub const ImGuiStyleVar__ImGuiStyleVar_ScrollbarSize: ImGuiStyleVar_ = 18;
pub const ImGuiStyleVar__ImGuiStyleVar_ScrollbarRounding: ImGuiStyleVar_ = 19;
pub const ImGuiStyleVar__ImGuiStyleVar_GrabMinSize: ImGuiStyleVar_ = 20;
pub const ImGuiStyleVar__ImGuiStyleVar_GrabRounding: ImGuiStyleVar_ = 21;
pub const ImGuiStyleVar__ImGuiStyleVar_TabRounding: ImGuiStyleVar_ = 22;
pub const ImGuiStyleVar__ImGuiStyleVar_ButtonTextAlign: ImGuiStyleVar_ = 23;
pub const ImGuiStyleVar__ImGuiStyleVar_SelectableTextAlign: ImGuiStyleVar_ = 24;
pub const ImGuiStyleVar__ImGuiStyleVar_COUNT: ImGuiStyleVar_ = 25;
pub type ImGuiStyleVar_ = ::std::os::raw::c_int;
pub const ImGuiButtonFlags__ImGuiButtonFlags_None: ImGuiButtonFlags_ = 0;
pub const ImGuiButtonFlags__ImGuiButtonFlags_MouseButtonLeft: ImGuiButtonFlags_ = 1;
pub const ImGuiButtonFlags__ImGuiButtonFlags_MouseButtonRight: ImGuiButtonFlags_ = 2;
pub const ImGuiButtonFlags__ImGuiButtonFlags_MouseButtonMiddle: ImGuiButtonFlags_ = 4;
pub const ImGuiButtonFlags__ImGuiButtonFlags_MouseButtonMask_: ImGuiButtonFlags_ = 7;
pub const ImGuiButtonFlags__ImGuiButtonFlags_MouseButtonDefault_: ImGuiButtonFlags_ = 1;
pub type ImGuiButtonFlags_ = ::std::os::raw::c_int;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_None: ImGuiColorEditFlags_ = 0;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoAlpha: ImGuiColorEditFlags_ = 2;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoPicker: ImGuiColorEditFlags_ = 4;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoOptions: ImGuiColorEditFlags_ = 8;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoSmallPreview: ImGuiColorEditFlags_ = 16;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoInputs: ImGuiColorEditFlags_ = 32;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoTooltip: ImGuiColorEditFlags_ = 64;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoLabel: ImGuiColorEditFlags_ = 128;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoSidePreview: ImGuiColorEditFlags_ = 256;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoDragDrop: ImGuiColorEditFlags_ = 512;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_NoBorder: ImGuiColorEditFlags_ = 1024;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_AlphaBar: ImGuiColorEditFlags_ = 65536;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_AlphaPreview: ImGuiColorEditFlags_ = 131072;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_AlphaPreviewHalf: ImGuiColorEditFlags_ = 262144;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_HDR: ImGuiColorEditFlags_ = 524288;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_DisplayRGB: ImGuiColorEditFlags_ = 1048576;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_DisplayHSV: ImGuiColorEditFlags_ = 2097152;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_DisplayHex: ImGuiColorEditFlags_ = 4194304;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_Uint8: ImGuiColorEditFlags_ = 8388608;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_Float: ImGuiColorEditFlags_ = 16777216;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_PickerHueBar: ImGuiColorEditFlags_ = 33554432;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_PickerHueWheel: ImGuiColorEditFlags_ = 67108864;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_InputRGB: ImGuiColorEditFlags_ = 134217728;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_InputHSV: ImGuiColorEditFlags_ = 268435456;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_DefaultOptions_: ImGuiColorEditFlags_ =
    177209344;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_DisplayMask_: ImGuiColorEditFlags_ = 7340032;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_DataTypeMask_: ImGuiColorEditFlags_ = 25165824;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_PickerMask_: ImGuiColorEditFlags_ = 100663296;
pub const ImGuiColorEditFlags__ImGuiColorEditFlags_InputMask_: ImGuiColorEditFlags_ = 402653184;
pub type ImGuiColorEditFlags_ = ::std::os::raw::c_int;
pub const ImGuiSliderFlags__ImGuiSliderFlags_None: ImGuiSliderFlags_ = 0;
pub const ImGuiSliderFlags__ImGuiSliderFlags_AlwaysClamp: ImGuiSliderFlags_ = 16;
pub const ImGuiSliderFlags__ImGuiSliderFlags_Logarithmic: ImGuiSliderFlags_ = 32;
pub const ImGuiSliderFlags__ImGuiSliderFlags_NoRoundToFormat: ImGuiSliderFlags_ = 64;
pub const ImGuiSliderFlags__ImGuiSliderFlags_NoInput: ImGuiSliderFlags_ = 128;
pub const ImGuiSliderFlags__ImGuiSliderFlags_InvalidMask_: ImGuiSliderFlags_ = 1879048207;
pub type ImGuiSliderFlags_ = ::std::os::raw::c_int;
pub const ImGuiMouseButton__ImGuiMouseButton_Left: ImGuiMouseButton_ = 0;
pub const ImGuiMouseButton__ImGuiMouseButton_Right: ImGuiMouseButton_ = 1;
pub const ImGuiMouseButton__ImGuiMouseButton_Middle: ImGuiMouseButton_ = 2;
pub const ImGuiMouseButton__ImGuiMouseButton_COUNT: ImGuiMouseButton_ = 5;
pub type ImGuiMouseButton_ = ::std::os::raw::c_int;
pub const ImGuiMouseCursor__ImGuiMouseCursor_None: ImGuiMouseCursor_ = -1;
pub const ImGuiMouseCursor__ImGuiMouseCursor_Arrow: ImGuiMouseCursor_ = 0;
pub const ImGuiMouseCursor__ImGuiMouseCursor_TextInput: ImGuiMouseCursor_ = 1;
pub const ImGuiMouseCursor__ImGuiMouseCursor_ResizeAll: ImGuiMouseCursor_ = 2;
pub const ImGuiMouseCursor__ImGuiMouseCursor_ResizeNS: ImGuiMouseCursor_ = 3;
pub const ImGuiMouseCursor__ImGuiMouseCursor_ResizeEW: ImGuiMouseCursor_ = 4;
pub const ImGuiMouseCursor__ImGuiMouseCursor_ResizeNESW: ImGuiMouseCursor_ = 5;
pub const ImGuiMouseCursor__ImGuiMouseCursor_ResizeNWSE: ImGuiMouseCursor_ = 6;
pub const ImGuiMouseCursor__ImGuiMouseCursor_Hand: ImGuiMouseCursor_ = 7;
pub const ImGuiMouseCursor__ImGuiMouseCursor_NotAllowed: ImGuiMouseCursor_ = 8;
pub const ImGuiMouseCursor__ImGuiMouseCursor_COUNT: ImGuiMouseCursor_ = 9;
pub type ImGuiMouseCursor_ = ::std::os::raw::c_int;
pub const ImGuiCond__ImGuiCond_None: ImGuiCond_ = 0;
pub const ImGuiCond__ImGuiCond_Always: ImGuiCond_ = 1;
pub const ImGuiCond__ImGuiCond_Once: ImGuiCond_ = 2;
pub const ImGuiCond__ImGuiCond_FirstUseEver: ImGuiCond_ = 4;
pub const ImGuiCond__ImGuiCond_Appearing: ImGuiCond_ = 8;
pub type ImGuiCond_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiStyle {
    pub Alpha: f32,
    pub DisabledAlpha: f32,
    pub WindowPadding: ImVec2,
    pub WindowRounding: f32,
    pub WindowBorderSize: f32,
    pub WindowMinSize: ImVec2,
    pub WindowTitleAlign: ImVec2,
    pub WindowMenuButtonPosition: ImGuiDir,
    pub ChildRounding: f32,
    pub ChildBorderSize: f32,
    pub PopupRounding: f32,
    pub PopupBorderSize: f32,
    pub FramePadding: ImVec2,
    pub FrameRounding: f32,
    pub FrameBorderSize: f32,
    pub ItemSpacing: ImVec2,
    pub ItemInnerSpacing: ImVec2,
    pub CellPadding: ImVec2,
    pub TouchExtraPadding: ImVec2,
    pub IndentSpacing: f32,
    pub ColumnsMinSpacing: f32,
    pub ScrollbarSize: f32,
    pub ScrollbarRounding: f32,
    pub GrabMinSize: f32,
    pub GrabRounding: f32,
    pub LogSliderDeadzone: f32,
    pub TabRounding: f32,
    pub TabBorderSize: f32,
    pub TabMinWidthForCloseButton: f32,
    pub ColorButtonPosition: ImGuiDir,
    pub ButtonTextAlign: ImVec2,
    pub SelectableTextAlign: ImVec2,
    pub DisplayWindowPadding: ImVec2,
    pub DisplaySafeAreaPadding: ImVec2,
    pub MouseCursorScale: f32,
    pub AntiAliasedLines: bool,
    pub AntiAliasedLinesUseTex: bool,
    pub AntiAliasedFill: bool,
    pub CurveTessellationTol: f32,
    pub CircleTessellationMaxError: f32,
    pub Colors: [ImVec4; 55usize],
}
#[test]
fn bindgen_test_layout_ImGuiStyle() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiStyle>(),
        1080usize,
        concat!("Size of: ", stringify!(ImGuiStyle))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiStyle>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiStyle))
    );
    fn test_field_Alpha() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStyle>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Alpha) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStyle),
                "::",
                stringify!(Alpha)
            )
        );
    }
    test_field_Alpha();
    fn test_field_DisabledAlpha() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStyle>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DisabledAlpha) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStyle),
                "::",
                stringify!(DisabledAlpha)
            )
        );
    }
    test_field_DisabledAlpha();
    fn test_field_WindowPadding() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStyle>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WindowPadding) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStyle),
                "::",
                stringify!(WindowPadding)
            )
        );
    }
    test_field_WindowPadding();
    fn test_field_WindowRounding() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStyle>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WindowRounding) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStyle),
                "::",
                stringify!(WindowRounding)
            )
        );
    }
    test_field_WindowRounding();
    fn test_field_WindowBorderSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStyle>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WindowBorderSize) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStyle),
                "::",
                stringify!(WindowBorderSize)
            )
        );
    }
    test_field_WindowBorderSize();
    fn test_field_WindowMinSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStyle>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WindowMinSize) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStyle),
                "::",
                stringify!(WindowMinSize)
            )
        );
    }
    test_field_WindowMinSize();
    fn test_field_WindowTitleAlign() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStyle>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WindowTitleAlign) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStyle),
                "::",
                stringify!(WindowTitleAlign)
            )
        );
    }
    test_field_WindowTitleAlign();
    fn test_field_WindowMenuButtonPosition() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStyle>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WindowMenuButtonPosition) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStyle),
                "::",
                stringify!(WindowMenuButtonPosition)
            )
        );
    }
    test_field_WindowMenuButtonPosition();
    fn test_field_ChildRounding() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStyle>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ChildRounding) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStyle),
                "::",
                stringify!(ChildRounding)
            )
        );
    }
    test_field_ChildRounding();
    fn test_field_ChildBorderSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStyle>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ChildBorderSize) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStyle),
                "::",
                stringify!(ChildBorderSize)
            )
        );
    }
    test_field_ChildBorderSize();
    fn test_field_PopupRounding() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStyle>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PopupRounding) as usize - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStyle),
                "::",
                stringify!(PopupRounding)
            )
        );
    }
    test_field_PopupRounding();
    fn test_field_PopupBorderSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStyle>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PopupBorderSize) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStyle),
                "::",
                stringify!(PopupBorderSize)
            )
        );
    }
    test_field_PopupBorderSize();
    fn test_field_FramePadding() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStyle>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FramePadding) as usize - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStyle),
                "::",
                stringify!(FramePadding)
            )
        );
    }
    test_field_FramePadding();
    fn test_field_FrameRounding() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStyle>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FrameRounding) as usize - ptr as usize
            },
            68usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStyle),
                "::",
                stringify!(FrameRounding)
            )
        );
    }
    test_field_FrameRounding();
    fn test_field_FrameBorderSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStyle>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FrameBorderSize) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStyle),
                "::",
                stringify!(FrameBorderSize)
            )
        );
    }
    test_field_FrameBorderSize();
    fn test_field_ItemSpacing() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStyle>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ItemSpacing) as usize - ptr as usize
            },
            76usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStyle),
                "::",
                stringify!(ItemSpacing)
            )
        );
    }
    test_field_ItemSpacing();
    fn test_field_ItemInnerSpacing() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStyle>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ItemInnerSpacing) as usize - ptr as usize
            },
            84usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStyle),
                "::",
                stringify!(ItemInnerSpacing)
            )
        );
    }
    test_field_ItemInnerSpacing();
    fn test_field_CellPadding() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStyle>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CellPadding) as usize - ptr as usize
            },
            92usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStyle),
                "::",
                stringify!(CellPadding)
            )
        );
    }
    test_field_CellPadding();
    fn test_field_TouchExtraPadding() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStyle>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TouchExtraPadding) as usize - ptr as usize
            },
            100usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStyle),
                "::",
                stringify!(TouchExtraPadding)
            )
        );
    }
    test_field_TouchExtraPadding();
    fn test_field_IndentSpacing() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStyle>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IndentSpacing) as usize - ptr as usize
            },
            108usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStyle),
                "::",
                stringify!(IndentSpacing)
            )
        );
    }
    test_field_IndentSpacing();
    fn test_field_ColumnsMinSpacing() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStyle>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ColumnsMinSpacing) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStyle),
                "::",
                stringify!(ColumnsMinSpacing)
            )
        );
    }
    test_field_ColumnsMinSpacing();
    fn test_field_ScrollbarSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStyle>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ScrollbarSize) as usize - ptr as usize
            },
            116usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStyle),
                "::",
                stringify!(ScrollbarSize)
            )
        );
    }
    test_field_ScrollbarSize();
    fn test_field_ScrollbarRounding() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStyle>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ScrollbarRounding) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStyle),
                "::",
                stringify!(ScrollbarRounding)
            )
        );
    }
    test_field_ScrollbarRounding();
    fn test_field_GrabMinSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStyle>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GrabMinSize) as usize - ptr as usize
            },
            124usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStyle),
                "::",
                stringify!(GrabMinSize)
            )
        );
    }
    test_field_GrabMinSize();
    fn test_field_GrabRounding() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStyle>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GrabRounding) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStyle),
                "::",
                stringify!(GrabRounding)
            )
        );
    }
    test_field_GrabRounding();
    fn test_field_LogSliderDeadzone() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStyle>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LogSliderDeadzone) as usize - ptr as usize
            },
            132usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStyle),
                "::",
                stringify!(LogSliderDeadzone)
            )
        );
    }
    test_field_LogSliderDeadzone();
    fn test_field_TabRounding() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStyle>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TabRounding) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStyle),
                "::",
                stringify!(TabRounding)
            )
        );
    }
    test_field_TabRounding();
    fn test_field_TabBorderSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStyle>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TabBorderSize) as usize - ptr as usize
            },
            140usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStyle),
                "::",
                stringify!(TabBorderSize)
            )
        );
    }
    test_field_TabBorderSize();
    fn test_field_TabMinWidthForCloseButton() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStyle>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TabMinWidthForCloseButton) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStyle),
                "::",
                stringify!(TabMinWidthForCloseButton)
            )
        );
    }
    test_field_TabMinWidthForCloseButton();
    fn test_field_ColorButtonPosition() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStyle>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ColorButtonPosition) as usize - ptr as usize
            },
            148usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStyle),
                "::",
                stringify!(ColorButtonPosition)
            )
        );
    }
    test_field_ColorButtonPosition();
    fn test_field_ButtonTextAlign() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStyle>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ButtonTextAlign) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStyle),
                "::",
                stringify!(ButtonTextAlign)
            )
        );
    }
    test_field_ButtonTextAlign();
    fn test_field_SelectableTextAlign() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStyle>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SelectableTextAlign) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStyle),
                "::",
                stringify!(SelectableTextAlign)
            )
        );
    }
    test_field_SelectableTextAlign();
    fn test_field_DisplayWindowPadding() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStyle>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DisplayWindowPadding) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStyle),
                "::",
                stringify!(DisplayWindowPadding)
            )
        );
    }
    test_field_DisplayWindowPadding();
    fn test_field_DisplaySafeAreaPadding() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStyle>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DisplaySafeAreaPadding) as usize - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStyle),
                "::",
                stringify!(DisplaySafeAreaPadding)
            )
        );
    }
    test_field_DisplaySafeAreaPadding();
    fn test_field_MouseCursorScale() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStyle>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MouseCursorScale) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStyle),
                "::",
                stringify!(MouseCursorScale)
            )
        );
    }
    test_field_MouseCursorScale();
    fn test_field_AntiAliasedLines() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStyle>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AntiAliasedLines) as usize - ptr as usize
            },
            188usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStyle),
                "::",
                stringify!(AntiAliasedLines)
            )
        );
    }
    test_field_AntiAliasedLines();
    fn test_field_AntiAliasedLinesUseTex() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStyle>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AntiAliasedLinesUseTex) as usize - ptr as usize
            },
            189usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStyle),
                "::",
                stringify!(AntiAliasedLinesUseTex)
            )
        );
    }
    test_field_AntiAliasedLinesUseTex();
    fn test_field_AntiAliasedFill() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStyle>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AntiAliasedFill) as usize - ptr as usize
            },
            190usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStyle),
                "::",
                stringify!(AntiAliasedFill)
            )
        );
    }
    test_field_AntiAliasedFill();
    fn test_field_CurveTessellationTol() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStyle>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CurveTessellationTol) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStyle),
                "::",
                stringify!(CurveTessellationTol)
            )
        );
    }
    test_field_CurveTessellationTol();
    fn test_field_CircleTessellationMaxError() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStyle>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CircleTessellationMaxError) as usize - ptr as usize
            },
            196usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStyle),
                "::",
                stringify!(CircleTessellationMaxError)
            )
        );
    }
    test_field_CircleTessellationMaxError();
    fn test_field_Colors() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStyle>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Colors) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStyle),
                "::",
                stringify!(Colors)
            )
        );
    }
    test_field_Colors();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiKeyData {
    pub Down: bool,
    pub DownDuration: f32,
    pub DownDurationPrev: f32,
    pub AnalogValue: f32,
}
#[test]
fn bindgen_test_layout_ImGuiKeyData() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiKeyData>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiKeyData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiKeyData>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiKeyData))
    );
    fn test_field_Down() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiKeyData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Down) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiKeyData),
                "::",
                stringify!(Down)
            )
        );
    }
    test_field_Down();
    fn test_field_DownDuration() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiKeyData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DownDuration) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiKeyData),
                "::",
                stringify!(DownDuration)
            )
        );
    }
    test_field_DownDuration();
    fn test_field_DownDurationPrev() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiKeyData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DownDurationPrev) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiKeyData),
                "::",
                stringify!(DownDurationPrev)
            )
        );
    }
    test_field_DownDurationPrev();
    fn test_field_AnalogValue() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiKeyData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AnalogValue) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiKeyData),
                "::",
                stringify!(AnalogValue)
            )
        );
    }
    test_field_AnalogValue();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImWchar {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImWchar,
}
#[test]
fn bindgen_test_layout_ImVector_ImWchar() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImWchar>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImWchar))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImWchar>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImWchar))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImWchar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImWchar),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImWchar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImWchar),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImWchar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImWchar),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiIO {
    pub ConfigFlags: ImGuiConfigFlags,
    pub BackendFlags: ImGuiBackendFlags,
    pub DisplaySize: ImVec2,
    pub DeltaTime: f32,
    pub IniSavingRate: f32,
    pub IniFilename: *const ::std::os::raw::c_char,
    pub LogFilename: *const ::std::os::raw::c_char,
    pub MouseDoubleClickTime: f32,
    pub MouseDoubleClickMaxDist: f32,
    pub MouseDragThreshold: f32,
    pub KeyRepeatDelay: f32,
    pub KeyRepeatRate: f32,
    pub UserData: *mut ::std::os::raw::c_void,
    pub Fonts: *mut ImFontAtlas,
    pub FontGlobalScale: f32,
    pub FontAllowUserScaling: bool,
    pub FontDefault: *mut ImFont,
    pub DisplayFramebufferScale: ImVec2,
    pub ConfigDockingNoSplit: bool,
    pub ConfigDockingWithShift: bool,
    pub ConfigDockingAlwaysTabBar: bool,
    pub ConfigDockingTransparentPayload: bool,
    pub ConfigViewportsNoAutoMerge: bool,
    pub ConfigViewportsNoTaskBarIcon: bool,
    pub ConfigViewportsNoDecoration: bool,
    pub ConfigViewportsNoDefaultParent: bool,
    pub MouseDrawCursor: bool,
    pub ConfigMacOSXBehaviors: bool,
    pub ConfigInputTrickleEventQueue: bool,
    pub ConfigInputTextCursorBlink: bool,
    pub ConfigDragClickToInputText: bool,
    pub ConfigWindowsResizeFromEdges: bool,
    pub ConfigWindowsMoveFromTitleBarOnly: bool,
    pub ConfigMemoryCompactTimer: f32,
    pub BackendPlatformName: *const ::std::os::raw::c_char,
    pub BackendRendererName: *const ::std::os::raw::c_char,
    pub BackendPlatformUserData: *mut ::std::os::raw::c_void,
    pub BackendRendererUserData: *mut ::std::os::raw::c_void,
    pub BackendLanguageUserData: *mut ::std::os::raw::c_void,
    pub GetClipboardTextFn: ::std::option::Option<
        unsafe extern "C" fn(
            user_data: *mut ::std::os::raw::c_void,
        ) -> *const ::std::os::raw::c_char,
    >,
    pub SetClipboardTextFn: ::std::option::Option<
        unsafe extern "C" fn(
            user_data: *mut ::std::os::raw::c_void,
            text: *const ::std::os::raw::c_char,
        ),
    >,
    pub ClipboardUserData: *mut ::std::os::raw::c_void,
    pub SetPlatformImeDataFn: ::std::option::Option<
        unsafe extern "C" fn(viewport: *mut ImGuiViewport, data: *mut ImGuiPlatformImeData),
    >,
    pub _UnusedPadding: *mut ::std::os::raw::c_void,
    pub WantCaptureMouse: bool,
    pub WantCaptureKeyboard: bool,
    pub WantTextInput: bool,
    pub WantSetMousePos: bool,
    pub WantSaveIniSettings: bool,
    pub NavActive: bool,
    pub NavVisible: bool,
    pub Framerate: f32,
    pub MetricsRenderVertices: ::std::os::raw::c_int,
    pub MetricsRenderIndices: ::std::os::raw::c_int,
    pub MetricsRenderWindows: ::std::os::raw::c_int,
    pub MetricsActiveWindows: ::std::os::raw::c_int,
    pub MetricsActiveAllocations: ::std::os::raw::c_int,
    pub MouseDelta: ImVec2,
    pub KeyMap: [::std::os::raw::c_int; 645usize],
    pub KeysDown: [bool; 645usize],
    pub MousePos: ImVec2,
    pub MouseDown: [bool; 5usize],
    pub MouseWheel: f32,
    pub MouseWheelH: f32,
    pub MouseHoveredViewport: ImGuiID,
    pub KeyCtrl: bool,
    pub KeyShift: bool,
    pub KeyAlt: bool,
    pub KeySuper: bool,
    pub NavInputs: [f32; 20usize],
    pub KeyMods: ImGuiModFlags,
    pub KeysData: [ImGuiKeyData; 645usize],
    pub WantCaptureMouseUnlessPopupClose: bool,
    pub MousePosPrev: ImVec2,
    pub MouseClickedPos: [ImVec2; 5usize],
    pub MouseClickedTime: [f64; 5usize],
    pub MouseClicked: [bool; 5usize],
    pub MouseDoubleClicked: [bool; 5usize],
    pub MouseClickedCount: [ImU16; 5usize],
    pub MouseClickedLastCount: [ImU16; 5usize],
    pub MouseReleased: [bool; 5usize],
    pub MouseDownOwned: [bool; 5usize],
    pub MouseDownOwnedUnlessPopupClose: [bool; 5usize],
    pub MouseDownDuration: [f32; 5usize],
    pub MouseDownDurationPrev: [f32; 5usize],
    pub MouseDragMaxDistanceAbs: [ImVec2; 5usize],
    pub MouseDragMaxDistanceSqr: [f32; 5usize],
    pub NavInputsDownDuration: [f32; 20usize],
    pub NavInputsDownDurationPrev: [f32; 20usize],
    pub PenPressure: f32,
    pub AppFocusLost: bool,
    pub AppAcceptingEvents: bool,
    pub BackendUsingLegacyKeyArrays: ImS8,
    pub BackendUsingLegacyNavInputArray: bool,
    pub InputQueueSurrogate: ImWchar16,
    pub InputQueueCharacters: ImVector_ImWchar,
}
#[test]
fn bindgen_test_layout_ImGuiIO() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiIO>(),
        14344usize,
        concat!("Size of: ", stringify!(ImGuiIO))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiIO>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiIO))
    );
    fn test_field_ConfigFlags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ConfigFlags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(ConfigFlags)
            )
        );
    }
    test_field_ConfigFlags();
    fn test_field_BackendFlags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BackendFlags) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(BackendFlags)
            )
        );
    }
    test_field_BackendFlags();
    fn test_field_DisplaySize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DisplaySize) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(DisplaySize)
            )
        );
    }
    test_field_DisplaySize();
    fn test_field_DeltaTime() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DeltaTime) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(DeltaTime)
            )
        );
    }
    test_field_DeltaTime();
    fn test_field_IniSavingRate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IniSavingRate) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(IniSavingRate)
            )
        );
    }
    test_field_IniSavingRate();
    fn test_field_IniFilename() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IniFilename) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(IniFilename)
            )
        );
    }
    test_field_IniFilename();
    fn test_field_LogFilename() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LogFilename) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(LogFilename)
            )
        );
    }
    test_field_LogFilename();
    fn test_field_MouseDoubleClickTime() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MouseDoubleClickTime) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(MouseDoubleClickTime)
            )
        );
    }
    test_field_MouseDoubleClickTime();
    fn test_field_MouseDoubleClickMaxDist() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MouseDoubleClickMaxDist) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(MouseDoubleClickMaxDist)
            )
        );
    }
    test_field_MouseDoubleClickMaxDist();
    fn test_field_MouseDragThreshold() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MouseDragThreshold) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(MouseDragThreshold)
            )
        );
    }
    test_field_MouseDragThreshold();
    fn test_field_KeyRepeatDelay() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KeyRepeatDelay) as usize - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(KeyRepeatDelay)
            )
        );
    }
    test_field_KeyRepeatDelay();
    fn test_field_KeyRepeatRate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KeyRepeatRate) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(KeyRepeatRate)
            )
        );
    }
    test_field_KeyRepeatRate();
    fn test_field_UserData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).UserData) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(UserData)
            )
        );
    }
    test_field_UserData();
    fn test_field_Fonts() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Fonts) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(Fonts)
            )
        );
    }
    test_field_Fonts();
    fn test_field_FontGlobalScale() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FontGlobalScale) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(FontGlobalScale)
            )
        );
    }
    test_field_FontGlobalScale();
    fn test_field_FontAllowUserScaling() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FontAllowUserScaling) as usize - ptr as usize
            },
            84usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(FontAllowUserScaling)
            )
        );
    }
    test_field_FontAllowUserScaling();
    fn test_field_FontDefault() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FontDefault) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(FontDefault)
            )
        );
    }
    test_field_FontDefault();
    fn test_field_DisplayFramebufferScale() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DisplayFramebufferScale) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(DisplayFramebufferScale)
            )
        );
    }
    test_field_DisplayFramebufferScale();
    fn test_field_ConfigDockingNoSplit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ConfigDockingNoSplit) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(ConfigDockingNoSplit)
            )
        );
    }
    test_field_ConfigDockingNoSplit();
    fn test_field_ConfigDockingWithShift() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ConfigDockingWithShift) as usize - ptr as usize
            },
            105usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(ConfigDockingWithShift)
            )
        );
    }
    test_field_ConfigDockingWithShift();
    fn test_field_ConfigDockingAlwaysTabBar() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ConfigDockingAlwaysTabBar) as usize - ptr as usize
            },
            106usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(ConfigDockingAlwaysTabBar)
            )
        );
    }
    test_field_ConfigDockingAlwaysTabBar();
    fn test_field_ConfigDockingTransparentPayload() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ConfigDockingTransparentPayload) as usize - ptr as usize
            },
            107usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(ConfigDockingTransparentPayload)
            )
        );
    }
    test_field_ConfigDockingTransparentPayload();
    fn test_field_ConfigViewportsNoAutoMerge() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ConfigViewportsNoAutoMerge) as usize - ptr as usize
            },
            108usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(ConfigViewportsNoAutoMerge)
            )
        );
    }
    test_field_ConfigViewportsNoAutoMerge();
    fn test_field_ConfigViewportsNoTaskBarIcon() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ConfigViewportsNoTaskBarIcon) as usize - ptr as usize
            },
            109usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(ConfigViewportsNoTaskBarIcon)
            )
        );
    }
    test_field_ConfigViewportsNoTaskBarIcon();
    fn test_field_ConfigViewportsNoDecoration() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ConfigViewportsNoDecoration) as usize - ptr as usize
            },
            110usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(ConfigViewportsNoDecoration)
            )
        );
    }
    test_field_ConfigViewportsNoDecoration();
    fn test_field_ConfigViewportsNoDefaultParent() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ConfigViewportsNoDefaultParent) as usize - ptr as usize
            },
            111usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(ConfigViewportsNoDefaultParent)
            )
        );
    }
    test_field_ConfigViewportsNoDefaultParent();
    fn test_field_MouseDrawCursor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MouseDrawCursor) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(MouseDrawCursor)
            )
        );
    }
    test_field_MouseDrawCursor();
    fn test_field_ConfigMacOSXBehaviors() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ConfigMacOSXBehaviors) as usize - ptr as usize
            },
            113usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(ConfigMacOSXBehaviors)
            )
        );
    }
    test_field_ConfigMacOSXBehaviors();
    fn test_field_ConfigInputTrickleEventQueue() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ConfigInputTrickleEventQueue) as usize - ptr as usize
            },
            114usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(ConfigInputTrickleEventQueue)
            )
        );
    }
    test_field_ConfigInputTrickleEventQueue();
    fn test_field_ConfigInputTextCursorBlink() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ConfigInputTextCursorBlink) as usize - ptr as usize
            },
            115usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(ConfigInputTextCursorBlink)
            )
        );
    }
    test_field_ConfigInputTextCursorBlink();
    fn test_field_ConfigDragClickToInputText() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ConfigDragClickToInputText) as usize - ptr as usize
            },
            116usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(ConfigDragClickToInputText)
            )
        );
    }
    test_field_ConfigDragClickToInputText();
    fn test_field_ConfigWindowsResizeFromEdges() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ConfigWindowsResizeFromEdges) as usize - ptr as usize
            },
            117usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(ConfigWindowsResizeFromEdges)
            )
        );
    }
    test_field_ConfigWindowsResizeFromEdges();
    fn test_field_ConfigWindowsMoveFromTitleBarOnly() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ConfigWindowsMoveFromTitleBarOnly) as usize
                    - ptr as usize
            },
            118usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(ConfigWindowsMoveFromTitleBarOnly)
            )
        );
    }
    test_field_ConfigWindowsMoveFromTitleBarOnly();
    fn test_field_ConfigMemoryCompactTimer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ConfigMemoryCompactTimer) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(ConfigMemoryCompactTimer)
            )
        );
    }
    test_field_ConfigMemoryCompactTimer();
    fn test_field_BackendPlatformName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BackendPlatformName) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(BackendPlatformName)
            )
        );
    }
    test_field_BackendPlatformName();
    fn test_field_BackendRendererName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BackendRendererName) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(BackendRendererName)
            )
        );
    }
    test_field_BackendRendererName();
    fn test_field_BackendPlatformUserData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BackendPlatformUserData) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(BackendPlatformUserData)
            )
        );
    }
    test_field_BackendPlatformUserData();
    fn test_field_BackendRendererUserData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BackendRendererUserData) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(BackendRendererUserData)
            )
        );
    }
    test_field_BackendRendererUserData();
    fn test_field_BackendLanguageUserData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BackendLanguageUserData) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(BackendLanguageUserData)
            )
        );
    }
    test_field_BackendLanguageUserData();
    fn test_field_GetClipboardTextFn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GetClipboardTextFn) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(GetClipboardTextFn)
            )
        );
    }
    test_field_GetClipboardTextFn();
    fn test_field_SetClipboardTextFn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetClipboardTextFn) as usize - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(SetClipboardTextFn)
            )
        );
    }
    test_field_SetClipboardTextFn();
    fn test_field_ClipboardUserData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ClipboardUserData) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(ClipboardUserData)
            )
        );
    }
    test_field_ClipboardUserData();
    fn test_field_SetPlatformImeDataFn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetPlatformImeDataFn) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(SetPlatformImeDataFn)
            )
        );
    }
    test_field_SetPlatformImeDataFn();
    fn test_field__UnusedPadding() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._UnusedPadding) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(_UnusedPadding)
            )
        );
    }
    test_field__UnusedPadding();
    fn test_field_WantCaptureMouse() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WantCaptureMouse) as usize - ptr as usize
            },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(WantCaptureMouse)
            )
        );
    }
    test_field_WantCaptureMouse();
    fn test_field_WantCaptureKeyboard() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WantCaptureKeyboard) as usize - ptr as usize
            },
            209usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(WantCaptureKeyboard)
            )
        );
    }
    test_field_WantCaptureKeyboard();
    fn test_field_WantTextInput() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WantTextInput) as usize - ptr as usize
            },
            210usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(WantTextInput)
            )
        );
    }
    test_field_WantTextInput();
    fn test_field_WantSetMousePos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WantSetMousePos) as usize - ptr as usize
            },
            211usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(WantSetMousePos)
            )
        );
    }
    test_field_WantSetMousePos();
    fn test_field_WantSaveIniSettings() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WantSaveIniSettings) as usize - ptr as usize
            },
            212usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(WantSaveIniSettings)
            )
        );
    }
    test_field_WantSaveIniSettings();
    fn test_field_NavActive() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavActive) as usize - ptr as usize
            },
            213usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(NavActive)
            )
        );
    }
    test_field_NavActive();
    fn test_field_NavVisible() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavVisible) as usize - ptr as usize
            },
            214usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(NavVisible)
            )
        );
    }
    test_field_NavVisible();
    fn test_field_Framerate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Framerate) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(Framerate)
            )
        );
    }
    test_field_Framerate();
    fn test_field_MetricsRenderVertices() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MetricsRenderVertices) as usize - ptr as usize
            },
            220usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(MetricsRenderVertices)
            )
        );
    }
    test_field_MetricsRenderVertices();
    fn test_field_MetricsRenderIndices() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MetricsRenderIndices) as usize - ptr as usize
            },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(MetricsRenderIndices)
            )
        );
    }
    test_field_MetricsRenderIndices();
    fn test_field_MetricsRenderWindows() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MetricsRenderWindows) as usize - ptr as usize
            },
            228usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(MetricsRenderWindows)
            )
        );
    }
    test_field_MetricsRenderWindows();
    fn test_field_MetricsActiveWindows() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MetricsActiveWindows) as usize - ptr as usize
            },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(MetricsActiveWindows)
            )
        );
    }
    test_field_MetricsActiveWindows();
    fn test_field_MetricsActiveAllocations() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MetricsActiveAllocations) as usize - ptr as usize
            },
            236usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(MetricsActiveAllocations)
            )
        );
    }
    test_field_MetricsActiveAllocations();
    fn test_field_MouseDelta() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MouseDelta) as usize - ptr as usize
            },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(MouseDelta)
            )
        );
    }
    test_field_MouseDelta();
    fn test_field_KeyMap() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KeyMap) as usize - ptr as usize
            },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(KeyMap)
            )
        );
    }
    test_field_KeyMap();
    fn test_field_KeysDown() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KeysDown) as usize - ptr as usize
            },
            2828usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(KeysDown)
            )
        );
    }
    test_field_KeysDown();
    fn test_field_MousePos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MousePos) as usize - ptr as usize
            },
            3476usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(MousePos)
            )
        );
    }
    test_field_MousePos();
    fn test_field_MouseDown() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MouseDown) as usize - ptr as usize
            },
            3484usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(MouseDown)
            )
        );
    }
    test_field_MouseDown();
    fn test_field_MouseWheel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MouseWheel) as usize - ptr as usize
            },
            3492usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(MouseWheel)
            )
        );
    }
    test_field_MouseWheel();
    fn test_field_MouseWheelH() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MouseWheelH) as usize - ptr as usize
            },
            3496usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(MouseWheelH)
            )
        );
    }
    test_field_MouseWheelH();
    fn test_field_MouseHoveredViewport() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MouseHoveredViewport) as usize - ptr as usize
            },
            3500usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(MouseHoveredViewport)
            )
        );
    }
    test_field_MouseHoveredViewport();
    fn test_field_KeyCtrl() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KeyCtrl) as usize - ptr as usize
            },
            3504usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(KeyCtrl)
            )
        );
    }
    test_field_KeyCtrl();
    fn test_field_KeyShift() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KeyShift) as usize - ptr as usize
            },
            3505usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(KeyShift)
            )
        );
    }
    test_field_KeyShift();
    fn test_field_KeyAlt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KeyAlt) as usize - ptr as usize
            },
            3506usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(KeyAlt)
            )
        );
    }
    test_field_KeyAlt();
    fn test_field_KeySuper() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KeySuper) as usize - ptr as usize
            },
            3507usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(KeySuper)
            )
        );
    }
    test_field_KeySuper();
    fn test_field_NavInputs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavInputs) as usize - ptr as usize
            },
            3508usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(NavInputs)
            )
        );
    }
    test_field_NavInputs();
    fn test_field_KeyMods() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KeyMods) as usize - ptr as usize
            },
            3588usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(KeyMods)
            )
        );
    }
    test_field_KeyMods();
    fn test_field_KeysData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).KeysData) as usize - ptr as usize
            },
            3592usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(KeysData)
            )
        );
    }
    test_field_KeysData();
    fn test_field_WantCaptureMouseUnlessPopupClose() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WantCaptureMouseUnlessPopupClose) as usize
                    - ptr as usize
            },
            13912usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(WantCaptureMouseUnlessPopupClose)
            )
        );
    }
    test_field_WantCaptureMouseUnlessPopupClose();
    fn test_field_MousePosPrev() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MousePosPrev) as usize - ptr as usize
            },
            13916usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(MousePosPrev)
            )
        );
    }
    test_field_MousePosPrev();
    fn test_field_MouseClickedPos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MouseClickedPos) as usize - ptr as usize
            },
            13924usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(MouseClickedPos)
            )
        );
    }
    test_field_MouseClickedPos();
    fn test_field_MouseClickedTime() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MouseClickedTime) as usize - ptr as usize
            },
            13968usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(MouseClickedTime)
            )
        );
    }
    test_field_MouseClickedTime();
    fn test_field_MouseClicked() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MouseClicked) as usize - ptr as usize
            },
            14008usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(MouseClicked)
            )
        );
    }
    test_field_MouseClicked();
    fn test_field_MouseDoubleClicked() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MouseDoubleClicked) as usize - ptr as usize
            },
            14013usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(MouseDoubleClicked)
            )
        );
    }
    test_field_MouseDoubleClicked();
    fn test_field_MouseClickedCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MouseClickedCount) as usize - ptr as usize
            },
            14018usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(MouseClickedCount)
            )
        );
    }
    test_field_MouseClickedCount();
    fn test_field_MouseClickedLastCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MouseClickedLastCount) as usize - ptr as usize
            },
            14028usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(MouseClickedLastCount)
            )
        );
    }
    test_field_MouseClickedLastCount();
    fn test_field_MouseReleased() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MouseReleased) as usize - ptr as usize
            },
            14038usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(MouseReleased)
            )
        );
    }
    test_field_MouseReleased();
    fn test_field_MouseDownOwned() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MouseDownOwned) as usize - ptr as usize
            },
            14043usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(MouseDownOwned)
            )
        );
    }
    test_field_MouseDownOwned();
    fn test_field_MouseDownOwnedUnlessPopupClose() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MouseDownOwnedUnlessPopupClose) as usize - ptr as usize
            },
            14048usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(MouseDownOwnedUnlessPopupClose)
            )
        );
    }
    test_field_MouseDownOwnedUnlessPopupClose();
    fn test_field_MouseDownDuration() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MouseDownDuration) as usize - ptr as usize
            },
            14056usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(MouseDownDuration)
            )
        );
    }
    test_field_MouseDownDuration();
    fn test_field_MouseDownDurationPrev() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MouseDownDurationPrev) as usize - ptr as usize
            },
            14076usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(MouseDownDurationPrev)
            )
        );
    }
    test_field_MouseDownDurationPrev();
    fn test_field_MouseDragMaxDistanceAbs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MouseDragMaxDistanceAbs) as usize - ptr as usize
            },
            14096usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(MouseDragMaxDistanceAbs)
            )
        );
    }
    test_field_MouseDragMaxDistanceAbs();
    fn test_field_MouseDragMaxDistanceSqr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MouseDragMaxDistanceSqr) as usize - ptr as usize
            },
            14136usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(MouseDragMaxDistanceSqr)
            )
        );
    }
    test_field_MouseDragMaxDistanceSqr();
    fn test_field_NavInputsDownDuration() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavInputsDownDuration) as usize - ptr as usize
            },
            14156usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(NavInputsDownDuration)
            )
        );
    }
    test_field_NavInputsDownDuration();
    fn test_field_NavInputsDownDurationPrev() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavInputsDownDurationPrev) as usize - ptr as usize
            },
            14236usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(NavInputsDownDurationPrev)
            )
        );
    }
    test_field_NavInputsDownDurationPrev();
    fn test_field_PenPressure() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PenPressure) as usize - ptr as usize
            },
            14316usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(PenPressure)
            )
        );
    }
    test_field_PenPressure();
    fn test_field_AppFocusLost() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AppFocusLost) as usize - ptr as usize
            },
            14320usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(AppFocusLost)
            )
        );
    }
    test_field_AppFocusLost();
    fn test_field_AppAcceptingEvents() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AppAcceptingEvents) as usize - ptr as usize
            },
            14321usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(AppAcceptingEvents)
            )
        );
    }
    test_field_AppAcceptingEvents();
    fn test_field_BackendUsingLegacyKeyArrays() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BackendUsingLegacyKeyArrays) as usize - ptr as usize
            },
            14322usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(BackendUsingLegacyKeyArrays)
            )
        );
    }
    test_field_BackendUsingLegacyKeyArrays();
    fn test_field_BackendUsingLegacyNavInputArray() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BackendUsingLegacyNavInputArray) as usize - ptr as usize
            },
            14323usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(BackendUsingLegacyNavInputArray)
            )
        );
    }
    test_field_BackendUsingLegacyNavInputArray();
    fn test_field_InputQueueSurrogate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).InputQueueSurrogate) as usize - ptr as usize
            },
            14324usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(InputQueueSurrogate)
            )
        );
    }
    test_field_InputQueueSurrogate();
    fn test_field_InputQueueCharacters() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).InputQueueCharacters) as usize - ptr as usize
            },
            14328usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiIO),
                "::",
                stringify!(InputQueueCharacters)
            )
        );
    }
    test_field_InputQueueCharacters();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiInputTextCallbackData {
    pub EventFlag: ImGuiInputTextFlags,
    pub Flags: ImGuiInputTextFlags,
    pub UserData: *mut ::std::os::raw::c_void,
    pub EventChar: ImWchar,
    pub EventKey: ImGuiKey,
    pub Buf: *mut ::std::os::raw::c_char,
    pub BufTextLen: ::std::os::raw::c_int,
    pub BufSize: ::std::os::raw::c_int,
    pub BufDirty: bool,
    pub CursorPos: ::std::os::raw::c_int,
    pub SelectionStart: ::std::os::raw::c_int,
    pub SelectionEnd: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ImGuiInputTextCallbackData() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiInputTextCallbackData>(),
        56usize,
        concat!("Size of: ", stringify!(ImGuiInputTextCallbackData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiInputTextCallbackData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiInputTextCallbackData))
    );
    fn test_field_EventFlag() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputTextCallbackData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).EventFlag) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputTextCallbackData),
                "::",
                stringify!(EventFlag)
            )
        );
    }
    test_field_EventFlag();
    fn test_field_Flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputTextCallbackData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputTextCallbackData),
                "::",
                stringify!(Flags)
            )
        );
    }
    test_field_Flags();
    fn test_field_UserData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputTextCallbackData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).UserData) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputTextCallbackData),
                "::",
                stringify!(UserData)
            )
        );
    }
    test_field_UserData();
    fn test_field_EventChar() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputTextCallbackData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).EventChar) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputTextCallbackData),
                "::",
                stringify!(EventChar)
            )
        );
    }
    test_field_EventChar();
    fn test_field_EventKey() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputTextCallbackData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).EventKey) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputTextCallbackData),
                "::",
                stringify!(EventKey)
            )
        );
    }
    test_field_EventKey();
    fn test_field_Buf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputTextCallbackData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Buf) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputTextCallbackData),
                "::",
                stringify!(Buf)
            )
        );
    }
    test_field_Buf();
    fn test_field_BufTextLen() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputTextCallbackData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BufTextLen) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputTextCallbackData),
                "::",
                stringify!(BufTextLen)
            )
        );
    }
    test_field_BufTextLen();
    fn test_field_BufSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputTextCallbackData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BufSize) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputTextCallbackData),
                "::",
                stringify!(BufSize)
            )
        );
    }
    test_field_BufSize();
    fn test_field_BufDirty() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputTextCallbackData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BufDirty) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputTextCallbackData),
                "::",
                stringify!(BufDirty)
            )
        );
    }
    test_field_BufDirty();
    fn test_field_CursorPos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputTextCallbackData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CursorPos) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputTextCallbackData),
                "::",
                stringify!(CursorPos)
            )
        );
    }
    test_field_CursorPos();
    fn test_field_SelectionStart() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputTextCallbackData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SelectionStart) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputTextCallbackData),
                "::",
                stringify!(SelectionStart)
            )
        );
    }
    test_field_SelectionStart();
    fn test_field_SelectionEnd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputTextCallbackData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SelectionEnd) as usize - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputTextCallbackData),
                "::",
                stringify!(SelectionEnd)
            )
        );
    }
    test_field_SelectionEnd();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiSizeCallbackData {
    pub UserData: *mut ::std::os::raw::c_void,
    pub Pos: ImVec2,
    pub CurrentSize: ImVec2,
    pub DesiredSize: ImVec2,
}
#[test]
fn bindgen_test_layout_ImGuiSizeCallbackData() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiSizeCallbackData>(),
        32usize,
        concat!("Size of: ", stringify!(ImGuiSizeCallbackData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiSizeCallbackData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiSizeCallbackData))
    );
    fn test_field_UserData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiSizeCallbackData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).UserData) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiSizeCallbackData),
                "::",
                stringify!(UserData)
            )
        );
    }
    test_field_UserData();
    fn test_field_Pos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiSizeCallbackData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Pos) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiSizeCallbackData),
                "::",
                stringify!(Pos)
            )
        );
    }
    test_field_Pos();
    fn test_field_CurrentSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiSizeCallbackData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CurrentSize) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiSizeCallbackData),
                "::",
                stringify!(CurrentSize)
            )
        );
    }
    test_field_CurrentSize();
    fn test_field_DesiredSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiSizeCallbackData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DesiredSize) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiSizeCallbackData),
                "::",
                stringify!(DesiredSize)
            )
        );
    }
    test_field_DesiredSize();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiWindowClass {
    pub ClassId: ImGuiID,
    pub ParentViewportId: ImGuiID,
    pub ViewportFlagsOverrideSet: ImGuiViewportFlags,
    pub ViewportFlagsOverrideClear: ImGuiViewportFlags,
    pub TabItemFlagsOverrideSet: ImGuiTabItemFlags,
    pub DockNodeFlagsOverrideSet: ImGuiDockNodeFlags,
    pub DockingAlwaysTabBar: bool,
    pub DockingAllowUnclassed: bool,
}
#[test]
fn bindgen_test_layout_ImGuiWindowClass() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiWindowClass>(),
        28usize,
        concat!("Size of: ", stringify!(ImGuiWindowClass))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiWindowClass>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiWindowClass))
    );
    fn test_field_ClassId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowClass>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ClassId) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowClass),
                "::",
                stringify!(ClassId)
            )
        );
    }
    test_field_ClassId();
    fn test_field_ParentViewportId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowClass>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ParentViewportId) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowClass),
                "::",
                stringify!(ParentViewportId)
            )
        );
    }
    test_field_ParentViewportId();
    fn test_field_ViewportFlagsOverrideSet() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowClass>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ViewportFlagsOverrideSet) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowClass),
                "::",
                stringify!(ViewportFlagsOverrideSet)
            )
        );
    }
    test_field_ViewportFlagsOverrideSet();
    fn test_field_ViewportFlagsOverrideClear() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowClass>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ViewportFlagsOverrideClear) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowClass),
                "::",
                stringify!(ViewportFlagsOverrideClear)
            )
        );
    }
    test_field_ViewportFlagsOverrideClear();
    fn test_field_TabItemFlagsOverrideSet() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowClass>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TabItemFlagsOverrideSet) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowClass),
                "::",
                stringify!(TabItemFlagsOverrideSet)
            )
        );
    }
    test_field_TabItemFlagsOverrideSet();
    fn test_field_DockNodeFlagsOverrideSet() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowClass>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DockNodeFlagsOverrideSet) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowClass),
                "::",
                stringify!(DockNodeFlagsOverrideSet)
            )
        );
    }
    test_field_DockNodeFlagsOverrideSet();
    fn test_field_DockingAlwaysTabBar() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowClass>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DockingAlwaysTabBar) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowClass),
                "::",
                stringify!(DockingAlwaysTabBar)
            )
        );
    }
    test_field_DockingAlwaysTabBar();
    fn test_field_DockingAllowUnclassed() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowClass>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DockingAllowUnclassed) as usize - ptr as usize
            },
            25usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowClass),
                "::",
                stringify!(DockingAllowUnclassed)
            )
        );
    }
    test_field_DockingAllowUnclassed();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiPayload {
    pub Data: *mut ::std::os::raw::c_void,
    pub DataSize: ::std::os::raw::c_int,
    pub SourceId: ImGuiID,
    pub SourceParentId: ImGuiID,
    pub DataFrameCount: ::std::os::raw::c_int,
    pub DataType: [::std::os::raw::c_char; 33usize],
    pub Preview: bool,
    pub Delivery: bool,
}
#[test]
fn bindgen_test_layout_ImGuiPayload() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiPayload>(),
        64usize,
        concat!("Size of: ", stringify!(ImGuiPayload))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiPayload>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiPayload))
    );
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPayload>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPayload),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
    fn test_field_DataSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPayload>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DataSize) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPayload),
                "::",
                stringify!(DataSize)
            )
        );
    }
    test_field_DataSize();
    fn test_field_SourceId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPayload>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SourceId) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPayload),
                "::",
                stringify!(SourceId)
            )
        );
    }
    test_field_SourceId();
    fn test_field_SourceParentId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPayload>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SourceParentId) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPayload),
                "::",
                stringify!(SourceParentId)
            )
        );
    }
    test_field_SourceParentId();
    fn test_field_DataFrameCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPayload>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DataFrameCount) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPayload),
                "::",
                stringify!(DataFrameCount)
            )
        );
    }
    test_field_DataFrameCount();
    fn test_field_DataType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPayload>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DataType) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPayload),
                "::",
                stringify!(DataType)
            )
        );
    }
    test_field_DataType();
    fn test_field_Preview() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPayload>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Preview) as usize - ptr as usize
            },
            57usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPayload),
                "::",
                stringify!(Preview)
            )
        );
    }
    test_field_Preview();
    fn test_field_Delivery() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPayload>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Delivery) as usize - ptr as usize
            },
            58usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPayload),
                "::",
                stringify!(Delivery)
            )
        );
    }
    test_field_Delivery();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableColumnSortSpecs {
    pub ColumnUserID: ImGuiID,
    pub ColumnIndex: ImS16,
    pub SortOrder: ImS16,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 3usize],
}
#[test]
fn bindgen_test_layout_ImGuiTableColumnSortSpecs() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiTableColumnSortSpecs>(),
        12usize,
        concat!("Size of: ", stringify!(ImGuiTableColumnSortSpecs))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTableColumnSortSpecs>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiTableColumnSortSpecs))
    );
    fn test_field_ColumnUserID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableColumnSortSpecs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ColumnUserID) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableColumnSortSpecs),
                "::",
                stringify!(ColumnUserID)
            )
        );
    }
    test_field_ColumnUserID();
    fn test_field_ColumnIndex() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableColumnSortSpecs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ColumnIndex) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableColumnSortSpecs),
                "::",
                stringify!(ColumnIndex)
            )
        );
    }
    test_field_ColumnIndex();
    fn test_field_SortOrder() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableColumnSortSpecs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SortOrder) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableColumnSortSpecs),
                "::",
                stringify!(SortOrder)
            )
        );
    }
    test_field_SortOrder();
}
impl ImGuiTableColumnSortSpecs {
    #[inline]
    pub fn SortDirection(&self) -> ImGuiSortDirection {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_SortDirection(&mut self, val: ImGuiSortDirection) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        SortDirection: ImGuiSortDirection,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let SortDirection: u32 = unsafe { ::std::mem::transmute(SortDirection) };
            SortDirection as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableSortSpecs {
    pub Specs: *const ImGuiTableColumnSortSpecs,
    pub SpecsCount: ::std::os::raw::c_int,
    pub SpecsDirty: bool,
}
#[test]
fn bindgen_test_layout_ImGuiTableSortSpecs() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiTableSortSpecs>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiTableSortSpecs))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTableSortSpecs>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiTableSortSpecs))
    );
    fn test_field_Specs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableSortSpecs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Specs) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableSortSpecs),
                "::",
                stringify!(Specs)
            )
        );
    }
    test_field_Specs();
    fn test_field_SpecsCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableSortSpecs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SpecsCount) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableSortSpecs),
                "::",
                stringify!(SpecsCount)
            )
        );
    }
    test_field_SpecsCount();
    fn test_field_SpecsDirty() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableSortSpecs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SpecsDirty) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableSortSpecs),
                "::",
                stringify!(SpecsDirty)
            )
        );
    }
    test_field_SpecsDirty();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiOnceUponAFrame {
    pub RefFrame: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ImGuiOnceUponAFrame() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiOnceUponAFrame>(),
        4usize,
        concat!("Size of: ", stringify!(ImGuiOnceUponAFrame))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiOnceUponAFrame>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiOnceUponAFrame))
    );
    fn test_field_RefFrame() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiOnceUponAFrame>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RefFrame) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiOnceUponAFrame),
                "::",
                stringify!(RefFrame)
            )
        );
    }
    test_field_RefFrame();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTextRange {
    pub b: *const ::std::os::raw::c_char,
    pub e: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ImGuiTextRange() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiTextRange>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiTextRange))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTextRange>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiTextRange))
    );
    fn test_field_b() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTextRange>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTextRange),
                "::",
                stringify!(b)
            )
        );
    }
    test_field_b();
    fn test_field_e() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTextRange>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).e) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTextRange),
                "::",
                stringify!(e)
            )
        );
    }
    test_field_e();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiTextRange {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiTextRange,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiTextRange() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiTextRange>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiTextRange))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiTextRange>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiTextRange))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiTextRange>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiTextRange),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiTextRange>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiTextRange),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiTextRange>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiTextRange),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTextFilter {
    pub InputBuf: [::std::os::raw::c_char; 256usize],
    pub Filters: ImVector_ImGuiTextRange,
    pub CountGrep: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ImGuiTextFilter() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiTextFilter>(),
        280usize,
        concat!("Size of: ", stringify!(ImGuiTextFilter))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTextFilter>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiTextFilter))
    );
    fn test_field_InputBuf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTextFilter>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).InputBuf) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTextFilter),
                "::",
                stringify!(InputBuf)
            )
        );
    }
    test_field_InputBuf();
    fn test_field_Filters() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTextFilter>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Filters) as usize - ptr as usize
            },
            256usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTextFilter),
                "::",
                stringify!(Filters)
            )
        );
    }
    test_field_Filters();
    fn test_field_CountGrep() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTextFilter>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CountGrep) as usize - ptr as usize
            },
            272usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTextFilter),
                "::",
                stringify!(CountGrep)
            )
        );
    }
    test_field_CountGrep();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_char {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ImVector_char() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_char>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_char))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_char>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_char))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_char>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_char),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_char>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_char),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_char>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_char),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTextBuffer {
    pub Buf: ImVector_char,
}
#[test]
fn bindgen_test_layout_ImGuiTextBuffer() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiTextBuffer>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiTextBuffer))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTextBuffer>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiTextBuffer))
    );
    fn test_field_Buf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTextBuffer>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Buf) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTextBuffer),
                "::",
                stringify!(Buf)
            )
        );
    }
    test_field_Buf();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImGuiStoragePair {
    pub key: ImGuiID,
    pub __bindgen_anon_1: ImGuiStoragePair__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ImGuiStoragePair__bindgen_ty_1 {
    pub val_i: ::std::os::raw::c_int,
    pub val_f: f32,
    pub val_p: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ImGuiStoragePair__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiStoragePair__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(ImGuiStoragePair__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiStoragePair__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiStoragePair__bindgen_ty_1))
    );
    fn test_field_val_i() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStoragePair__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).val_i) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStoragePair__bindgen_ty_1),
                "::",
                stringify!(val_i)
            )
        );
    }
    test_field_val_i();
    fn test_field_val_f() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStoragePair__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).val_f) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStoragePair__bindgen_ty_1),
                "::",
                stringify!(val_f)
            )
        );
    }
    test_field_val_f();
    fn test_field_val_p() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStoragePair__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).val_p) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStoragePair__bindgen_ty_1),
                "::",
                stringify!(val_p)
            )
        );
    }
    test_field_val_p();
}
#[test]
fn bindgen_test_layout_ImGuiStoragePair() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiStoragePair>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiStoragePair))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiStoragePair>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiStoragePair))
    );
    fn test_field_key() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStoragePair>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStoragePair),
                "::",
                stringify!(key)
            )
        );
    }
    test_field_key();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiStoragePair {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiStoragePair,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiStoragePair() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiStoragePair>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiStoragePair))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiStoragePair>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiStoragePair))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiStoragePair>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiStoragePair),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiStoragePair>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiStoragePair),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiStoragePair>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiStoragePair),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiStorage {
    pub Data: ImVector_ImGuiStoragePair,
}
#[test]
fn bindgen_test_layout_ImGuiStorage() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiStorage>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiStorage))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiStorage>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiStorage))
    );
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStorage>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStorage),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiListClipper {
    pub DisplayStart: ::std::os::raw::c_int,
    pub DisplayEnd: ::std::os::raw::c_int,
    pub ItemsCount: ::std::os::raw::c_int,
    pub ItemsHeight: f32,
    pub StartPosY: f32,
    pub TempData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ImGuiListClipper() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiListClipper>(),
        32usize,
        concat!("Size of: ", stringify!(ImGuiListClipper))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiListClipper>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiListClipper))
    );
    fn test_field_DisplayStart() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiListClipper>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DisplayStart) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiListClipper),
                "::",
                stringify!(DisplayStart)
            )
        );
    }
    test_field_DisplayStart();
    fn test_field_DisplayEnd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiListClipper>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DisplayEnd) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiListClipper),
                "::",
                stringify!(DisplayEnd)
            )
        );
    }
    test_field_DisplayEnd();
    fn test_field_ItemsCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiListClipper>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ItemsCount) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiListClipper),
                "::",
                stringify!(ItemsCount)
            )
        );
    }
    test_field_ItemsCount();
    fn test_field_ItemsHeight() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiListClipper>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ItemsHeight) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiListClipper),
                "::",
                stringify!(ItemsHeight)
            )
        );
    }
    test_field_ItemsHeight();
    fn test_field_StartPosY() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiListClipper>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).StartPosY) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiListClipper),
                "::",
                stringify!(StartPosY)
            )
        );
    }
    test_field_StartPosY();
    fn test_field_TempData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiListClipper>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TempData) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiListClipper),
                "::",
                stringify!(TempData)
            )
        );
    }
    test_field_TempData();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImColor {
    pub Value: ImVec4,
}
#[test]
fn bindgen_test_layout_ImColor() {
    assert_eq!(
        ::std::mem::size_of::<ImColor>(),
        16usize,
        concat!("Size of: ", stringify!(ImColor))
    );
    assert_eq!(
        ::std::mem::align_of::<ImColor>(),
        4usize,
        concat!("Alignment of ", stringify!(ImColor))
    );
    fn test_field_Value() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImColor>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Value) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImColor),
                "::",
                stringify!(Value)
            )
        );
    }
    test_field_Value();
}
pub type ImDrawCallback = ::std::option::Option<
    unsafe extern "C" fn(parent_list: *const ImDrawList, cmd: *const ImDrawCmd),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawCmd {
    pub ClipRect: ImVec4,
    pub TextureId: ImTextureID,
    pub VtxOffset: ::std::os::raw::c_uint,
    pub IdxOffset: ::std::os::raw::c_uint,
    pub ElemCount: ::std::os::raw::c_uint,
    pub UserCallback: ImDrawCallback,
    pub UserCallbackData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ImDrawCmd() {
    assert_eq!(
        ::std::mem::size_of::<ImDrawCmd>(),
        56usize,
        concat!("Size of: ", stringify!(ImDrawCmd))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawCmd>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawCmd))
    );
    fn test_field_ClipRect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawCmd>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ClipRect) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawCmd),
                "::",
                stringify!(ClipRect)
            )
        );
    }
    test_field_ClipRect();
    fn test_field_TextureId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawCmd>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TextureId) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawCmd),
                "::",
                stringify!(TextureId)
            )
        );
    }
    test_field_TextureId();
    fn test_field_VtxOffset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawCmd>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VtxOffset) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawCmd),
                "::",
                stringify!(VtxOffset)
            )
        );
    }
    test_field_VtxOffset();
    fn test_field_IdxOffset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawCmd>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IdxOffset) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawCmd),
                "::",
                stringify!(IdxOffset)
            )
        );
    }
    test_field_IdxOffset();
    fn test_field_ElemCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawCmd>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ElemCount) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawCmd),
                "::",
                stringify!(ElemCount)
            )
        );
    }
    test_field_ElemCount();
    fn test_field_UserCallback() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawCmd>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).UserCallback) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawCmd),
                "::",
                stringify!(UserCallback)
            )
        );
    }
    test_field_UserCallback();
    fn test_field_UserCallbackData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawCmd>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).UserCallbackData) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawCmd),
                "::",
                stringify!(UserCallbackData)
            )
        );
    }
    test_field_UserCallbackData();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawVert {
    pub pos: ImVec2,
    pub uv: ImVec2,
    pub col: ImU32,
}
#[test]
fn bindgen_test_layout_ImDrawVert() {
    assert_eq!(
        ::std::mem::size_of::<ImDrawVert>(),
        20usize,
        concat!("Size of: ", stringify!(ImDrawVert))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawVert>(),
        4usize,
        concat!("Alignment of ", stringify!(ImDrawVert))
    );
    fn test_field_pos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawVert>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pos) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawVert),
                "::",
                stringify!(pos)
            )
        );
    }
    test_field_pos();
    fn test_field_uv() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawVert>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).uv) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawVert),
                "::",
                stringify!(uv)
            )
        );
    }
    test_field_uv();
    fn test_field_col() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawVert>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).col) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawVert),
                "::",
                stringify!(col)
            )
        );
    }
    test_field_col();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawCmdHeader {
    pub ClipRect: ImVec4,
    pub TextureId: ImTextureID,
    pub VtxOffset: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_ImDrawCmdHeader() {
    assert_eq!(
        ::std::mem::size_of::<ImDrawCmdHeader>(),
        32usize,
        concat!("Size of: ", stringify!(ImDrawCmdHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawCmdHeader>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawCmdHeader))
    );
    fn test_field_ClipRect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawCmdHeader>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ClipRect) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawCmdHeader),
                "::",
                stringify!(ClipRect)
            )
        );
    }
    test_field_ClipRect();
    fn test_field_TextureId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawCmdHeader>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TextureId) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawCmdHeader),
                "::",
                stringify!(TextureId)
            )
        );
    }
    test_field_TextureId();
    fn test_field_VtxOffset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawCmdHeader>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VtxOffset) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawCmdHeader),
                "::",
                stringify!(VtxOffset)
            )
        );
    }
    test_field_VtxOffset();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImDrawCmd {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImDrawCmd,
}
#[test]
fn bindgen_test_layout_ImVector_ImDrawCmd() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImDrawCmd>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImDrawCmd))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImDrawCmd>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImDrawCmd))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImDrawCmd>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImDrawCmd),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImDrawCmd>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImDrawCmd),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImDrawCmd>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImDrawCmd),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImDrawIdx {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImDrawIdx,
}
#[test]
fn bindgen_test_layout_ImVector_ImDrawIdx() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImDrawIdx>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImDrawIdx))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImDrawIdx>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImDrawIdx))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImDrawIdx>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImDrawIdx),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImDrawIdx>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImDrawIdx),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImDrawIdx>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImDrawIdx),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawChannel {
    pub _CmdBuffer: ImVector_ImDrawCmd,
    pub _IdxBuffer: ImVector_ImDrawIdx,
}
#[test]
fn bindgen_test_layout_ImDrawChannel() {
    assert_eq!(
        ::std::mem::size_of::<ImDrawChannel>(),
        32usize,
        concat!("Size of: ", stringify!(ImDrawChannel))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawChannel>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawChannel))
    );
    fn test_field__CmdBuffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawChannel>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._CmdBuffer) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawChannel),
                "::",
                stringify!(_CmdBuffer)
            )
        );
    }
    test_field__CmdBuffer();
    fn test_field__IdxBuffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawChannel>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._IdxBuffer) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawChannel),
                "::",
                stringify!(_IdxBuffer)
            )
        );
    }
    test_field__IdxBuffer();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImDrawChannel {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImDrawChannel,
}
#[test]
fn bindgen_test_layout_ImVector_ImDrawChannel() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImDrawChannel>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImDrawChannel))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImDrawChannel>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImDrawChannel))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImDrawChannel>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImDrawChannel),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImDrawChannel>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImDrawChannel),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImDrawChannel>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImDrawChannel),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawListSplitter {
    pub _Current: ::std::os::raw::c_int,
    pub _Count: ::std::os::raw::c_int,
    pub _Channels: ImVector_ImDrawChannel,
}
#[test]
fn bindgen_test_layout_ImDrawListSplitter() {
    assert_eq!(
        ::std::mem::size_of::<ImDrawListSplitter>(),
        24usize,
        concat!("Size of: ", stringify!(ImDrawListSplitter))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawListSplitter>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawListSplitter))
    );
    fn test_field__Current() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawListSplitter>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._Current) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawListSplitter),
                "::",
                stringify!(_Current)
            )
        );
    }
    test_field__Current();
    fn test_field__Count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawListSplitter>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._Count) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawListSplitter),
                "::",
                stringify!(_Count)
            )
        );
    }
    test_field__Count();
    fn test_field__Channels() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawListSplitter>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._Channels) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawListSplitter),
                "::",
                stringify!(_Channels)
            )
        );
    }
    test_field__Channels();
}
pub const ImDrawFlags__ImDrawFlags_None: ImDrawFlags_ = 0;
pub const ImDrawFlags__ImDrawFlags_Closed: ImDrawFlags_ = 1;
pub const ImDrawFlags__ImDrawFlags_RoundCornersTopLeft: ImDrawFlags_ = 16;
pub const ImDrawFlags__ImDrawFlags_RoundCornersTopRight: ImDrawFlags_ = 32;
pub const ImDrawFlags__ImDrawFlags_RoundCornersBottomLeft: ImDrawFlags_ = 64;
pub const ImDrawFlags__ImDrawFlags_RoundCornersBottomRight: ImDrawFlags_ = 128;
pub const ImDrawFlags__ImDrawFlags_RoundCornersNone: ImDrawFlags_ = 256;
pub const ImDrawFlags__ImDrawFlags_RoundCornersTop: ImDrawFlags_ = 48;
pub const ImDrawFlags__ImDrawFlags_RoundCornersBottom: ImDrawFlags_ = 192;
pub const ImDrawFlags__ImDrawFlags_RoundCornersLeft: ImDrawFlags_ = 80;
pub const ImDrawFlags__ImDrawFlags_RoundCornersRight: ImDrawFlags_ = 160;
pub const ImDrawFlags__ImDrawFlags_RoundCornersAll: ImDrawFlags_ = 240;
pub const ImDrawFlags__ImDrawFlags_RoundCornersDefault_: ImDrawFlags_ = 240;
pub const ImDrawFlags__ImDrawFlags_RoundCornersMask_: ImDrawFlags_ = 496;
pub type ImDrawFlags_ = ::std::os::raw::c_int;
pub const ImDrawListFlags__ImDrawListFlags_None: ImDrawListFlags_ = 0;
pub const ImDrawListFlags__ImDrawListFlags_AntiAliasedLines: ImDrawListFlags_ = 1;
pub const ImDrawListFlags__ImDrawListFlags_AntiAliasedLinesUseTex: ImDrawListFlags_ = 2;
pub const ImDrawListFlags__ImDrawListFlags_AntiAliasedFill: ImDrawListFlags_ = 4;
pub const ImDrawListFlags__ImDrawListFlags_AllowVtxOffset: ImDrawListFlags_ = 8;
pub type ImDrawListFlags_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImDrawVert {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImDrawVert,
}
#[test]
fn bindgen_test_layout_ImVector_ImDrawVert() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImDrawVert>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImDrawVert))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImDrawVert>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImDrawVert))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImDrawVert>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImDrawVert),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImDrawVert>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImDrawVert),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImDrawVert>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImDrawVert),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImVec4 {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImVec4,
}
#[test]
fn bindgen_test_layout_ImVector_ImVec4() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImVec4>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImVec4))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImVec4>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImVec4))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImVec4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImVec4),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImVec4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImVec4),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImVec4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImVec4),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImTextureID {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImTextureID,
}
#[test]
fn bindgen_test_layout_ImVector_ImTextureID() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImTextureID>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImTextureID))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImTextureID>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImTextureID))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImTextureID>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImTextureID),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImTextureID>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImTextureID),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImTextureID>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImTextureID),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImVec2 {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImVec2,
}
#[test]
fn bindgen_test_layout_ImVector_ImVec2() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImVec2>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImVec2))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImVec2>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImVec2))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImVec2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImVec2),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImVec2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImVec2),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImVec2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImVec2),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawList {
    pub CmdBuffer: ImVector_ImDrawCmd,
    pub IdxBuffer: ImVector_ImDrawIdx,
    pub VtxBuffer: ImVector_ImDrawVert,
    pub Flags: ImDrawListFlags,
    pub _VtxCurrentIdx: ::std::os::raw::c_uint,
    pub _Data: *const ImDrawListSharedData,
    pub _OwnerName: *const ::std::os::raw::c_char,
    pub _VtxWritePtr: *mut ImDrawVert,
    pub _IdxWritePtr: *mut ImDrawIdx,
    pub _ClipRectStack: ImVector_ImVec4,
    pub _TextureIdStack: ImVector_ImTextureID,
    pub _Path: ImVector_ImVec2,
    pub _CmdHeader: ImDrawCmdHeader,
    pub _Splitter: ImDrawListSplitter,
    pub _FringeScale: f32,
}
#[test]
fn bindgen_test_layout_ImDrawList() {
    assert_eq!(
        ::std::mem::size_of::<ImDrawList>(),
        200usize,
        concat!("Size of: ", stringify!(ImDrawList))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawList>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawList))
    );
    fn test_field_CmdBuffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawList>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CmdBuffer) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawList),
                "::",
                stringify!(CmdBuffer)
            )
        );
    }
    test_field_CmdBuffer();
    fn test_field_IdxBuffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawList>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IdxBuffer) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawList),
                "::",
                stringify!(IdxBuffer)
            )
        );
    }
    test_field_IdxBuffer();
    fn test_field_VtxBuffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawList>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VtxBuffer) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawList),
                "::",
                stringify!(VtxBuffer)
            )
        );
    }
    test_field_VtxBuffer();
    fn test_field_Flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawList>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawList),
                "::",
                stringify!(Flags)
            )
        );
    }
    test_field_Flags();
    fn test_field__VtxCurrentIdx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawList>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._VtxCurrentIdx) as usize - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawList),
                "::",
                stringify!(_VtxCurrentIdx)
            )
        );
    }
    test_field__VtxCurrentIdx();
    fn test_field__Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawList>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._Data) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawList),
                "::",
                stringify!(_Data)
            )
        );
    }
    test_field__Data();
    fn test_field__OwnerName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawList>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._OwnerName) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawList),
                "::",
                stringify!(_OwnerName)
            )
        );
    }
    test_field__OwnerName();
    fn test_field__VtxWritePtr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawList>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._VtxWritePtr) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawList),
                "::",
                stringify!(_VtxWritePtr)
            )
        );
    }
    test_field__VtxWritePtr();
    fn test_field__IdxWritePtr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawList>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._IdxWritePtr) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawList),
                "::",
                stringify!(_IdxWritePtr)
            )
        );
    }
    test_field__IdxWritePtr();
    fn test_field__ClipRectStack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawList>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._ClipRectStack) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawList),
                "::",
                stringify!(_ClipRectStack)
            )
        );
    }
    test_field__ClipRectStack();
    fn test_field__TextureIdStack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawList>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._TextureIdStack) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawList),
                "::",
                stringify!(_TextureIdStack)
            )
        );
    }
    test_field__TextureIdStack();
    fn test_field__Path() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawList>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._Path) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawList),
                "::",
                stringify!(_Path)
            )
        );
    }
    test_field__Path();
    fn test_field__CmdHeader() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawList>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._CmdHeader) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawList),
                "::",
                stringify!(_CmdHeader)
            )
        );
    }
    test_field__CmdHeader();
    fn test_field__Splitter() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawList>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._Splitter) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawList),
                "::",
                stringify!(_Splitter)
            )
        );
    }
    test_field__Splitter();
    fn test_field__FringeScale() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawList>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._FringeScale) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawList),
                "::",
                stringify!(_FringeScale)
            )
        );
    }
    test_field__FringeScale();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawData {
    pub Valid: bool,
    pub CmdListsCount: ::std::os::raw::c_int,
    pub TotalIdxCount: ::std::os::raw::c_int,
    pub TotalVtxCount: ::std::os::raw::c_int,
    pub CmdLists: *mut *mut ImDrawList,
    pub DisplayPos: ImVec2,
    pub DisplaySize: ImVec2,
    pub FramebufferScale: ImVec2,
    pub OwnerViewport: *mut ImGuiViewport,
}
#[test]
fn bindgen_test_layout_ImDrawData() {
    assert_eq!(
        ::std::mem::size_of::<ImDrawData>(),
        56usize,
        concat!("Size of: ", stringify!(ImDrawData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawData))
    );
    fn test_field_Valid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Valid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawData),
                "::",
                stringify!(Valid)
            )
        );
    }
    test_field_Valid();
    fn test_field_CmdListsCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CmdListsCount) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawData),
                "::",
                stringify!(CmdListsCount)
            )
        );
    }
    test_field_CmdListsCount();
    fn test_field_TotalIdxCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TotalIdxCount) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawData),
                "::",
                stringify!(TotalIdxCount)
            )
        );
    }
    test_field_TotalIdxCount();
    fn test_field_TotalVtxCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TotalVtxCount) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawData),
                "::",
                stringify!(TotalVtxCount)
            )
        );
    }
    test_field_TotalVtxCount();
    fn test_field_CmdLists() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CmdLists) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawData),
                "::",
                stringify!(CmdLists)
            )
        );
    }
    test_field_CmdLists();
    fn test_field_DisplayPos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DisplayPos) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawData),
                "::",
                stringify!(DisplayPos)
            )
        );
    }
    test_field_DisplayPos();
    fn test_field_DisplaySize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DisplaySize) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawData),
                "::",
                stringify!(DisplaySize)
            )
        );
    }
    test_field_DisplaySize();
    fn test_field_FramebufferScale() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FramebufferScale) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawData),
                "::",
                stringify!(FramebufferScale)
            )
        );
    }
    test_field_FramebufferScale();
    fn test_field_OwnerViewport() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).OwnerViewport) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawData),
                "::",
                stringify!(OwnerViewport)
            )
        );
    }
    test_field_OwnerViewport();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImFontConfig {
    pub FontData: *mut ::std::os::raw::c_void,
    pub FontDataSize: ::std::os::raw::c_int,
    pub FontDataOwnedByAtlas: bool,
    pub FontNo: ::std::os::raw::c_int,
    pub SizePixels: f32,
    pub OversampleH: ::std::os::raw::c_int,
    pub OversampleV: ::std::os::raw::c_int,
    pub PixelSnapH: bool,
    pub GlyphExtraSpacing: ImVec2,
    pub GlyphOffset: ImVec2,
    pub GlyphRanges: *const ImWchar,
    pub GlyphMinAdvanceX: f32,
    pub GlyphMaxAdvanceX: f32,
    pub MergeMode: bool,
    pub FontBuilderFlags: ::std::os::raw::c_uint,
    pub RasterizerMultiply: f32,
    pub EllipsisChar: ImWchar,
    pub Name: [::std::os::raw::c_char; 40usize],
    pub DstFont: *mut ImFont,
}
#[test]
fn bindgen_test_layout_ImFontConfig() {
    assert_eq!(
        ::std::mem::size_of::<ImFontConfig>(),
        136usize,
        concat!("Size of: ", stringify!(ImFontConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<ImFontConfig>(),
        8usize,
        concat!("Alignment of ", stringify!(ImFontConfig))
    );
    fn test_field_FontData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontConfig>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FontData) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontConfig),
                "::",
                stringify!(FontData)
            )
        );
    }
    test_field_FontData();
    fn test_field_FontDataSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontConfig>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FontDataSize) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontConfig),
                "::",
                stringify!(FontDataSize)
            )
        );
    }
    test_field_FontDataSize();
    fn test_field_FontDataOwnedByAtlas() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontConfig>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FontDataOwnedByAtlas) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontConfig),
                "::",
                stringify!(FontDataOwnedByAtlas)
            )
        );
    }
    test_field_FontDataOwnedByAtlas();
    fn test_field_FontNo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontConfig>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FontNo) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontConfig),
                "::",
                stringify!(FontNo)
            )
        );
    }
    test_field_FontNo();
    fn test_field_SizePixels() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontConfig>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SizePixels) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontConfig),
                "::",
                stringify!(SizePixels)
            )
        );
    }
    test_field_SizePixels();
    fn test_field_OversampleH() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontConfig>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).OversampleH) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontConfig),
                "::",
                stringify!(OversampleH)
            )
        );
    }
    test_field_OversampleH();
    fn test_field_OversampleV() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontConfig>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).OversampleV) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontConfig),
                "::",
                stringify!(OversampleV)
            )
        );
    }
    test_field_OversampleV();
    fn test_field_PixelSnapH() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontConfig>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PixelSnapH) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontConfig),
                "::",
                stringify!(PixelSnapH)
            )
        );
    }
    test_field_PixelSnapH();
    fn test_field_GlyphExtraSpacing() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontConfig>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GlyphExtraSpacing) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontConfig),
                "::",
                stringify!(GlyphExtraSpacing)
            )
        );
    }
    test_field_GlyphExtraSpacing();
    fn test_field_GlyphOffset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontConfig>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GlyphOffset) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontConfig),
                "::",
                stringify!(GlyphOffset)
            )
        );
    }
    test_field_GlyphOffset();
    fn test_field_GlyphRanges() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontConfig>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GlyphRanges) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontConfig),
                "::",
                stringify!(GlyphRanges)
            )
        );
    }
    test_field_GlyphRanges();
    fn test_field_GlyphMinAdvanceX() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontConfig>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GlyphMinAdvanceX) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontConfig),
                "::",
                stringify!(GlyphMinAdvanceX)
            )
        );
    }
    test_field_GlyphMinAdvanceX();
    fn test_field_GlyphMaxAdvanceX() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontConfig>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GlyphMaxAdvanceX) as usize - ptr as usize
            },
            68usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontConfig),
                "::",
                stringify!(GlyphMaxAdvanceX)
            )
        );
    }
    test_field_GlyphMaxAdvanceX();
    fn test_field_MergeMode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontConfig>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MergeMode) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontConfig),
                "::",
                stringify!(MergeMode)
            )
        );
    }
    test_field_MergeMode();
    fn test_field_FontBuilderFlags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontConfig>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FontBuilderFlags) as usize - ptr as usize
            },
            76usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontConfig),
                "::",
                stringify!(FontBuilderFlags)
            )
        );
    }
    test_field_FontBuilderFlags();
    fn test_field_RasterizerMultiply() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontConfig>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RasterizerMultiply) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontConfig),
                "::",
                stringify!(RasterizerMultiply)
            )
        );
    }
    test_field_RasterizerMultiply();
    fn test_field_EllipsisChar() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontConfig>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).EllipsisChar) as usize - ptr as usize
            },
            84usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontConfig),
                "::",
                stringify!(EllipsisChar)
            )
        );
    }
    test_field_EllipsisChar();
    fn test_field_Name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontConfig>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Name) as usize - ptr as usize
            },
            86usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontConfig),
                "::",
                stringify!(Name)
            )
        );
    }
    test_field_Name();
    fn test_field_DstFont() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontConfig>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DstFont) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontConfig),
                "::",
                stringify!(DstFont)
            )
        );
    }
    test_field_DstFont();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImFontGlyph {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub AdvanceX: f32,
    pub X0: f32,
    pub Y0: f32,
    pub X1: f32,
    pub Y1: f32,
    pub U0: f32,
    pub V0: f32,
    pub U1: f32,
    pub V1: f32,
}
#[test]
fn bindgen_test_layout_ImFontGlyph() {
    assert_eq!(
        ::std::mem::size_of::<ImFontGlyph>(),
        40usize,
        concat!("Size of: ", stringify!(ImFontGlyph))
    );
    assert_eq!(
        ::std::mem::align_of::<ImFontGlyph>(),
        4usize,
        concat!("Alignment of ", stringify!(ImFontGlyph))
    );
    fn test_field_AdvanceX() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontGlyph>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AdvanceX) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontGlyph),
                "::",
                stringify!(AdvanceX)
            )
        );
    }
    test_field_AdvanceX();
    fn test_field_X0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontGlyph>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).X0) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontGlyph),
                "::",
                stringify!(X0)
            )
        );
    }
    test_field_X0();
    fn test_field_Y0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontGlyph>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Y0) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontGlyph),
                "::",
                stringify!(Y0)
            )
        );
    }
    test_field_Y0();
    fn test_field_X1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontGlyph>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).X1) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontGlyph),
                "::",
                stringify!(X1)
            )
        );
    }
    test_field_X1();
    fn test_field_Y1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontGlyph>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Y1) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontGlyph),
                "::",
                stringify!(Y1)
            )
        );
    }
    test_field_Y1();
    fn test_field_U0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontGlyph>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).U0) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontGlyph),
                "::",
                stringify!(U0)
            )
        );
    }
    test_field_U0();
    fn test_field_V0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontGlyph>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).V0) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontGlyph),
                "::",
                stringify!(V0)
            )
        );
    }
    test_field_V0();
    fn test_field_U1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontGlyph>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).U1) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontGlyph),
                "::",
                stringify!(U1)
            )
        );
    }
    test_field_U1();
    fn test_field_V1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontGlyph>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).V1) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontGlyph),
                "::",
                stringify!(V1)
            )
        );
    }
    test_field_V1();
}
impl ImFontGlyph {
    #[inline]
    pub fn Colored(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Colored(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn Visible(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_Visible(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn Codepoint(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_Codepoint(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        Colored: ::std::os::raw::c_uint,
        Visible: ::std::os::raw::c_uint,
        Codepoint: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let Colored: u32 = unsafe { ::std::mem::transmute(Colored) };
            Colored as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let Visible: u32 = unsafe { ::std::mem::transmute(Visible) };
            Visible as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let Codepoint: u32 = unsafe { ::std::mem::transmute(Codepoint) };
            Codepoint as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImU32 {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImU32,
}
#[test]
fn bindgen_test_layout_ImVector_ImU32() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImU32>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImU32))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImU32>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImU32))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImU32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImU32),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImU32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImU32),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImU32>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImU32),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImFontGlyphRangesBuilder {
    pub UsedChars: ImVector_ImU32,
}
#[test]
fn bindgen_test_layout_ImFontGlyphRangesBuilder() {
    assert_eq!(
        ::std::mem::size_of::<ImFontGlyphRangesBuilder>(),
        16usize,
        concat!("Size of: ", stringify!(ImFontGlyphRangesBuilder))
    );
    assert_eq!(
        ::std::mem::align_of::<ImFontGlyphRangesBuilder>(),
        8usize,
        concat!("Alignment of ", stringify!(ImFontGlyphRangesBuilder))
    );
    fn test_field_UsedChars() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontGlyphRangesBuilder>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).UsedChars) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontGlyphRangesBuilder),
                "::",
                stringify!(UsedChars)
            )
        );
    }
    test_field_UsedChars();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImFontAtlasCustomRect {
    pub Width: ::std::os::raw::c_ushort,
    pub Height: ::std::os::raw::c_ushort,
    pub X: ::std::os::raw::c_ushort,
    pub Y: ::std::os::raw::c_ushort,
    pub GlyphID: ::std::os::raw::c_uint,
    pub GlyphAdvanceX: f32,
    pub GlyphOffset: ImVec2,
    pub Font: *mut ImFont,
}
#[test]
fn bindgen_test_layout_ImFontAtlasCustomRect() {
    assert_eq!(
        ::std::mem::size_of::<ImFontAtlasCustomRect>(),
        32usize,
        concat!("Size of: ", stringify!(ImFontAtlasCustomRect))
    );
    assert_eq!(
        ::std::mem::align_of::<ImFontAtlasCustomRect>(),
        8usize,
        concat!("Alignment of ", stringify!(ImFontAtlasCustomRect))
    );
    fn test_field_Width() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontAtlasCustomRect>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Width) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlasCustomRect),
                "::",
                stringify!(Width)
            )
        );
    }
    test_field_Width();
    fn test_field_Height() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontAtlasCustomRect>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Height) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlasCustomRect),
                "::",
                stringify!(Height)
            )
        );
    }
    test_field_Height();
    fn test_field_X() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontAtlasCustomRect>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).X) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlasCustomRect),
                "::",
                stringify!(X)
            )
        );
    }
    test_field_X();
    fn test_field_Y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontAtlasCustomRect>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Y) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlasCustomRect),
                "::",
                stringify!(Y)
            )
        );
    }
    test_field_Y();
    fn test_field_GlyphID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontAtlasCustomRect>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GlyphID) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlasCustomRect),
                "::",
                stringify!(GlyphID)
            )
        );
    }
    test_field_GlyphID();
    fn test_field_GlyphAdvanceX() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontAtlasCustomRect>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GlyphAdvanceX) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlasCustomRect),
                "::",
                stringify!(GlyphAdvanceX)
            )
        );
    }
    test_field_GlyphAdvanceX();
    fn test_field_GlyphOffset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontAtlasCustomRect>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GlyphOffset) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlasCustomRect),
                "::",
                stringify!(GlyphOffset)
            )
        );
    }
    test_field_GlyphOffset();
    fn test_field_Font() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontAtlasCustomRect>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Font) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlasCustomRect),
                "::",
                stringify!(Font)
            )
        );
    }
    test_field_Font();
}
pub const ImFontAtlasFlags__ImFontAtlasFlags_None: ImFontAtlasFlags_ = 0;
pub const ImFontAtlasFlags__ImFontAtlasFlags_NoPowerOfTwoHeight: ImFontAtlasFlags_ = 1;
pub const ImFontAtlasFlags__ImFontAtlasFlags_NoMouseCursors: ImFontAtlasFlags_ = 2;
pub const ImFontAtlasFlags__ImFontAtlasFlags_NoBakedLines: ImFontAtlasFlags_ = 4;
pub type ImFontAtlasFlags_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImFontPtr {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut *mut ImFont,
}
#[test]
fn bindgen_test_layout_ImVector_ImFontPtr() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImFontPtr>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImFontPtr))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImFontPtr>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImFontPtr))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImFontPtr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImFontPtr),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImFontPtr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImFontPtr),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImFontPtr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImFontPtr),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImFontAtlasCustomRect {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImFontAtlasCustomRect,
}
#[test]
fn bindgen_test_layout_ImVector_ImFontAtlasCustomRect() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImFontAtlasCustomRect>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImFontAtlasCustomRect))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImFontAtlasCustomRect>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImFontAtlasCustomRect))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImFontAtlasCustomRect>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImFontAtlasCustomRect),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImFontAtlasCustomRect>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImFontAtlasCustomRect),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImFontAtlasCustomRect>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImFontAtlasCustomRect),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImFontConfig {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImFontConfig,
}
#[test]
fn bindgen_test_layout_ImVector_ImFontConfig() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImFontConfig>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImFontConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImFontConfig>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImFontConfig))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImFontConfig>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImFontConfig),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImFontConfig>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImFontConfig),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImFontConfig>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImFontConfig),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImFontAtlas {
    pub Flags: ImFontAtlasFlags,
    pub TexID: ImTextureID,
    pub TexDesiredWidth: ::std::os::raw::c_int,
    pub TexGlyphPadding: ::std::os::raw::c_int,
    pub Locked: bool,
    pub TexReady: bool,
    pub TexPixelsUseColors: bool,
    pub TexPixelsAlpha8: *mut ::std::os::raw::c_uchar,
    pub TexPixelsRGBA32: *mut ::std::os::raw::c_uint,
    pub TexWidth: ::std::os::raw::c_int,
    pub TexHeight: ::std::os::raw::c_int,
    pub TexUvScale: ImVec2,
    pub TexUvWhitePixel: ImVec2,
    pub Fonts: ImVector_ImFontPtr,
    pub CustomRects: ImVector_ImFontAtlasCustomRect,
    pub ConfigData: ImVector_ImFontConfig,
    pub TexUvLines: [ImVec4; 64usize],
    pub FontBuilderIO: *const ImFontBuilderIO,
    pub FontBuilderFlags: ::std::os::raw::c_uint,
    pub PackIdMouseCursors: ::std::os::raw::c_int,
    pub PackIdLines: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ImFontAtlas() {
    assert_eq!(
        ::std::mem::size_of::<ImFontAtlas>(),
        1168usize,
        concat!("Size of: ", stringify!(ImFontAtlas))
    );
    assert_eq!(
        ::std::mem::align_of::<ImFontAtlas>(),
        8usize,
        concat!("Alignment of ", stringify!(ImFontAtlas))
    );
    fn test_field_Flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontAtlas>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlas),
                "::",
                stringify!(Flags)
            )
        );
    }
    test_field_Flags();
    fn test_field_TexID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontAtlas>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TexID) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlas),
                "::",
                stringify!(TexID)
            )
        );
    }
    test_field_TexID();
    fn test_field_TexDesiredWidth() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontAtlas>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TexDesiredWidth) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlas),
                "::",
                stringify!(TexDesiredWidth)
            )
        );
    }
    test_field_TexDesiredWidth();
    fn test_field_TexGlyphPadding() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontAtlas>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TexGlyphPadding) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlas),
                "::",
                stringify!(TexGlyphPadding)
            )
        );
    }
    test_field_TexGlyphPadding();
    fn test_field_Locked() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontAtlas>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Locked) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlas),
                "::",
                stringify!(Locked)
            )
        );
    }
    test_field_Locked();
    fn test_field_TexReady() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontAtlas>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TexReady) as usize - ptr as usize
            },
            25usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlas),
                "::",
                stringify!(TexReady)
            )
        );
    }
    test_field_TexReady();
    fn test_field_TexPixelsUseColors() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontAtlas>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TexPixelsUseColors) as usize - ptr as usize
            },
            26usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlas),
                "::",
                stringify!(TexPixelsUseColors)
            )
        );
    }
    test_field_TexPixelsUseColors();
    fn test_field_TexPixelsAlpha8() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontAtlas>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TexPixelsAlpha8) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlas),
                "::",
                stringify!(TexPixelsAlpha8)
            )
        );
    }
    test_field_TexPixelsAlpha8();
    fn test_field_TexPixelsRGBA32() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontAtlas>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TexPixelsRGBA32) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlas),
                "::",
                stringify!(TexPixelsRGBA32)
            )
        );
    }
    test_field_TexPixelsRGBA32();
    fn test_field_TexWidth() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontAtlas>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TexWidth) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlas),
                "::",
                stringify!(TexWidth)
            )
        );
    }
    test_field_TexWidth();
    fn test_field_TexHeight() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontAtlas>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TexHeight) as usize - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlas),
                "::",
                stringify!(TexHeight)
            )
        );
    }
    test_field_TexHeight();
    fn test_field_TexUvScale() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontAtlas>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TexUvScale) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlas),
                "::",
                stringify!(TexUvScale)
            )
        );
    }
    test_field_TexUvScale();
    fn test_field_TexUvWhitePixel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontAtlas>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TexUvWhitePixel) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlas),
                "::",
                stringify!(TexUvWhitePixel)
            )
        );
    }
    test_field_TexUvWhitePixel();
    fn test_field_Fonts() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontAtlas>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Fonts) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlas),
                "::",
                stringify!(Fonts)
            )
        );
    }
    test_field_Fonts();
    fn test_field_CustomRects() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontAtlas>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CustomRects) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlas),
                "::",
                stringify!(CustomRects)
            )
        );
    }
    test_field_CustomRects();
    fn test_field_ConfigData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontAtlas>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ConfigData) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlas),
                "::",
                stringify!(ConfigData)
            )
        );
    }
    test_field_ConfigData();
    fn test_field_TexUvLines() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontAtlas>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TexUvLines) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlas),
                "::",
                stringify!(TexUvLines)
            )
        );
    }
    test_field_TexUvLines();
    fn test_field_FontBuilderIO() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontAtlas>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FontBuilderIO) as usize - ptr as usize
            },
            1144usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlas),
                "::",
                stringify!(FontBuilderIO)
            )
        );
    }
    test_field_FontBuilderIO();
    fn test_field_FontBuilderFlags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontAtlas>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FontBuilderFlags) as usize - ptr as usize
            },
            1152usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlas),
                "::",
                stringify!(FontBuilderFlags)
            )
        );
    }
    test_field_FontBuilderFlags();
    fn test_field_PackIdMouseCursors() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontAtlas>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PackIdMouseCursors) as usize - ptr as usize
            },
            1156usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlas),
                "::",
                stringify!(PackIdMouseCursors)
            )
        );
    }
    test_field_PackIdMouseCursors();
    fn test_field_PackIdLines() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontAtlas>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PackIdLines) as usize - ptr as usize
            },
            1160usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontAtlas),
                "::",
                stringify!(PackIdLines)
            )
        );
    }
    test_field_PackIdLines();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_float {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut f32,
}
#[test]
fn bindgen_test_layout_ImVector_float() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_float>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_float))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_float>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_float))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_float>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_float),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_float>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_float),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_float>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_float),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImFontGlyph {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImFontGlyph,
}
#[test]
fn bindgen_test_layout_ImVector_ImFontGlyph() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImFontGlyph>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImFontGlyph))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImFontGlyph>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImFontGlyph))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImFontGlyph>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImFontGlyph),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImFontGlyph>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImFontGlyph),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImFontGlyph>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImFontGlyph),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImFont {
    pub IndexAdvanceX: ImVector_float,
    pub FallbackAdvanceX: f32,
    pub FontSize: f32,
    pub IndexLookup: ImVector_ImWchar,
    pub Glyphs: ImVector_ImFontGlyph,
    pub FallbackGlyph: *const ImFontGlyph,
    pub ContainerAtlas: *mut ImFontAtlas,
    pub ConfigData: *const ImFontConfig,
    pub ConfigDataCount: ::std::os::raw::c_short,
    pub FallbackChar: ImWchar,
    pub EllipsisChar: ImWchar,
    pub DotChar: ImWchar,
    pub DirtyLookupTables: bool,
    pub Scale: f32,
    pub Ascent: f32,
    pub Descent: f32,
    pub MetricsTotalSurface: ::std::os::raw::c_int,
    pub Used4kPagesMap: [ImU8; 2usize],
}
#[test]
fn bindgen_test_layout_ImFont() {
    assert_eq!(
        ::std::mem::size_of::<ImFont>(),
        112usize,
        concat!("Size of: ", stringify!(ImFont))
    );
    assert_eq!(
        ::std::mem::align_of::<ImFont>(),
        8usize,
        concat!("Alignment of ", stringify!(ImFont))
    );
    fn test_field_IndexAdvanceX() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFont>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IndexAdvanceX) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFont),
                "::",
                stringify!(IndexAdvanceX)
            )
        );
    }
    test_field_IndexAdvanceX();
    fn test_field_FallbackAdvanceX() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFont>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FallbackAdvanceX) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFont),
                "::",
                stringify!(FallbackAdvanceX)
            )
        );
    }
    test_field_FallbackAdvanceX();
    fn test_field_FontSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFont>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FontSize) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFont),
                "::",
                stringify!(FontSize)
            )
        );
    }
    test_field_FontSize();
    fn test_field_IndexLookup() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFont>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IndexLookup) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFont),
                "::",
                stringify!(IndexLookup)
            )
        );
    }
    test_field_IndexLookup();
    fn test_field_Glyphs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFont>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Glyphs) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFont),
                "::",
                stringify!(Glyphs)
            )
        );
    }
    test_field_Glyphs();
    fn test_field_FallbackGlyph() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFont>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FallbackGlyph) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFont),
                "::",
                stringify!(FallbackGlyph)
            )
        );
    }
    test_field_FallbackGlyph();
    fn test_field_ContainerAtlas() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFont>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ContainerAtlas) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFont),
                "::",
                stringify!(ContainerAtlas)
            )
        );
    }
    test_field_ContainerAtlas();
    fn test_field_ConfigData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFont>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ConfigData) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFont),
                "::",
                stringify!(ConfigData)
            )
        );
    }
    test_field_ConfigData();
    fn test_field_ConfigDataCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFont>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ConfigDataCount) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFont),
                "::",
                stringify!(ConfigDataCount)
            )
        );
    }
    test_field_ConfigDataCount();
    fn test_field_FallbackChar() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFont>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FallbackChar) as usize - ptr as usize
            },
            82usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFont),
                "::",
                stringify!(FallbackChar)
            )
        );
    }
    test_field_FallbackChar();
    fn test_field_EllipsisChar() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFont>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).EllipsisChar) as usize - ptr as usize
            },
            84usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFont),
                "::",
                stringify!(EllipsisChar)
            )
        );
    }
    test_field_EllipsisChar();
    fn test_field_DotChar() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFont>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DotChar) as usize - ptr as usize
            },
            86usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFont),
                "::",
                stringify!(DotChar)
            )
        );
    }
    test_field_DotChar();
    fn test_field_DirtyLookupTables() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFont>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DirtyLookupTables) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFont),
                "::",
                stringify!(DirtyLookupTables)
            )
        );
    }
    test_field_DirtyLookupTables();
    fn test_field_Scale() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFont>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Scale) as usize - ptr as usize
            },
            92usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFont),
                "::",
                stringify!(Scale)
            )
        );
    }
    test_field_Scale();
    fn test_field_Ascent() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFont>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Ascent) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFont),
                "::",
                stringify!(Ascent)
            )
        );
    }
    test_field_Ascent();
    fn test_field_Descent() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFont>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Descent) as usize - ptr as usize
            },
            100usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFont),
                "::",
                stringify!(Descent)
            )
        );
    }
    test_field_Descent();
    fn test_field_MetricsTotalSurface() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFont>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MetricsTotalSurface) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFont),
                "::",
                stringify!(MetricsTotalSurface)
            )
        );
    }
    test_field_MetricsTotalSurface();
    fn test_field_Used4kPagesMap() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFont>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Used4kPagesMap) as usize - ptr as usize
            },
            108usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFont),
                "::",
                stringify!(Used4kPagesMap)
            )
        );
    }
    test_field_Used4kPagesMap();
}
pub const ImGuiViewportFlags__ImGuiViewportFlags_None: ImGuiViewportFlags_ = 0;
pub const ImGuiViewportFlags__ImGuiViewportFlags_IsPlatformWindow: ImGuiViewportFlags_ = 1;
pub const ImGuiViewportFlags__ImGuiViewportFlags_IsPlatformMonitor: ImGuiViewportFlags_ = 2;
pub const ImGuiViewportFlags__ImGuiViewportFlags_OwnedByApp: ImGuiViewportFlags_ = 4;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoDecoration: ImGuiViewportFlags_ = 8;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoTaskBarIcon: ImGuiViewportFlags_ = 16;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoFocusOnAppearing: ImGuiViewportFlags_ = 32;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoFocusOnClick: ImGuiViewportFlags_ = 64;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoInputs: ImGuiViewportFlags_ = 128;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoRendererClear: ImGuiViewportFlags_ = 256;
pub const ImGuiViewportFlags__ImGuiViewportFlags_TopMost: ImGuiViewportFlags_ = 512;
pub const ImGuiViewportFlags__ImGuiViewportFlags_Minimized: ImGuiViewportFlags_ = 1024;
pub const ImGuiViewportFlags__ImGuiViewportFlags_NoAutoMerge: ImGuiViewportFlags_ = 2048;
pub const ImGuiViewportFlags__ImGuiViewportFlags_CanHostOtherWindows: ImGuiViewportFlags_ = 4096;
pub type ImGuiViewportFlags_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiViewport {
    pub ID: ImGuiID,
    pub Flags: ImGuiViewportFlags,
    pub Pos: ImVec2,
    pub Size: ImVec2,
    pub WorkPos: ImVec2,
    pub WorkSize: ImVec2,
    pub DpiScale: f32,
    pub ParentViewportId: ImGuiID,
    pub DrawData: *mut ImDrawData,
    pub RendererUserData: *mut ::std::os::raw::c_void,
    pub PlatformUserData: *mut ::std::os::raw::c_void,
    pub PlatformHandle: *mut ::std::os::raw::c_void,
    pub PlatformHandleRaw: *mut ::std::os::raw::c_void,
    pub PlatformRequestMove: bool,
    pub PlatformRequestResize: bool,
    pub PlatformRequestClose: bool,
}
#[test]
fn bindgen_test_layout_ImGuiViewport() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiViewport>(),
        96usize,
        concat!("Size of: ", stringify!(ImGuiViewport))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiViewport>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiViewport))
    );
    fn test_field_ID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiViewport>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ID) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiViewport),
                "::",
                stringify!(ID)
            )
        );
    }
    test_field_ID();
    fn test_field_Flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiViewport>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiViewport),
                "::",
                stringify!(Flags)
            )
        );
    }
    test_field_Flags();
    fn test_field_Pos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiViewport>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Pos) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiViewport),
                "::",
                stringify!(Pos)
            )
        );
    }
    test_field_Pos();
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiViewport>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiViewport),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_WorkPos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiViewport>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WorkPos) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiViewport),
                "::",
                stringify!(WorkPos)
            )
        );
    }
    test_field_WorkPos();
    fn test_field_WorkSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiViewport>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WorkSize) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiViewport),
                "::",
                stringify!(WorkSize)
            )
        );
    }
    test_field_WorkSize();
    fn test_field_DpiScale() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiViewport>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DpiScale) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiViewport),
                "::",
                stringify!(DpiScale)
            )
        );
    }
    test_field_DpiScale();
    fn test_field_ParentViewportId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiViewport>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ParentViewportId) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiViewport),
                "::",
                stringify!(ParentViewportId)
            )
        );
    }
    test_field_ParentViewportId();
    fn test_field_DrawData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiViewport>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DrawData) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiViewport),
                "::",
                stringify!(DrawData)
            )
        );
    }
    test_field_DrawData();
    fn test_field_RendererUserData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiViewport>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RendererUserData) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiViewport),
                "::",
                stringify!(RendererUserData)
            )
        );
    }
    test_field_RendererUserData();
    fn test_field_PlatformUserData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiViewport>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PlatformUserData) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiViewport),
                "::",
                stringify!(PlatformUserData)
            )
        );
    }
    test_field_PlatformUserData();
    fn test_field_PlatformHandle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiViewport>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PlatformHandle) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiViewport),
                "::",
                stringify!(PlatformHandle)
            )
        );
    }
    test_field_PlatformHandle();
    fn test_field_PlatformHandleRaw() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiViewport>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PlatformHandleRaw) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiViewport),
                "::",
                stringify!(PlatformHandleRaw)
            )
        );
    }
    test_field_PlatformHandleRaw();
    fn test_field_PlatformRequestMove() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiViewport>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PlatformRequestMove) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiViewport),
                "::",
                stringify!(PlatformRequestMove)
            )
        );
    }
    test_field_PlatformRequestMove();
    fn test_field_PlatformRequestResize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiViewport>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PlatformRequestResize) as usize - ptr as usize
            },
            89usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiViewport),
                "::",
                stringify!(PlatformRequestResize)
            )
        );
    }
    test_field_PlatformRequestResize();
    fn test_field_PlatformRequestClose() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiViewport>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PlatformRequestClose) as usize - ptr as usize
            },
            90usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiViewport),
                "::",
                stringify!(PlatformRequestClose)
            )
        );
    }
    test_field_PlatformRequestClose();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiPlatformMonitor {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiPlatformMonitor,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiPlatformMonitor() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiPlatformMonitor>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiPlatformMonitor))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiPlatformMonitor>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiPlatformMonitor))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiPlatformMonitor>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiPlatformMonitor),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiPlatformMonitor>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiPlatformMonitor),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiPlatformMonitor>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiPlatformMonitor),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiViewportPtr {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut *mut ImGuiViewport,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiViewportPtr() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiViewportPtr>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiViewportPtr))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiViewportPtr>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiViewportPtr))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiViewportPtr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiViewportPtr),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiViewportPtr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiViewportPtr),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiViewportPtr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiViewportPtr),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiPlatformIO {
    pub Platform_CreateWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_DestroyWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_ShowWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_SetWindowPos:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport, pos: ImVec2)>,
    pub Platform_GetWindowPos:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> ImVec2>,
    pub Platform_SetWindowSize:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport, size: ImVec2)>,
    pub Platform_GetWindowSize:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> ImVec2>,
    pub Platform_SetWindowFocus:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_GetWindowFocus:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> bool>,
    pub Platform_GetWindowMinimized:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> bool>,
    pub Platform_SetWindowTitle: ::std::option::Option<
        unsafe extern "C" fn(vp: *mut ImGuiViewport, str_: *const ::std::os::raw::c_char),
    >,
    pub Platform_SetWindowAlpha:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport, alpha: f32)>,
    pub Platform_UpdateWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_RenderWindow: ::std::option::Option<
        unsafe extern "C" fn(vp: *mut ImGuiViewport, render_arg: *mut ::std::os::raw::c_void),
    >,
    pub Platform_SwapBuffers: ::std::option::Option<
        unsafe extern "C" fn(vp: *mut ImGuiViewport, render_arg: *mut ::std::os::raw::c_void),
    >,
    pub Platform_GetWindowDpiScale:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport) -> f32>,
    pub Platform_OnChangedViewport:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Platform_CreateVkSurface: ::std::option::Option<
        unsafe extern "C" fn(
            vp: *mut ImGuiViewport,
            vk_inst: ImU64,
            vk_allocators: *const ::std::os::raw::c_void,
            out_vk_surface: *mut ImU64,
        ) -> ::std::os::raw::c_int,
    >,
    pub Renderer_CreateWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Renderer_DestroyWindow: ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport)>,
    pub Renderer_SetWindowSize:
        ::std::option::Option<unsafe extern "C" fn(vp: *mut ImGuiViewport, size: ImVec2)>,
    pub Renderer_RenderWindow: ::std::option::Option<
        unsafe extern "C" fn(vp: *mut ImGuiViewport, render_arg: *mut ::std::os::raw::c_void),
    >,
    pub Renderer_SwapBuffers: ::std::option::Option<
        unsafe extern "C" fn(vp: *mut ImGuiViewport, render_arg: *mut ::std::os::raw::c_void),
    >,
    pub Monitors: ImVector_ImGuiPlatformMonitor,
    pub Viewports: ImVector_ImGuiViewportPtr,
}
#[test]
fn bindgen_test_layout_ImGuiPlatformIO() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiPlatformIO>(),
        216usize,
        concat!("Size of: ", stringify!(ImGuiPlatformIO))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiPlatformIO>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiPlatformIO))
    );
    fn test_field_Platform_CreateWindow() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPlatformIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Platform_CreateWindow) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPlatformIO),
                "::",
                stringify!(Platform_CreateWindow)
            )
        );
    }
    test_field_Platform_CreateWindow();
    fn test_field_Platform_DestroyWindow() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPlatformIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Platform_DestroyWindow) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPlatformIO),
                "::",
                stringify!(Platform_DestroyWindow)
            )
        );
    }
    test_field_Platform_DestroyWindow();
    fn test_field_Platform_ShowWindow() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPlatformIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Platform_ShowWindow) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPlatformIO),
                "::",
                stringify!(Platform_ShowWindow)
            )
        );
    }
    test_field_Platform_ShowWindow();
    fn test_field_Platform_SetWindowPos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPlatformIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Platform_SetWindowPos) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPlatformIO),
                "::",
                stringify!(Platform_SetWindowPos)
            )
        );
    }
    test_field_Platform_SetWindowPos();
    fn test_field_Platform_GetWindowPos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPlatformIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Platform_GetWindowPos) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPlatformIO),
                "::",
                stringify!(Platform_GetWindowPos)
            )
        );
    }
    test_field_Platform_GetWindowPos();
    fn test_field_Platform_SetWindowSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPlatformIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Platform_SetWindowSize) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPlatformIO),
                "::",
                stringify!(Platform_SetWindowSize)
            )
        );
    }
    test_field_Platform_SetWindowSize();
    fn test_field_Platform_GetWindowSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPlatformIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Platform_GetWindowSize) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPlatformIO),
                "::",
                stringify!(Platform_GetWindowSize)
            )
        );
    }
    test_field_Platform_GetWindowSize();
    fn test_field_Platform_SetWindowFocus() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPlatformIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Platform_SetWindowFocus) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPlatformIO),
                "::",
                stringify!(Platform_SetWindowFocus)
            )
        );
    }
    test_field_Platform_SetWindowFocus();
    fn test_field_Platform_GetWindowFocus() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPlatformIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Platform_GetWindowFocus) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPlatformIO),
                "::",
                stringify!(Platform_GetWindowFocus)
            )
        );
    }
    test_field_Platform_GetWindowFocus();
    fn test_field_Platform_GetWindowMinimized() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPlatformIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Platform_GetWindowMinimized) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPlatformIO),
                "::",
                stringify!(Platform_GetWindowMinimized)
            )
        );
    }
    test_field_Platform_GetWindowMinimized();
    fn test_field_Platform_SetWindowTitle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPlatformIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Platform_SetWindowTitle) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPlatformIO),
                "::",
                stringify!(Platform_SetWindowTitle)
            )
        );
    }
    test_field_Platform_SetWindowTitle();
    fn test_field_Platform_SetWindowAlpha() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPlatformIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Platform_SetWindowAlpha) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPlatformIO),
                "::",
                stringify!(Platform_SetWindowAlpha)
            )
        );
    }
    test_field_Platform_SetWindowAlpha();
    fn test_field_Platform_UpdateWindow() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPlatformIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Platform_UpdateWindow) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPlatformIO),
                "::",
                stringify!(Platform_UpdateWindow)
            )
        );
    }
    test_field_Platform_UpdateWindow();
    fn test_field_Platform_RenderWindow() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPlatformIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Platform_RenderWindow) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPlatformIO),
                "::",
                stringify!(Platform_RenderWindow)
            )
        );
    }
    test_field_Platform_RenderWindow();
    fn test_field_Platform_SwapBuffers() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPlatformIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Platform_SwapBuffers) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPlatformIO),
                "::",
                stringify!(Platform_SwapBuffers)
            )
        );
    }
    test_field_Platform_SwapBuffers();
    fn test_field_Platform_GetWindowDpiScale() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPlatformIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Platform_GetWindowDpiScale) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPlatformIO),
                "::",
                stringify!(Platform_GetWindowDpiScale)
            )
        );
    }
    test_field_Platform_GetWindowDpiScale();
    fn test_field_Platform_OnChangedViewport() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPlatformIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Platform_OnChangedViewport) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPlatformIO),
                "::",
                stringify!(Platform_OnChangedViewport)
            )
        );
    }
    test_field_Platform_OnChangedViewport();
    fn test_field_Platform_CreateVkSurface() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPlatformIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Platform_CreateVkSurface) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPlatformIO),
                "::",
                stringify!(Platform_CreateVkSurface)
            )
        );
    }
    test_field_Platform_CreateVkSurface();
    fn test_field_Renderer_CreateWindow() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPlatformIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Renderer_CreateWindow) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPlatformIO),
                "::",
                stringify!(Renderer_CreateWindow)
            )
        );
    }
    test_field_Renderer_CreateWindow();
    fn test_field_Renderer_DestroyWindow() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPlatformIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Renderer_DestroyWindow) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPlatformIO),
                "::",
                stringify!(Renderer_DestroyWindow)
            )
        );
    }
    test_field_Renderer_DestroyWindow();
    fn test_field_Renderer_SetWindowSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPlatformIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Renderer_SetWindowSize) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPlatformIO),
                "::",
                stringify!(Renderer_SetWindowSize)
            )
        );
    }
    test_field_Renderer_SetWindowSize();
    fn test_field_Renderer_RenderWindow() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPlatformIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Renderer_RenderWindow) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPlatformIO),
                "::",
                stringify!(Renderer_RenderWindow)
            )
        );
    }
    test_field_Renderer_RenderWindow();
    fn test_field_Renderer_SwapBuffers() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPlatformIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Renderer_SwapBuffers) as usize - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPlatformIO),
                "::",
                stringify!(Renderer_SwapBuffers)
            )
        );
    }
    test_field_Renderer_SwapBuffers();
    fn test_field_Monitors() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPlatformIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Monitors) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPlatformIO),
                "::",
                stringify!(Monitors)
            )
        );
    }
    test_field_Monitors();
    fn test_field_Viewports() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPlatformIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Viewports) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPlatformIO),
                "::",
                stringify!(Viewports)
            )
        );
    }
    test_field_Viewports();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiPlatformMonitor {
    pub MainPos: ImVec2,
    pub MainSize: ImVec2,
    pub WorkPos: ImVec2,
    pub WorkSize: ImVec2,
    pub DpiScale: f32,
}
#[test]
fn bindgen_test_layout_ImGuiPlatformMonitor() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiPlatformMonitor>(),
        36usize,
        concat!("Size of: ", stringify!(ImGuiPlatformMonitor))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiPlatformMonitor>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiPlatformMonitor))
    );
    fn test_field_MainPos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPlatformMonitor>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MainPos) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPlatformMonitor),
                "::",
                stringify!(MainPos)
            )
        );
    }
    test_field_MainPos();
    fn test_field_MainSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPlatformMonitor>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MainSize) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPlatformMonitor),
                "::",
                stringify!(MainSize)
            )
        );
    }
    test_field_MainSize();
    fn test_field_WorkPos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPlatformMonitor>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WorkPos) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPlatformMonitor),
                "::",
                stringify!(WorkPos)
            )
        );
    }
    test_field_WorkPos();
    fn test_field_WorkSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPlatformMonitor>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WorkSize) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPlatformMonitor),
                "::",
                stringify!(WorkSize)
            )
        );
    }
    test_field_WorkSize();
    fn test_field_DpiScale() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPlatformMonitor>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DpiScale) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPlatformMonitor),
                "::",
                stringify!(DpiScale)
            )
        );
    }
    test_field_DpiScale();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiPlatformImeData {
    pub WantVisible: bool,
    pub InputPos: ImVec2,
    pub InputLineHeight: f32,
}
#[test]
fn bindgen_test_layout_ImGuiPlatformImeData() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiPlatformImeData>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiPlatformImeData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiPlatformImeData>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiPlatformImeData))
    );
    fn test_field_WantVisible() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPlatformImeData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WantVisible) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPlatformImeData),
                "::",
                stringify!(WantVisible)
            )
        );
    }
    test_field_WantVisible();
    fn test_field_InputPos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPlatformImeData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).InputPos) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPlatformImeData),
                "::",
                stringify!(InputPos)
            )
        );
    }
    test_field_InputPos();
    fn test_field_InputLineHeight() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPlatformImeData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).InputLineHeight) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPlatformImeData),
                "::",
                stringify!(InputLineHeight)
            )
        );
    }
    test_field_InputLineHeight();
}
pub type ImGuiDataAuthority = ::std::os::raw::c_int;
pub type ImGuiLayoutType = ::std::os::raw::c_int;
pub type ImGuiActivateFlags = ::std::os::raw::c_int;
pub type ImGuiDebugLogFlags = ::std::os::raw::c_int;
pub type ImGuiItemFlags = ::std::os::raw::c_int;
pub type ImGuiItemStatusFlags = ::std::os::raw::c_int;
pub type ImGuiOldColumnFlags = ::std::os::raw::c_int;
pub type ImGuiNavHighlightFlags = ::std::os::raw::c_int;
pub type ImGuiNavDirSourceFlags = ::std::os::raw::c_int;
pub type ImGuiNavMoveFlags = ::std::os::raw::c_int;
pub type ImGuiNextItemDataFlags = ::std::os::raw::c_int;
pub type ImGuiNextWindowDataFlags = ::std::os::raw::c_int;
pub type ImGuiScrollFlags = ::std::os::raw::c_int;
pub type ImGuiSeparatorFlags = ::std::os::raw::c_int;
pub type ImGuiTextFlags = ::std::os::raw::c_int;
pub type ImGuiTooltipFlags = ::std::os::raw::c_int;
pub type ImGuiErrorLogCallback = ::std::option::Option<
    unsafe extern "C" fn(
        user_data: *mut ::std::os::raw::c_void,
        fmt: *const ::std::os::raw::c_char,
        ...
    ),
>;
extern "C" {
    pub static mut GImGui: *mut ImGuiContext;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StbUndoRecord {
    pub where_: ::std::os::raw::c_int,
    pub insert_length: ::std::os::raw::c_int,
    pub delete_length: ::std::os::raw::c_int,
    pub char_storage: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_StbUndoRecord() {
    assert_eq!(
        ::std::mem::size_of::<StbUndoRecord>(),
        16usize,
        concat!("Size of: ", stringify!(StbUndoRecord))
    );
    assert_eq!(
        ::std::mem::align_of::<StbUndoRecord>(),
        4usize,
        concat!("Alignment of ", stringify!(StbUndoRecord))
    );
    fn test_field_where() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<StbUndoRecord>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).where_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(StbUndoRecord),
                "::",
                stringify!(where_)
            )
        );
    }
    test_field_where();
    fn test_field_insert_length() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<StbUndoRecord>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).insert_length) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(StbUndoRecord),
                "::",
                stringify!(insert_length)
            )
        );
    }
    test_field_insert_length();
    fn test_field_delete_length() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<StbUndoRecord>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).delete_length) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(StbUndoRecord),
                "::",
                stringify!(delete_length)
            )
        );
    }
    test_field_delete_length();
    fn test_field_char_storage() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<StbUndoRecord>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).char_storage) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(StbUndoRecord),
                "::",
                stringify!(char_storage)
            )
        );
    }
    test_field_char_storage();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StbUndoState {
    pub undo_rec: [StbUndoRecord; 99usize],
    pub undo_char: [ImWchar; 999usize],
    pub undo_point: ::std::os::raw::c_short,
    pub redo_point: ::std::os::raw::c_short,
    pub undo_char_point: ::std::os::raw::c_int,
    pub redo_char_point: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_StbUndoState() {
    assert_eq!(
        ::std::mem::size_of::<StbUndoState>(),
        3596usize,
        concat!("Size of: ", stringify!(StbUndoState))
    );
    assert_eq!(
        ::std::mem::align_of::<StbUndoState>(),
        4usize,
        concat!("Alignment of ", stringify!(StbUndoState))
    );
    fn test_field_undo_rec() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<StbUndoState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).undo_rec) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(StbUndoState),
                "::",
                stringify!(undo_rec)
            )
        );
    }
    test_field_undo_rec();
    fn test_field_undo_char() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<StbUndoState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).undo_char) as usize - ptr as usize
            },
            1584usize,
            concat!(
                "Offset of field: ",
                stringify!(StbUndoState),
                "::",
                stringify!(undo_char)
            )
        );
    }
    test_field_undo_char();
    fn test_field_undo_point() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<StbUndoState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).undo_point) as usize - ptr as usize
            },
            3582usize,
            concat!(
                "Offset of field: ",
                stringify!(StbUndoState),
                "::",
                stringify!(undo_point)
            )
        );
    }
    test_field_undo_point();
    fn test_field_redo_point() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<StbUndoState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).redo_point) as usize - ptr as usize
            },
            3584usize,
            concat!(
                "Offset of field: ",
                stringify!(StbUndoState),
                "::",
                stringify!(redo_point)
            )
        );
    }
    test_field_redo_point();
    fn test_field_undo_char_point() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<StbUndoState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).undo_char_point) as usize - ptr as usize
            },
            3588usize,
            concat!(
                "Offset of field: ",
                stringify!(StbUndoState),
                "::",
                stringify!(undo_char_point)
            )
        );
    }
    test_field_undo_char_point();
    fn test_field_redo_char_point() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<StbUndoState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).redo_char_point) as usize - ptr as usize
            },
            3592usize,
            concat!(
                "Offset of field: ",
                stringify!(StbUndoState),
                "::",
                stringify!(redo_char_point)
            )
        );
    }
    test_field_redo_char_point();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct STB_TexteditState {
    pub cursor: ::std::os::raw::c_int,
    pub select_start: ::std::os::raw::c_int,
    pub select_end: ::std::os::raw::c_int,
    pub insert_mode: ::std::os::raw::c_uchar,
    pub row_count_per_page: ::std::os::raw::c_int,
    pub cursor_at_end_of_line: ::std::os::raw::c_uchar,
    pub initialized: ::std::os::raw::c_uchar,
    pub has_preferred_x: ::std::os::raw::c_uchar,
    pub single_line: ::std::os::raw::c_uchar,
    pub padding1: ::std::os::raw::c_uchar,
    pub padding2: ::std::os::raw::c_uchar,
    pub padding3: ::std::os::raw::c_uchar,
    pub preferred_x: f32,
    pub undostate: StbUndoState,
}
#[test]
fn bindgen_test_layout_STB_TexteditState() {
    assert_eq!(
        ::std::mem::size_of::<STB_TexteditState>(),
        3628usize,
        concat!("Size of: ", stringify!(STB_TexteditState))
    );
    assert_eq!(
        ::std::mem::align_of::<STB_TexteditState>(),
        4usize,
        concat!("Alignment of ", stringify!(STB_TexteditState))
    );
    fn test_field_cursor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<STB_TexteditState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cursor) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(STB_TexteditState),
                "::",
                stringify!(cursor)
            )
        );
    }
    test_field_cursor();
    fn test_field_select_start() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<STB_TexteditState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).select_start) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(STB_TexteditState),
                "::",
                stringify!(select_start)
            )
        );
    }
    test_field_select_start();
    fn test_field_select_end() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<STB_TexteditState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).select_end) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(STB_TexteditState),
                "::",
                stringify!(select_end)
            )
        );
    }
    test_field_select_end();
    fn test_field_insert_mode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<STB_TexteditState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).insert_mode) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(STB_TexteditState),
                "::",
                stringify!(insert_mode)
            )
        );
    }
    test_field_insert_mode();
    fn test_field_row_count_per_page() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<STB_TexteditState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).row_count_per_page) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(STB_TexteditState),
                "::",
                stringify!(row_count_per_page)
            )
        );
    }
    test_field_row_count_per_page();
    fn test_field_cursor_at_end_of_line() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<STB_TexteditState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cursor_at_end_of_line) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(STB_TexteditState),
                "::",
                stringify!(cursor_at_end_of_line)
            )
        );
    }
    test_field_cursor_at_end_of_line();
    fn test_field_initialized() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<STB_TexteditState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).initialized) as usize - ptr as usize
            },
            21usize,
            concat!(
                "Offset of field: ",
                stringify!(STB_TexteditState),
                "::",
                stringify!(initialized)
            )
        );
    }
    test_field_initialized();
    fn test_field_has_preferred_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<STB_TexteditState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).has_preferred_x) as usize - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(STB_TexteditState),
                "::",
                stringify!(has_preferred_x)
            )
        );
    }
    test_field_has_preferred_x();
    fn test_field_single_line() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<STB_TexteditState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).single_line) as usize - ptr as usize
            },
            23usize,
            concat!(
                "Offset of field: ",
                stringify!(STB_TexteditState),
                "::",
                stringify!(single_line)
            )
        );
    }
    test_field_single_line();
    fn test_field_padding1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<STB_TexteditState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).padding1) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(STB_TexteditState),
                "::",
                stringify!(padding1)
            )
        );
    }
    test_field_padding1();
    fn test_field_padding2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<STB_TexteditState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).padding2) as usize - ptr as usize
            },
            25usize,
            concat!(
                "Offset of field: ",
                stringify!(STB_TexteditState),
                "::",
                stringify!(padding2)
            )
        );
    }
    test_field_padding2();
    fn test_field_padding3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<STB_TexteditState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).padding3) as usize - ptr as usize
            },
            26usize,
            concat!(
                "Offset of field: ",
                stringify!(STB_TexteditState),
                "::",
                stringify!(padding3)
            )
        );
    }
    test_field_padding3();
    fn test_field_preferred_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<STB_TexteditState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).preferred_x) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(STB_TexteditState),
                "::",
                stringify!(preferred_x)
            )
        );
    }
    test_field_preferred_x();
    fn test_field_undostate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<STB_TexteditState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).undostate) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(STB_TexteditState),
                "::",
                stringify!(undostate)
            )
        );
    }
    test_field_undostate();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StbTexteditRow {
    pub x0: f32,
    pub x1: f32,
    pub baseline_y_delta: f32,
    pub ymin: f32,
    pub ymax: f32,
    pub num_chars: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_StbTexteditRow() {
    assert_eq!(
        ::std::mem::size_of::<StbTexteditRow>(),
        24usize,
        concat!("Size of: ", stringify!(StbTexteditRow))
    );
    assert_eq!(
        ::std::mem::align_of::<StbTexteditRow>(),
        4usize,
        concat!("Alignment of ", stringify!(StbTexteditRow))
    );
    fn test_field_x0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<StbTexteditRow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x0) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(StbTexteditRow),
                "::",
                stringify!(x0)
            )
        );
    }
    test_field_x0();
    fn test_field_x1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<StbTexteditRow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x1) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(StbTexteditRow),
                "::",
                stringify!(x1)
            )
        );
    }
    test_field_x1();
    fn test_field_baseline_y_delta() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<StbTexteditRow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).baseline_y_delta) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(StbTexteditRow),
                "::",
                stringify!(baseline_y_delta)
            )
        );
    }
    test_field_baseline_y_delta();
    fn test_field_ymin() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<StbTexteditRow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ymin) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(StbTexteditRow),
                "::",
                stringify!(ymin)
            )
        );
    }
    test_field_ymin();
    fn test_field_ymax() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<StbTexteditRow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ymax) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(StbTexteditRow),
                "::",
                stringify!(ymax)
            )
        );
    }
    test_field_ymax();
    fn test_field_num_chars() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<StbTexteditRow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).num_chars) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(StbTexteditRow),
                "::",
                stringify!(num_chars)
            )
        );
    }
    test_field_num_chars();
}
pub type ImFileHandle = *mut FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVec1 {
    pub x: f32,
}
#[test]
fn bindgen_test_layout_ImVec1() {
    assert_eq!(
        ::std::mem::size_of::<ImVec1>(),
        4usize,
        concat!("Size of: ", stringify!(ImVec1))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVec1>(),
        4usize,
        concat!("Alignment of ", stringify!(ImVec1))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVec1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!("Offset of field: ", stringify!(ImVec1), "::", stringify!(x))
        );
    }
    test_field_x();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVec2ih {
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_ImVec2ih() {
    assert_eq!(
        ::std::mem::size_of::<ImVec2ih>(),
        4usize,
        concat!("Size of: ", stringify!(ImVec2ih))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVec2ih>(),
        2usize,
        concat!("Alignment of ", stringify!(ImVec2ih))
    );
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVec2ih>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVec2ih),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVec2ih>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVec2ih),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImRect {
    pub Min: ImVec2,
    pub Max: ImVec2,
}
#[test]
fn bindgen_test_layout_ImRect() {
    assert_eq!(
        ::std::mem::size_of::<ImRect>(),
        16usize,
        concat!("Size of: ", stringify!(ImRect))
    );
    assert_eq!(
        ::std::mem::align_of::<ImRect>(),
        4usize,
        concat!("Alignment of ", stringify!(ImRect))
    );
    fn test_field_Min() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImRect>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Min) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImRect),
                "::",
                stringify!(Min)
            )
        );
    }
    test_field_Min();
    fn test_field_Max() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImRect>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Max) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImRect),
                "::",
                stringify!(Max)
            )
        );
    }
    test_field_Max();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImBitVector {
    pub Storage: ImVector_ImU32,
}
#[test]
fn bindgen_test_layout_ImBitVector() {
    assert_eq!(
        ::std::mem::size_of::<ImBitVector>(),
        16usize,
        concat!("Size of: ", stringify!(ImBitVector))
    );
    assert_eq!(
        ::std::mem::align_of::<ImBitVector>(),
        8usize,
        concat!("Alignment of ", stringify!(ImBitVector))
    );
    fn test_field_Storage() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImBitVector>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Storage) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImBitVector),
                "::",
                stringify!(Storage)
            )
        );
    }
    test_field_Storage();
}
pub type ImPoolIdx = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawListSharedData {
    pub TexUvWhitePixel: ImVec2,
    pub Font: *mut ImFont,
    pub FontSize: f32,
    pub CurveTessellationTol: f32,
    pub CircleSegmentMaxError: f32,
    pub ClipRectFullscreen: ImVec4,
    pub InitialFlags: ImDrawListFlags,
    pub ArcFastVtx: [ImVec2; 48usize],
    pub ArcFastRadiusCutoff: f32,
    pub CircleSegmentCounts: [ImU8; 64usize],
    pub TexUvLines: *const ImVec4,
}
#[test]
fn bindgen_test_layout_ImDrawListSharedData() {
    assert_eq!(
        ::std::mem::size_of::<ImDrawListSharedData>(),
        512usize,
        concat!("Size of: ", stringify!(ImDrawListSharedData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawListSharedData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawListSharedData))
    );
    fn test_field_TexUvWhitePixel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawListSharedData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TexUvWhitePixel) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawListSharedData),
                "::",
                stringify!(TexUvWhitePixel)
            )
        );
    }
    test_field_TexUvWhitePixel();
    fn test_field_Font() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawListSharedData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Font) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawListSharedData),
                "::",
                stringify!(Font)
            )
        );
    }
    test_field_Font();
    fn test_field_FontSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawListSharedData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FontSize) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawListSharedData),
                "::",
                stringify!(FontSize)
            )
        );
    }
    test_field_FontSize();
    fn test_field_CurveTessellationTol() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawListSharedData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CurveTessellationTol) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawListSharedData),
                "::",
                stringify!(CurveTessellationTol)
            )
        );
    }
    test_field_CurveTessellationTol();
    fn test_field_CircleSegmentMaxError() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawListSharedData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CircleSegmentMaxError) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawListSharedData),
                "::",
                stringify!(CircleSegmentMaxError)
            )
        );
    }
    test_field_CircleSegmentMaxError();
    fn test_field_ClipRectFullscreen() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawListSharedData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ClipRectFullscreen) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawListSharedData),
                "::",
                stringify!(ClipRectFullscreen)
            )
        );
    }
    test_field_ClipRectFullscreen();
    fn test_field_InitialFlags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawListSharedData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).InitialFlags) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawListSharedData),
                "::",
                stringify!(InitialFlags)
            )
        );
    }
    test_field_InitialFlags();
    fn test_field_ArcFastVtx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawListSharedData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ArcFastVtx) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawListSharedData),
                "::",
                stringify!(ArcFastVtx)
            )
        );
    }
    test_field_ArcFastVtx();
    fn test_field_ArcFastRadiusCutoff() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawListSharedData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ArcFastRadiusCutoff) as usize - ptr as usize
            },
            432usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawListSharedData),
                "::",
                stringify!(ArcFastRadiusCutoff)
            )
        );
    }
    test_field_ArcFastRadiusCutoff();
    fn test_field_CircleSegmentCounts() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawListSharedData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CircleSegmentCounts) as usize - ptr as usize
            },
            436usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawListSharedData),
                "::",
                stringify!(CircleSegmentCounts)
            )
        );
    }
    test_field_CircleSegmentCounts();
    fn test_field_TexUvLines() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawListSharedData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TexUvLines) as usize - ptr as usize
            },
            504usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawListSharedData),
                "::",
                stringify!(TexUvLines)
            )
        );
    }
    test_field_TexUvLines();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImDrawListPtr {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut *mut ImDrawList,
}
#[test]
fn bindgen_test_layout_ImVector_ImDrawListPtr() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImDrawListPtr>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImDrawListPtr))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImDrawListPtr>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImDrawListPtr))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImDrawListPtr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImDrawListPtr),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImDrawListPtr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImDrawListPtr),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImDrawListPtr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImDrawListPtr),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImDrawDataBuilder {
    pub Layers: [ImVector_ImDrawListPtr; 2usize],
}
#[test]
fn bindgen_test_layout_ImDrawDataBuilder() {
    assert_eq!(
        ::std::mem::size_of::<ImDrawDataBuilder>(),
        32usize,
        concat!("Size of: ", stringify!(ImDrawDataBuilder))
    );
    assert_eq!(
        ::std::mem::align_of::<ImDrawDataBuilder>(),
        8usize,
        concat!("Alignment of ", stringify!(ImDrawDataBuilder))
    );
    fn test_field_Layers() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImDrawDataBuilder>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Layers) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImDrawDataBuilder),
                "::",
                stringify!(Layers)
            )
        );
    }
    test_field_Layers();
}
pub const ImGuiItemFlags__ImGuiItemFlags_None: ImGuiItemFlags_ = 0;
pub const ImGuiItemFlags__ImGuiItemFlags_NoTabStop: ImGuiItemFlags_ = 1;
pub const ImGuiItemFlags__ImGuiItemFlags_ButtonRepeat: ImGuiItemFlags_ = 2;
pub const ImGuiItemFlags__ImGuiItemFlags_Disabled: ImGuiItemFlags_ = 4;
pub const ImGuiItemFlags__ImGuiItemFlags_NoNav: ImGuiItemFlags_ = 8;
pub const ImGuiItemFlags__ImGuiItemFlags_NoNavDefaultFocus: ImGuiItemFlags_ = 16;
pub const ImGuiItemFlags__ImGuiItemFlags_SelectableDontClosePopup: ImGuiItemFlags_ = 32;
pub const ImGuiItemFlags__ImGuiItemFlags_MixedValue: ImGuiItemFlags_ = 64;
pub const ImGuiItemFlags__ImGuiItemFlags_ReadOnly: ImGuiItemFlags_ = 128;
pub const ImGuiItemFlags__ImGuiItemFlags_Inputable: ImGuiItemFlags_ = 256;
pub type ImGuiItemFlags_ = ::std::os::raw::c_int;
pub const ImGuiItemStatusFlags__ImGuiItemStatusFlags_None: ImGuiItemStatusFlags_ = 0;
pub const ImGuiItemStatusFlags__ImGuiItemStatusFlags_HoveredRect: ImGuiItemStatusFlags_ = 1;
pub const ImGuiItemStatusFlags__ImGuiItemStatusFlags_HasDisplayRect: ImGuiItemStatusFlags_ = 2;
pub const ImGuiItemStatusFlags__ImGuiItemStatusFlags_Edited: ImGuiItemStatusFlags_ = 4;
pub const ImGuiItemStatusFlags__ImGuiItemStatusFlags_ToggledSelection: ImGuiItemStatusFlags_ = 8;
pub const ImGuiItemStatusFlags__ImGuiItemStatusFlags_ToggledOpen: ImGuiItemStatusFlags_ = 16;
pub const ImGuiItemStatusFlags__ImGuiItemStatusFlags_HasDeactivated: ImGuiItemStatusFlags_ = 32;
pub const ImGuiItemStatusFlags__ImGuiItemStatusFlags_Deactivated: ImGuiItemStatusFlags_ = 64;
pub const ImGuiItemStatusFlags__ImGuiItemStatusFlags_HoveredWindow: ImGuiItemStatusFlags_ = 128;
pub const ImGuiItemStatusFlags__ImGuiItemStatusFlags_FocusedByTabbing: ImGuiItemStatusFlags_ = 256;
pub type ImGuiItemStatusFlags_ = ::std::os::raw::c_int;
pub const ImGuiInputTextFlagsPrivate__ImGuiInputTextFlags_Multiline: ImGuiInputTextFlagsPrivate_ =
    67108864;
pub const ImGuiInputTextFlagsPrivate__ImGuiInputTextFlags_NoMarkEdited:
    ImGuiInputTextFlagsPrivate_ = 134217728;
pub const ImGuiInputTextFlagsPrivate__ImGuiInputTextFlags_MergedItem: ImGuiInputTextFlagsPrivate_ =
    268435456;
pub type ImGuiInputTextFlagsPrivate_ = ::std::os::raw::c_int;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_PressedOnClick: ImGuiButtonFlagsPrivate_ = 16;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_PressedOnClickRelease:
    ImGuiButtonFlagsPrivate_ = 32;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_PressedOnClickReleaseAnywhere:
    ImGuiButtonFlagsPrivate_ = 64;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_PressedOnRelease: ImGuiButtonFlagsPrivate_ =
    128;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_PressedOnDoubleClick: ImGuiButtonFlagsPrivate_ =
    256;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_PressedOnDragDropHold:
    ImGuiButtonFlagsPrivate_ = 512;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_Repeat: ImGuiButtonFlagsPrivate_ = 1024;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_FlattenChildren: ImGuiButtonFlagsPrivate_ =
    2048;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_AllowItemOverlap: ImGuiButtonFlagsPrivate_ =
    4096;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_DontClosePopups: ImGuiButtonFlagsPrivate_ =
    8192;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_AlignTextBaseLine: ImGuiButtonFlagsPrivate_ =
    32768;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_NoKeyModifiers: ImGuiButtonFlagsPrivate_ =
    65536;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_NoHoldingActiveId: ImGuiButtonFlagsPrivate_ =
    131072;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_NoNavFocus: ImGuiButtonFlagsPrivate_ = 262144;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_NoHoveredOnFocus: ImGuiButtonFlagsPrivate_ =
    524288;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_PressedOnMask_: ImGuiButtonFlagsPrivate_ = 1008;
pub const ImGuiButtonFlagsPrivate__ImGuiButtonFlags_PressedOnDefault_: ImGuiButtonFlagsPrivate_ =
    32;
pub type ImGuiButtonFlagsPrivate_ = ::std::os::raw::c_int;
pub const ImGuiComboFlagsPrivate__ImGuiComboFlags_CustomPreview: ImGuiComboFlagsPrivate_ = 1048576;
pub type ImGuiComboFlagsPrivate_ = ::std::os::raw::c_int;
pub const ImGuiSliderFlagsPrivate__ImGuiSliderFlags_Vertical: ImGuiSliderFlagsPrivate_ = 1048576;
pub const ImGuiSliderFlagsPrivate__ImGuiSliderFlags_ReadOnly: ImGuiSliderFlagsPrivate_ = 2097152;
pub type ImGuiSliderFlagsPrivate_ = ::std::os::raw::c_int;
pub const ImGuiSelectableFlagsPrivate__ImGuiSelectableFlags_NoHoldingActiveID:
    ImGuiSelectableFlagsPrivate_ = 1048576;
pub const ImGuiSelectableFlagsPrivate__ImGuiSelectableFlags_SelectOnNav:
    ImGuiSelectableFlagsPrivate_ = 2097152;
pub const ImGuiSelectableFlagsPrivate__ImGuiSelectableFlags_SelectOnClick:
    ImGuiSelectableFlagsPrivate_ = 4194304;
pub const ImGuiSelectableFlagsPrivate__ImGuiSelectableFlags_SelectOnRelease:
    ImGuiSelectableFlagsPrivate_ = 8388608;
pub const ImGuiSelectableFlagsPrivate__ImGuiSelectableFlags_SpanAvailWidth:
    ImGuiSelectableFlagsPrivate_ = 16777216;
pub const ImGuiSelectableFlagsPrivate__ImGuiSelectableFlags_DrawHoveredWhenHeld:
    ImGuiSelectableFlagsPrivate_ = 33554432;
pub const ImGuiSelectableFlagsPrivate__ImGuiSelectableFlags_SetNavIdOnHover:
    ImGuiSelectableFlagsPrivate_ = 67108864;
pub const ImGuiSelectableFlagsPrivate__ImGuiSelectableFlags_NoPadWithHalfSpacing:
    ImGuiSelectableFlagsPrivate_ = 134217728;
pub type ImGuiSelectableFlagsPrivate_ = ::std::os::raw::c_int;
pub const ImGuiTreeNodeFlagsPrivate__ImGuiTreeNodeFlags_ClipLabelForTrailingButton:
    ImGuiTreeNodeFlagsPrivate_ = 1048576;
pub type ImGuiTreeNodeFlagsPrivate_ = ::std::os::raw::c_int;
pub const ImGuiSeparatorFlags__ImGuiSeparatorFlags_None: ImGuiSeparatorFlags_ = 0;
pub const ImGuiSeparatorFlags__ImGuiSeparatorFlags_Horizontal: ImGuiSeparatorFlags_ = 1;
pub const ImGuiSeparatorFlags__ImGuiSeparatorFlags_Vertical: ImGuiSeparatorFlags_ = 2;
pub const ImGuiSeparatorFlags__ImGuiSeparatorFlags_SpanAllColumns: ImGuiSeparatorFlags_ = 4;
pub type ImGuiSeparatorFlags_ = ::std::os::raw::c_int;
pub const ImGuiTextFlags__ImGuiTextFlags_None: ImGuiTextFlags_ = 0;
pub const ImGuiTextFlags__ImGuiTextFlags_NoWidthForLargeClippedText: ImGuiTextFlags_ = 1;
pub type ImGuiTextFlags_ = ::std::os::raw::c_int;
pub const ImGuiTooltipFlags__ImGuiTooltipFlags_None: ImGuiTooltipFlags_ = 0;
pub const ImGuiTooltipFlags__ImGuiTooltipFlags_OverridePreviousTooltip: ImGuiTooltipFlags_ = 1;
pub type ImGuiTooltipFlags_ = ::std::os::raw::c_int;
pub const ImGuiLayoutType__ImGuiLayoutType_Horizontal: ImGuiLayoutType_ = 0;
pub const ImGuiLayoutType__ImGuiLayoutType_Vertical: ImGuiLayoutType_ = 1;
pub type ImGuiLayoutType_ = ::std::os::raw::c_int;
pub const ImGuiLogType_ImGuiLogType_None: ImGuiLogType = 0;
pub const ImGuiLogType_ImGuiLogType_TTY: ImGuiLogType = 1;
pub const ImGuiLogType_ImGuiLogType_File: ImGuiLogType = 2;
pub const ImGuiLogType_ImGuiLogType_Buffer: ImGuiLogType = 3;
pub const ImGuiLogType_ImGuiLogType_Clipboard: ImGuiLogType = 4;
pub type ImGuiLogType = ::std::os::raw::c_int;
pub const ImGuiAxis_ImGuiAxis_None: ImGuiAxis = -1;
pub const ImGuiAxis_ImGuiAxis_X: ImGuiAxis = 0;
pub const ImGuiAxis_ImGuiAxis_Y: ImGuiAxis = 1;
pub type ImGuiAxis = ::std::os::raw::c_int;
pub const ImGuiPlotType_ImGuiPlotType_Lines: ImGuiPlotType = 0;
pub const ImGuiPlotType_ImGuiPlotType_Histogram: ImGuiPlotType = 1;
pub type ImGuiPlotType = ::std::os::raw::c_int;
pub const ImGuiPopupPositionPolicy_ImGuiPopupPositionPolicy_Default: ImGuiPopupPositionPolicy = 0;
pub const ImGuiPopupPositionPolicy_ImGuiPopupPositionPolicy_ComboBox: ImGuiPopupPositionPolicy = 1;
pub const ImGuiPopupPositionPolicy_ImGuiPopupPositionPolicy_Tooltip: ImGuiPopupPositionPolicy = 2;
pub type ImGuiPopupPositionPolicy = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiDataTypeTempStorage {
    pub Data: [ImU8; 8usize],
}
#[test]
fn bindgen_test_layout_ImGuiDataTypeTempStorage() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiDataTypeTempStorage>(),
        8usize,
        concat!("Size of: ", stringify!(ImGuiDataTypeTempStorage))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiDataTypeTempStorage>(),
        1usize,
        concat!("Alignment of ", stringify!(ImGuiDataTypeTempStorage))
    );
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiDataTypeTempStorage>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiDataTypeTempStorage),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiDataTypeInfo {
    pub Size: size_t,
    pub Name: *const ::std::os::raw::c_char,
    pub PrintFmt: *const ::std::os::raw::c_char,
    pub ScanFmt: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ImGuiDataTypeInfo() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiDataTypeInfo>(),
        32usize,
        concat!("Size of: ", stringify!(ImGuiDataTypeInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiDataTypeInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiDataTypeInfo))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiDataTypeInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiDataTypeInfo),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiDataTypeInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Name) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiDataTypeInfo),
                "::",
                stringify!(Name)
            )
        );
    }
    test_field_Name();
    fn test_field_PrintFmt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiDataTypeInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PrintFmt) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiDataTypeInfo),
                "::",
                stringify!(PrintFmt)
            )
        );
    }
    test_field_PrintFmt();
    fn test_field_ScanFmt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiDataTypeInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ScanFmt) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiDataTypeInfo),
                "::",
                stringify!(ScanFmt)
            )
        );
    }
    test_field_ScanFmt();
}
pub const ImGuiDataTypePrivate__ImGuiDataType_String: ImGuiDataTypePrivate_ = 11;
pub const ImGuiDataTypePrivate__ImGuiDataType_Pointer: ImGuiDataTypePrivate_ = 12;
pub const ImGuiDataTypePrivate__ImGuiDataType_ID: ImGuiDataTypePrivate_ = 13;
pub type ImGuiDataTypePrivate_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiColorMod {
    pub Col: ImGuiCol,
    pub BackupValue: ImVec4,
}
#[test]
fn bindgen_test_layout_ImGuiColorMod() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiColorMod>(),
        20usize,
        concat!("Size of: ", stringify!(ImGuiColorMod))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiColorMod>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiColorMod))
    );
    fn test_field_Col() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiColorMod>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Col) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiColorMod),
                "::",
                stringify!(Col)
            )
        );
    }
    test_field_Col();
    fn test_field_BackupValue() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiColorMod>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BackupValue) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiColorMod),
                "::",
                stringify!(BackupValue)
            )
        );
    }
    test_field_BackupValue();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImGuiStyleMod {
    pub VarIdx: ImGuiStyleVar,
    pub __bindgen_anon_1: ImGuiStyleMod__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ImGuiStyleMod__bindgen_ty_1 {
    pub BackupInt: [::std::os::raw::c_int; 2usize],
    pub BackupFloat: [f32; 2usize],
}
#[test]
fn bindgen_test_layout_ImGuiStyleMod__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiStyleMod__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(ImGuiStyleMod__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiStyleMod__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiStyleMod__bindgen_ty_1))
    );
    fn test_field_BackupInt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStyleMod__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BackupInt) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStyleMod__bindgen_ty_1),
                "::",
                stringify!(BackupInt)
            )
        );
    }
    test_field_BackupInt();
    fn test_field_BackupFloat() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStyleMod__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BackupFloat) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStyleMod__bindgen_ty_1),
                "::",
                stringify!(BackupFloat)
            )
        );
    }
    test_field_BackupFloat();
}
#[test]
fn bindgen_test_layout_ImGuiStyleMod() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiStyleMod>(),
        12usize,
        concat!("Size of: ", stringify!(ImGuiStyleMod))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiStyleMod>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiStyleMod))
    );
    fn test_field_VarIdx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStyleMod>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VarIdx) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStyleMod),
                "::",
                stringify!(VarIdx)
            )
        );
    }
    test_field_VarIdx();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiComboPreviewData {
    pub PreviewRect: ImRect,
    pub BackupCursorPos: ImVec2,
    pub BackupCursorMaxPos: ImVec2,
    pub BackupCursorPosPrevLine: ImVec2,
    pub BackupPrevLineTextBaseOffset: f32,
    pub BackupLayout: ImGuiLayoutType,
}
#[test]
fn bindgen_test_layout_ImGuiComboPreviewData() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiComboPreviewData>(),
        48usize,
        concat!("Size of: ", stringify!(ImGuiComboPreviewData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiComboPreviewData>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiComboPreviewData))
    );
    fn test_field_PreviewRect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiComboPreviewData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PreviewRect) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiComboPreviewData),
                "::",
                stringify!(PreviewRect)
            )
        );
    }
    test_field_PreviewRect();
    fn test_field_BackupCursorPos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiComboPreviewData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BackupCursorPos) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiComboPreviewData),
                "::",
                stringify!(BackupCursorPos)
            )
        );
    }
    test_field_BackupCursorPos();
    fn test_field_BackupCursorMaxPos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiComboPreviewData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BackupCursorMaxPos) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiComboPreviewData),
                "::",
                stringify!(BackupCursorMaxPos)
            )
        );
    }
    test_field_BackupCursorMaxPos();
    fn test_field_BackupCursorPosPrevLine() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiComboPreviewData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BackupCursorPosPrevLine) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiComboPreviewData),
                "::",
                stringify!(BackupCursorPosPrevLine)
            )
        );
    }
    test_field_BackupCursorPosPrevLine();
    fn test_field_BackupPrevLineTextBaseOffset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiComboPreviewData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BackupPrevLineTextBaseOffset) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiComboPreviewData),
                "::",
                stringify!(BackupPrevLineTextBaseOffset)
            )
        );
    }
    test_field_BackupPrevLineTextBaseOffset();
    fn test_field_BackupLayout() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiComboPreviewData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BackupLayout) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiComboPreviewData),
                "::",
                stringify!(BackupLayout)
            )
        );
    }
    test_field_BackupLayout();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiGroupData {
    pub WindowID: ImGuiID,
    pub BackupCursorPos: ImVec2,
    pub BackupCursorMaxPos: ImVec2,
    pub BackupIndent: ImVec1,
    pub BackupGroupOffset: ImVec1,
    pub BackupCurrLineSize: ImVec2,
    pub BackupCurrLineTextBaseOffset: f32,
    pub BackupActiveIdIsAlive: ImGuiID,
    pub BackupActiveIdPreviousFrameIsAlive: bool,
    pub BackupHoveredIdIsAlive: bool,
    pub EmitItem: bool,
}
#[test]
fn bindgen_test_layout_ImGuiGroupData() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiGroupData>(),
        48usize,
        concat!("Size of: ", stringify!(ImGuiGroupData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiGroupData>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiGroupData))
    );
    fn test_field_WindowID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiGroupData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WindowID) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiGroupData),
                "::",
                stringify!(WindowID)
            )
        );
    }
    test_field_WindowID();
    fn test_field_BackupCursorPos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiGroupData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BackupCursorPos) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiGroupData),
                "::",
                stringify!(BackupCursorPos)
            )
        );
    }
    test_field_BackupCursorPos();
    fn test_field_BackupCursorMaxPos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiGroupData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BackupCursorMaxPos) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiGroupData),
                "::",
                stringify!(BackupCursorMaxPos)
            )
        );
    }
    test_field_BackupCursorMaxPos();
    fn test_field_BackupIndent() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiGroupData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BackupIndent) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiGroupData),
                "::",
                stringify!(BackupIndent)
            )
        );
    }
    test_field_BackupIndent();
    fn test_field_BackupGroupOffset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiGroupData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BackupGroupOffset) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiGroupData),
                "::",
                stringify!(BackupGroupOffset)
            )
        );
    }
    test_field_BackupGroupOffset();
    fn test_field_BackupCurrLineSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiGroupData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BackupCurrLineSize) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiGroupData),
                "::",
                stringify!(BackupCurrLineSize)
            )
        );
    }
    test_field_BackupCurrLineSize();
    fn test_field_BackupCurrLineTextBaseOffset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiGroupData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BackupCurrLineTextBaseOffset) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiGroupData),
                "::",
                stringify!(BackupCurrLineTextBaseOffset)
            )
        );
    }
    test_field_BackupCurrLineTextBaseOffset();
    fn test_field_BackupActiveIdIsAlive() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiGroupData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BackupActiveIdIsAlive) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiGroupData),
                "::",
                stringify!(BackupActiveIdIsAlive)
            )
        );
    }
    test_field_BackupActiveIdIsAlive();
    fn test_field_BackupActiveIdPreviousFrameIsAlive() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiGroupData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BackupActiveIdPreviousFrameIsAlive) as usize
                    - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiGroupData),
                "::",
                stringify!(BackupActiveIdPreviousFrameIsAlive)
            )
        );
    }
    test_field_BackupActiveIdPreviousFrameIsAlive();
    fn test_field_BackupHoveredIdIsAlive() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiGroupData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BackupHoveredIdIsAlive) as usize - ptr as usize
            },
            45usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiGroupData),
                "::",
                stringify!(BackupHoveredIdIsAlive)
            )
        );
    }
    test_field_BackupHoveredIdIsAlive();
    fn test_field_EmitItem() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiGroupData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).EmitItem) as usize - ptr as usize
            },
            46usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiGroupData),
                "::",
                stringify!(EmitItem)
            )
        );
    }
    test_field_EmitItem();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiMenuColumns {
    pub TotalWidth: ImU32,
    pub NextTotalWidth: ImU32,
    pub Spacing: ImU16,
    pub OffsetIcon: ImU16,
    pub OffsetLabel: ImU16,
    pub OffsetShortcut: ImU16,
    pub OffsetMark: ImU16,
    pub Widths: [ImU16; 4usize],
}
#[test]
fn bindgen_test_layout_ImGuiMenuColumns() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiMenuColumns>(),
        28usize,
        concat!("Size of: ", stringify!(ImGuiMenuColumns))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiMenuColumns>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiMenuColumns))
    );
    fn test_field_TotalWidth() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiMenuColumns>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TotalWidth) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiMenuColumns),
                "::",
                stringify!(TotalWidth)
            )
        );
    }
    test_field_TotalWidth();
    fn test_field_NextTotalWidth() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiMenuColumns>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NextTotalWidth) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiMenuColumns),
                "::",
                stringify!(NextTotalWidth)
            )
        );
    }
    test_field_NextTotalWidth();
    fn test_field_Spacing() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiMenuColumns>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Spacing) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiMenuColumns),
                "::",
                stringify!(Spacing)
            )
        );
    }
    test_field_Spacing();
    fn test_field_OffsetIcon() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiMenuColumns>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).OffsetIcon) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiMenuColumns),
                "::",
                stringify!(OffsetIcon)
            )
        );
    }
    test_field_OffsetIcon();
    fn test_field_OffsetLabel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiMenuColumns>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).OffsetLabel) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiMenuColumns),
                "::",
                stringify!(OffsetLabel)
            )
        );
    }
    test_field_OffsetLabel();
    fn test_field_OffsetShortcut() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiMenuColumns>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).OffsetShortcut) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiMenuColumns),
                "::",
                stringify!(OffsetShortcut)
            )
        );
    }
    test_field_OffsetShortcut();
    fn test_field_OffsetMark() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiMenuColumns>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).OffsetMark) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiMenuColumns),
                "::",
                stringify!(OffsetMark)
            )
        );
    }
    test_field_OffsetMark();
    fn test_field_Widths() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiMenuColumns>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Widths) as usize - ptr as usize
            },
            18usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiMenuColumns),
                "::",
                stringify!(Widths)
            )
        );
    }
    test_field_Widths();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiInputTextState {
    pub ID: ImGuiID,
    pub CurLenW: ::std::os::raw::c_int,
    pub CurLenA: ::std::os::raw::c_int,
    pub TextW: ImVector_ImWchar,
    pub TextA: ImVector_char,
    pub InitialTextA: ImVector_char,
    pub TextAIsValid: bool,
    pub BufCapacityA: ::std::os::raw::c_int,
    pub ScrollX: f32,
    pub Stb: STB_TexteditState,
    pub CursorAnim: f32,
    pub CursorFollow: bool,
    pub SelectedAllMouseLock: bool,
    pub Edited: bool,
    pub Flags: ImGuiInputTextFlags,
}
#[test]
fn bindgen_test_layout_ImGuiInputTextState() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiInputTextState>(),
        3720usize,
        concat!("Size of: ", stringify!(ImGuiInputTextState))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiInputTextState>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiInputTextState))
    );
    fn test_field_ID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputTextState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ID) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputTextState),
                "::",
                stringify!(ID)
            )
        );
    }
    test_field_ID();
    fn test_field_CurLenW() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputTextState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CurLenW) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputTextState),
                "::",
                stringify!(CurLenW)
            )
        );
    }
    test_field_CurLenW();
    fn test_field_CurLenA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputTextState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CurLenA) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputTextState),
                "::",
                stringify!(CurLenA)
            )
        );
    }
    test_field_CurLenA();
    fn test_field_TextW() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputTextState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TextW) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputTextState),
                "::",
                stringify!(TextW)
            )
        );
    }
    test_field_TextW();
    fn test_field_TextA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputTextState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TextA) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputTextState),
                "::",
                stringify!(TextA)
            )
        );
    }
    test_field_TextA();
    fn test_field_InitialTextA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputTextState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).InitialTextA) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputTextState),
                "::",
                stringify!(InitialTextA)
            )
        );
    }
    test_field_InitialTextA();
    fn test_field_TextAIsValid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputTextState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TextAIsValid) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputTextState),
                "::",
                stringify!(TextAIsValid)
            )
        );
    }
    test_field_TextAIsValid();
    fn test_field_BufCapacityA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputTextState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BufCapacityA) as usize - ptr as usize
            },
            68usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputTextState),
                "::",
                stringify!(BufCapacityA)
            )
        );
    }
    test_field_BufCapacityA();
    fn test_field_ScrollX() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputTextState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ScrollX) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputTextState),
                "::",
                stringify!(ScrollX)
            )
        );
    }
    test_field_ScrollX();
    fn test_field_Stb() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputTextState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Stb) as usize - ptr as usize
            },
            76usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputTextState),
                "::",
                stringify!(Stb)
            )
        );
    }
    test_field_Stb();
    fn test_field_CursorAnim() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputTextState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CursorAnim) as usize - ptr as usize
            },
            3704usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputTextState),
                "::",
                stringify!(CursorAnim)
            )
        );
    }
    test_field_CursorAnim();
    fn test_field_CursorFollow() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputTextState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CursorFollow) as usize - ptr as usize
            },
            3708usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputTextState),
                "::",
                stringify!(CursorFollow)
            )
        );
    }
    test_field_CursorFollow();
    fn test_field_SelectedAllMouseLock() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputTextState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SelectedAllMouseLock) as usize - ptr as usize
            },
            3709usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputTextState),
                "::",
                stringify!(SelectedAllMouseLock)
            )
        );
    }
    test_field_SelectedAllMouseLock();
    fn test_field_Edited() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputTextState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Edited) as usize - ptr as usize
            },
            3710usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputTextState),
                "::",
                stringify!(Edited)
            )
        );
    }
    test_field_Edited();
    fn test_field_Flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputTextState>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize
            },
            3712usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputTextState),
                "::",
                stringify!(Flags)
            )
        );
    }
    test_field_Flags();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiPopupData {
    pub PopupId: ImGuiID,
    pub Window: *mut ImGuiWindow,
    pub SourceWindow: *mut ImGuiWindow,
    pub ParentNavLayer: ::std::os::raw::c_int,
    pub OpenFrameCount: ::std::os::raw::c_int,
    pub OpenParentId: ImGuiID,
    pub OpenPopupPos: ImVec2,
    pub OpenMousePos: ImVec2,
}
#[test]
fn bindgen_test_layout_ImGuiPopupData() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiPopupData>(),
        56usize,
        concat!("Size of: ", stringify!(ImGuiPopupData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiPopupData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiPopupData))
    );
    fn test_field_PopupId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPopupData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PopupId) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPopupData),
                "::",
                stringify!(PopupId)
            )
        );
    }
    test_field_PopupId();
    fn test_field_Window() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPopupData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Window) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPopupData),
                "::",
                stringify!(Window)
            )
        );
    }
    test_field_Window();
    fn test_field_SourceWindow() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPopupData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SourceWindow) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPopupData),
                "::",
                stringify!(SourceWindow)
            )
        );
    }
    test_field_SourceWindow();
    fn test_field_ParentNavLayer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPopupData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ParentNavLayer) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPopupData),
                "::",
                stringify!(ParentNavLayer)
            )
        );
    }
    test_field_ParentNavLayer();
    fn test_field_OpenFrameCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPopupData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).OpenFrameCount) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPopupData),
                "::",
                stringify!(OpenFrameCount)
            )
        );
    }
    test_field_OpenFrameCount();
    fn test_field_OpenParentId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPopupData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).OpenParentId) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPopupData),
                "::",
                stringify!(OpenParentId)
            )
        );
    }
    test_field_OpenParentId();
    fn test_field_OpenPopupPos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPopupData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).OpenPopupPos) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPopupData),
                "::",
                stringify!(OpenPopupPos)
            )
        );
    }
    test_field_OpenPopupPos();
    fn test_field_OpenMousePos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPopupData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).OpenMousePos) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPopupData),
                "::",
                stringify!(OpenMousePos)
            )
        );
    }
    test_field_OpenMousePos();
}
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_None: ImGuiNextWindowDataFlags_ = 0;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_HasPos: ImGuiNextWindowDataFlags_ = 1;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_HasSize: ImGuiNextWindowDataFlags_ = 2;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_HasContentSize:
    ImGuiNextWindowDataFlags_ = 4;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_HasCollapsed:
    ImGuiNextWindowDataFlags_ = 8;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_HasSizeConstraint:
    ImGuiNextWindowDataFlags_ = 16;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_HasFocus: ImGuiNextWindowDataFlags_ =
    32;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_HasBgAlpha: ImGuiNextWindowDataFlags_ =
    64;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_HasScroll: ImGuiNextWindowDataFlags_ =
    128;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_HasViewport:
    ImGuiNextWindowDataFlags_ = 256;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_HasDock: ImGuiNextWindowDataFlags_ =
    512;
pub const ImGuiNextWindowDataFlags__ImGuiNextWindowDataFlags_HasWindowClass:
    ImGuiNextWindowDataFlags_ = 1024;
pub type ImGuiNextWindowDataFlags_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiNextWindowData {
    pub Flags: ImGuiNextWindowDataFlags,
    pub PosCond: ImGuiCond,
    pub SizeCond: ImGuiCond,
    pub CollapsedCond: ImGuiCond,
    pub DockCond: ImGuiCond,
    pub PosVal: ImVec2,
    pub PosPivotVal: ImVec2,
    pub SizeVal: ImVec2,
    pub ContentSizeVal: ImVec2,
    pub ScrollVal: ImVec2,
    pub PosUndock: bool,
    pub CollapsedVal: bool,
    pub SizeConstraintRect: ImRect,
    pub SizeCallback: ImGuiSizeCallback,
    pub SizeCallbackUserData: *mut ::std::os::raw::c_void,
    pub BgAlphaVal: f32,
    pub ViewportId: ImGuiID,
    pub DockId: ImGuiID,
    pub WindowClass: ImGuiWindowClass,
    pub MenuBarOffsetMinVal: ImVec2,
}
#[test]
fn bindgen_test_layout_ImGuiNextWindowData() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiNextWindowData>(),
        144usize,
        concat!("Size of: ", stringify!(ImGuiNextWindowData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiNextWindowData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiNextWindowData))
    );
    fn test_field_Flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiNextWindowData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiNextWindowData),
                "::",
                stringify!(Flags)
            )
        );
    }
    test_field_Flags();
    fn test_field_PosCond() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiNextWindowData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PosCond) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiNextWindowData),
                "::",
                stringify!(PosCond)
            )
        );
    }
    test_field_PosCond();
    fn test_field_SizeCond() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiNextWindowData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SizeCond) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiNextWindowData),
                "::",
                stringify!(SizeCond)
            )
        );
    }
    test_field_SizeCond();
    fn test_field_CollapsedCond() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiNextWindowData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CollapsedCond) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiNextWindowData),
                "::",
                stringify!(CollapsedCond)
            )
        );
    }
    test_field_CollapsedCond();
    fn test_field_DockCond() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiNextWindowData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DockCond) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiNextWindowData),
                "::",
                stringify!(DockCond)
            )
        );
    }
    test_field_DockCond();
    fn test_field_PosVal() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiNextWindowData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PosVal) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiNextWindowData),
                "::",
                stringify!(PosVal)
            )
        );
    }
    test_field_PosVal();
    fn test_field_PosPivotVal() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiNextWindowData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PosPivotVal) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiNextWindowData),
                "::",
                stringify!(PosPivotVal)
            )
        );
    }
    test_field_PosPivotVal();
    fn test_field_SizeVal() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiNextWindowData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SizeVal) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiNextWindowData),
                "::",
                stringify!(SizeVal)
            )
        );
    }
    test_field_SizeVal();
    fn test_field_ContentSizeVal() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiNextWindowData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ContentSizeVal) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiNextWindowData),
                "::",
                stringify!(ContentSizeVal)
            )
        );
    }
    test_field_ContentSizeVal();
    fn test_field_ScrollVal() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiNextWindowData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ScrollVal) as usize - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiNextWindowData),
                "::",
                stringify!(ScrollVal)
            )
        );
    }
    test_field_ScrollVal();
    fn test_field_PosUndock() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiNextWindowData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PosUndock) as usize - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiNextWindowData),
                "::",
                stringify!(PosUndock)
            )
        );
    }
    test_field_PosUndock();
    fn test_field_CollapsedVal() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiNextWindowData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CollapsedVal) as usize - ptr as usize
            },
            61usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiNextWindowData),
                "::",
                stringify!(CollapsedVal)
            )
        );
    }
    test_field_CollapsedVal();
    fn test_field_SizeConstraintRect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiNextWindowData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SizeConstraintRect) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiNextWindowData),
                "::",
                stringify!(SizeConstraintRect)
            )
        );
    }
    test_field_SizeConstraintRect();
    fn test_field_SizeCallback() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiNextWindowData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SizeCallback) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiNextWindowData),
                "::",
                stringify!(SizeCallback)
            )
        );
    }
    test_field_SizeCallback();
    fn test_field_SizeCallbackUserData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiNextWindowData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SizeCallbackUserData) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiNextWindowData),
                "::",
                stringify!(SizeCallbackUserData)
            )
        );
    }
    test_field_SizeCallbackUserData();
    fn test_field_BgAlphaVal() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiNextWindowData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BgAlphaVal) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiNextWindowData),
                "::",
                stringify!(BgAlphaVal)
            )
        );
    }
    test_field_BgAlphaVal();
    fn test_field_ViewportId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiNextWindowData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ViewportId) as usize - ptr as usize
            },
            100usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiNextWindowData),
                "::",
                stringify!(ViewportId)
            )
        );
    }
    test_field_ViewportId();
    fn test_field_DockId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiNextWindowData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DockId) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiNextWindowData),
                "::",
                stringify!(DockId)
            )
        );
    }
    test_field_DockId();
    fn test_field_WindowClass() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiNextWindowData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WindowClass) as usize - ptr as usize
            },
            108usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiNextWindowData),
                "::",
                stringify!(WindowClass)
            )
        );
    }
    test_field_WindowClass();
    fn test_field_MenuBarOffsetMinVal() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiNextWindowData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MenuBarOffsetMinVal) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiNextWindowData),
                "::",
                stringify!(MenuBarOffsetMinVal)
            )
        );
    }
    test_field_MenuBarOffsetMinVal();
}
pub const ImGuiNextItemDataFlags__ImGuiNextItemDataFlags_None: ImGuiNextItemDataFlags_ = 0;
pub const ImGuiNextItemDataFlags__ImGuiNextItemDataFlags_HasWidth: ImGuiNextItemDataFlags_ = 1;
pub const ImGuiNextItemDataFlags__ImGuiNextItemDataFlags_HasOpen: ImGuiNextItemDataFlags_ = 2;
pub type ImGuiNextItemDataFlags_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiNextItemData {
    pub Flags: ImGuiNextItemDataFlags,
    pub Width: f32,
    pub FocusScopeId: ImGuiID,
    pub OpenCond: ImGuiCond,
    pub OpenVal: bool,
}
#[test]
fn bindgen_test_layout_ImGuiNextItemData() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiNextItemData>(),
        20usize,
        concat!("Size of: ", stringify!(ImGuiNextItemData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiNextItemData>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiNextItemData))
    );
    fn test_field_Flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiNextItemData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiNextItemData),
                "::",
                stringify!(Flags)
            )
        );
    }
    test_field_Flags();
    fn test_field_Width() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiNextItemData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Width) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiNextItemData),
                "::",
                stringify!(Width)
            )
        );
    }
    test_field_Width();
    fn test_field_FocusScopeId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiNextItemData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FocusScopeId) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiNextItemData),
                "::",
                stringify!(FocusScopeId)
            )
        );
    }
    test_field_FocusScopeId();
    fn test_field_OpenCond() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiNextItemData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).OpenCond) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiNextItemData),
                "::",
                stringify!(OpenCond)
            )
        );
    }
    test_field_OpenCond();
    fn test_field_OpenVal() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiNextItemData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).OpenVal) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiNextItemData),
                "::",
                stringify!(OpenVal)
            )
        );
    }
    test_field_OpenVal();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiLastItemData {
    pub ID: ImGuiID,
    pub InFlags: ImGuiItemFlags,
    pub StatusFlags: ImGuiItemStatusFlags,
    pub Rect: ImRect,
    pub NavRect: ImRect,
    pub DisplayRect: ImRect,
}
#[test]
fn bindgen_test_layout_ImGuiLastItemData() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiLastItemData>(),
        60usize,
        concat!("Size of: ", stringify!(ImGuiLastItemData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiLastItemData>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiLastItemData))
    );
    fn test_field_ID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiLastItemData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ID) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiLastItemData),
                "::",
                stringify!(ID)
            )
        );
    }
    test_field_ID();
    fn test_field_InFlags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiLastItemData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).InFlags) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiLastItemData),
                "::",
                stringify!(InFlags)
            )
        );
    }
    test_field_InFlags();
    fn test_field_StatusFlags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiLastItemData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).StatusFlags) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiLastItemData),
                "::",
                stringify!(StatusFlags)
            )
        );
    }
    test_field_StatusFlags();
    fn test_field_Rect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiLastItemData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Rect) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiLastItemData),
                "::",
                stringify!(Rect)
            )
        );
    }
    test_field_Rect();
    fn test_field_NavRect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiLastItemData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavRect) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiLastItemData),
                "::",
                stringify!(NavRect)
            )
        );
    }
    test_field_NavRect();
    fn test_field_DisplayRect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiLastItemData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DisplayRect) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiLastItemData),
                "::",
                stringify!(DisplayRect)
            )
        );
    }
    test_field_DisplayRect();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiStackSizes {
    pub SizeOfIDStack: ::std::os::raw::c_short,
    pub SizeOfColorStack: ::std::os::raw::c_short,
    pub SizeOfStyleVarStack: ::std::os::raw::c_short,
    pub SizeOfFontStack: ::std::os::raw::c_short,
    pub SizeOfFocusScopeStack: ::std::os::raw::c_short,
    pub SizeOfGroupStack: ::std::os::raw::c_short,
    pub SizeOfItemFlagsStack: ::std::os::raw::c_short,
    pub SizeOfBeginPopupStack: ::std::os::raw::c_short,
    pub SizeOfDisabledStack: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_ImGuiStackSizes() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiStackSizes>(),
        18usize,
        concat!("Size of: ", stringify!(ImGuiStackSizes))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiStackSizes>(),
        2usize,
        concat!("Alignment of ", stringify!(ImGuiStackSizes))
    );
    fn test_field_SizeOfIDStack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStackSizes>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SizeOfIDStack) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStackSizes),
                "::",
                stringify!(SizeOfIDStack)
            )
        );
    }
    test_field_SizeOfIDStack();
    fn test_field_SizeOfColorStack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStackSizes>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SizeOfColorStack) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStackSizes),
                "::",
                stringify!(SizeOfColorStack)
            )
        );
    }
    test_field_SizeOfColorStack();
    fn test_field_SizeOfStyleVarStack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStackSizes>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SizeOfStyleVarStack) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStackSizes),
                "::",
                stringify!(SizeOfStyleVarStack)
            )
        );
    }
    test_field_SizeOfStyleVarStack();
    fn test_field_SizeOfFontStack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStackSizes>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SizeOfFontStack) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStackSizes),
                "::",
                stringify!(SizeOfFontStack)
            )
        );
    }
    test_field_SizeOfFontStack();
    fn test_field_SizeOfFocusScopeStack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStackSizes>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SizeOfFocusScopeStack) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStackSizes),
                "::",
                stringify!(SizeOfFocusScopeStack)
            )
        );
    }
    test_field_SizeOfFocusScopeStack();
    fn test_field_SizeOfGroupStack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStackSizes>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SizeOfGroupStack) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStackSizes),
                "::",
                stringify!(SizeOfGroupStack)
            )
        );
    }
    test_field_SizeOfGroupStack();
    fn test_field_SizeOfItemFlagsStack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStackSizes>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SizeOfItemFlagsStack) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStackSizes),
                "::",
                stringify!(SizeOfItemFlagsStack)
            )
        );
    }
    test_field_SizeOfItemFlagsStack();
    fn test_field_SizeOfBeginPopupStack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStackSizes>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SizeOfBeginPopupStack) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStackSizes),
                "::",
                stringify!(SizeOfBeginPopupStack)
            )
        );
    }
    test_field_SizeOfBeginPopupStack();
    fn test_field_SizeOfDisabledStack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStackSizes>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SizeOfDisabledStack) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStackSizes),
                "::",
                stringify!(SizeOfDisabledStack)
            )
        );
    }
    test_field_SizeOfDisabledStack();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiWindowStackData {
    pub Window: *mut ImGuiWindow,
    pub ParentLastItemDataBackup: ImGuiLastItemData,
    pub StackSizesOnBegin: ImGuiStackSizes,
}
#[test]
fn bindgen_test_layout_ImGuiWindowStackData() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiWindowStackData>(),
        88usize,
        concat!("Size of: ", stringify!(ImGuiWindowStackData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiWindowStackData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiWindowStackData))
    );
    fn test_field_Window() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowStackData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Window) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowStackData),
                "::",
                stringify!(Window)
            )
        );
    }
    test_field_Window();
    fn test_field_ParentLastItemDataBackup() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowStackData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ParentLastItemDataBackup) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowStackData),
                "::",
                stringify!(ParentLastItemDataBackup)
            )
        );
    }
    test_field_ParentLastItemDataBackup();
    fn test_field_StackSizesOnBegin() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowStackData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).StackSizesOnBegin) as usize - ptr as usize
            },
            68usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowStackData),
                "::",
                stringify!(StackSizesOnBegin)
            )
        );
    }
    test_field_StackSizesOnBegin();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiShrinkWidthItem {
    pub Index: ::std::os::raw::c_int,
    pub Width: f32,
    pub InitialWidth: f32,
}
#[test]
fn bindgen_test_layout_ImGuiShrinkWidthItem() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiShrinkWidthItem>(),
        12usize,
        concat!("Size of: ", stringify!(ImGuiShrinkWidthItem))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiShrinkWidthItem>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiShrinkWidthItem))
    );
    fn test_field_Index() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiShrinkWidthItem>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Index) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiShrinkWidthItem),
                "::",
                stringify!(Index)
            )
        );
    }
    test_field_Index();
    fn test_field_Width() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiShrinkWidthItem>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Width) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiShrinkWidthItem),
                "::",
                stringify!(Width)
            )
        );
    }
    test_field_Width();
    fn test_field_InitialWidth() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiShrinkWidthItem>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).InitialWidth) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiShrinkWidthItem),
                "::",
                stringify!(InitialWidth)
            )
        );
    }
    test_field_InitialWidth();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiPtrOrIndex {
    pub Ptr: *mut ::std::os::raw::c_void,
    pub Index: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ImGuiPtrOrIndex() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiPtrOrIndex>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiPtrOrIndex))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiPtrOrIndex>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiPtrOrIndex))
    );
    fn test_field_Ptr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPtrOrIndex>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Ptr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPtrOrIndex),
                "::",
                stringify!(Ptr)
            )
        );
    }
    test_field_Ptr();
    fn test_field_Index() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiPtrOrIndex>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Index) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiPtrOrIndex),
                "::",
                stringify!(Index)
            )
        );
    }
    test_field_Index();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN {
    pub Storage: [ImU32; 5usize],
}
#[test]
fn bindgen_test_layout_ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN() {
    assert_eq!(
        ::std::mem::size_of::<ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN>(),
        20usize,
        concat!(
            "Size of: ",
            stringify!(ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN)
        )
    );
    fn test_field_Storage() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Storage) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN),
                "::",
                stringify!(Storage)
            )
        );
    }
    test_field_Storage();
}
pub type ImBitArrayForNamedKeys = ImBitArray_ImGuiKey_NamedKey_COUNT__lessImGuiKey_NamedKey_BEGIN;
pub const ImGuiKeyPrivate__ImGuiKey_LegacyNativeKey_BEGIN: ImGuiKeyPrivate_ = 0;
pub const ImGuiKeyPrivate__ImGuiKey_LegacyNativeKey_END: ImGuiKeyPrivate_ = 512;
pub const ImGuiKeyPrivate__ImGuiKey_Gamepad_BEGIN: ImGuiKeyPrivate_ = 617;
pub const ImGuiKeyPrivate__ImGuiKey_Gamepad_END: ImGuiKeyPrivate_ = 641;
pub type ImGuiKeyPrivate_ = ::std::os::raw::c_int;
pub const ImGuiInputEventType_ImGuiInputEventType_None: ImGuiInputEventType = 0;
pub const ImGuiInputEventType_ImGuiInputEventType_MousePos: ImGuiInputEventType = 1;
pub const ImGuiInputEventType_ImGuiInputEventType_MouseWheel: ImGuiInputEventType = 2;
pub const ImGuiInputEventType_ImGuiInputEventType_MouseButton: ImGuiInputEventType = 3;
pub const ImGuiInputEventType_ImGuiInputEventType_MouseViewport: ImGuiInputEventType = 4;
pub const ImGuiInputEventType_ImGuiInputEventType_Key: ImGuiInputEventType = 5;
pub const ImGuiInputEventType_ImGuiInputEventType_Text: ImGuiInputEventType = 6;
pub const ImGuiInputEventType_ImGuiInputEventType_Focus: ImGuiInputEventType = 7;
pub const ImGuiInputEventType_ImGuiInputEventType_COUNT: ImGuiInputEventType = 8;
pub type ImGuiInputEventType = ::std::os::raw::c_int;
pub const ImGuiInputSource_ImGuiInputSource_None: ImGuiInputSource = 0;
pub const ImGuiInputSource_ImGuiInputSource_Mouse: ImGuiInputSource = 1;
pub const ImGuiInputSource_ImGuiInputSource_Keyboard: ImGuiInputSource = 2;
pub const ImGuiInputSource_ImGuiInputSource_Gamepad: ImGuiInputSource = 3;
pub const ImGuiInputSource_ImGuiInputSource_Clipboard: ImGuiInputSource = 4;
pub const ImGuiInputSource_ImGuiInputSource_Nav: ImGuiInputSource = 5;
pub const ImGuiInputSource_ImGuiInputSource_COUNT: ImGuiInputSource = 6;
pub type ImGuiInputSource = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiInputEventMousePos {
    pub PosX: f32,
    pub PosY: f32,
}
#[test]
fn bindgen_test_layout_ImGuiInputEventMousePos() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiInputEventMousePos>(),
        8usize,
        concat!("Size of: ", stringify!(ImGuiInputEventMousePos))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiInputEventMousePos>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiInputEventMousePos))
    );
    fn test_field_PosX() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputEventMousePos>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PosX) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputEventMousePos),
                "::",
                stringify!(PosX)
            )
        );
    }
    test_field_PosX();
    fn test_field_PosY() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputEventMousePos>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PosY) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputEventMousePos),
                "::",
                stringify!(PosY)
            )
        );
    }
    test_field_PosY();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiInputEventMouseWheel {
    pub WheelX: f32,
    pub WheelY: f32,
}
#[test]
fn bindgen_test_layout_ImGuiInputEventMouseWheel() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiInputEventMouseWheel>(),
        8usize,
        concat!("Size of: ", stringify!(ImGuiInputEventMouseWheel))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiInputEventMouseWheel>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiInputEventMouseWheel))
    );
    fn test_field_WheelX() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputEventMouseWheel>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WheelX) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputEventMouseWheel),
                "::",
                stringify!(WheelX)
            )
        );
    }
    test_field_WheelX();
    fn test_field_WheelY() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputEventMouseWheel>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WheelY) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputEventMouseWheel),
                "::",
                stringify!(WheelY)
            )
        );
    }
    test_field_WheelY();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiInputEventMouseButton {
    pub Button: ::std::os::raw::c_int,
    pub Down: bool,
}
#[test]
fn bindgen_test_layout_ImGuiInputEventMouseButton() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiInputEventMouseButton>(),
        8usize,
        concat!("Size of: ", stringify!(ImGuiInputEventMouseButton))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiInputEventMouseButton>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiInputEventMouseButton))
    );
    fn test_field_Button() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputEventMouseButton>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Button) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputEventMouseButton),
                "::",
                stringify!(Button)
            )
        );
    }
    test_field_Button();
    fn test_field_Down() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputEventMouseButton>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Down) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputEventMouseButton),
                "::",
                stringify!(Down)
            )
        );
    }
    test_field_Down();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiInputEventMouseViewport {
    pub HoveredViewportID: ImGuiID,
}
#[test]
fn bindgen_test_layout_ImGuiInputEventMouseViewport() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiInputEventMouseViewport>(),
        4usize,
        concat!("Size of: ", stringify!(ImGuiInputEventMouseViewport))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiInputEventMouseViewport>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiInputEventMouseViewport))
    );
    fn test_field_HoveredViewportID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputEventMouseViewport>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HoveredViewportID) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputEventMouseViewport),
                "::",
                stringify!(HoveredViewportID)
            )
        );
    }
    test_field_HoveredViewportID();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiInputEventKey {
    pub Key: ImGuiKey,
    pub Down: bool,
    pub AnalogValue: f32,
}
#[test]
fn bindgen_test_layout_ImGuiInputEventKey() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiInputEventKey>(),
        12usize,
        concat!("Size of: ", stringify!(ImGuiInputEventKey))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiInputEventKey>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiInputEventKey))
    );
    fn test_field_Key() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputEventKey>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Key) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputEventKey),
                "::",
                stringify!(Key)
            )
        );
    }
    test_field_Key();
    fn test_field_Down() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputEventKey>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Down) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputEventKey),
                "::",
                stringify!(Down)
            )
        );
    }
    test_field_Down();
    fn test_field_AnalogValue() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputEventKey>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AnalogValue) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputEventKey),
                "::",
                stringify!(AnalogValue)
            )
        );
    }
    test_field_AnalogValue();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiInputEventText {
    pub Char: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_ImGuiInputEventText() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiInputEventText>(),
        4usize,
        concat!("Size of: ", stringify!(ImGuiInputEventText))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiInputEventText>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiInputEventText))
    );
    fn test_field_Char() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputEventText>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Char) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputEventText),
                "::",
                stringify!(Char)
            )
        );
    }
    test_field_Char();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiInputEventAppFocused {
    pub Focused: bool,
}
#[test]
fn bindgen_test_layout_ImGuiInputEventAppFocused() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiInputEventAppFocused>(),
        1usize,
        concat!("Size of: ", stringify!(ImGuiInputEventAppFocused))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiInputEventAppFocused>(),
        1usize,
        concat!("Alignment of ", stringify!(ImGuiInputEventAppFocused))
    );
    fn test_field_Focused() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputEventAppFocused>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Focused) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputEventAppFocused),
                "::",
                stringify!(Focused)
            )
        );
    }
    test_field_Focused();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ImGuiInputEvent {
    pub Type: ImGuiInputEventType,
    pub Source: ImGuiInputSource,
    pub __bindgen_anon_1: ImGuiInputEvent__bindgen_ty_1,
    pub AddedByTestEngine: bool,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ImGuiInputEvent__bindgen_ty_1 {
    pub MousePos: ImGuiInputEventMousePos,
    pub MouseWheel: ImGuiInputEventMouseWheel,
    pub MouseButton: ImGuiInputEventMouseButton,
    pub MouseViewport: ImGuiInputEventMouseViewport,
    pub Key: ImGuiInputEventKey,
    pub Text: ImGuiInputEventText,
    pub AppFocused: ImGuiInputEventAppFocused,
}
#[test]
fn bindgen_test_layout_ImGuiInputEvent__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiInputEvent__bindgen_ty_1>(),
        12usize,
        concat!("Size of: ", stringify!(ImGuiInputEvent__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiInputEvent__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiInputEvent__bindgen_ty_1))
    );
    fn test_field_MousePos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputEvent__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MousePos) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputEvent__bindgen_ty_1),
                "::",
                stringify!(MousePos)
            )
        );
    }
    test_field_MousePos();
    fn test_field_MouseWheel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputEvent__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MouseWheel) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputEvent__bindgen_ty_1),
                "::",
                stringify!(MouseWheel)
            )
        );
    }
    test_field_MouseWheel();
    fn test_field_MouseButton() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputEvent__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MouseButton) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputEvent__bindgen_ty_1),
                "::",
                stringify!(MouseButton)
            )
        );
    }
    test_field_MouseButton();
    fn test_field_MouseViewport() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputEvent__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MouseViewport) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputEvent__bindgen_ty_1),
                "::",
                stringify!(MouseViewport)
            )
        );
    }
    test_field_MouseViewport();
    fn test_field_Key() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputEvent__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Key) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputEvent__bindgen_ty_1),
                "::",
                stringify!(Key)
            )
        );
    }
    test_field_Key();
    fn test_field_Text() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputEvent__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Text) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputEvent__bindgen_ty_1),
                "::",
                stringify!(Text)
            )
        );
    }
    test_field_Text();
    fn test_field_AppFocused() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputEvent__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AppFocused) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputEvent__bindgen_ty_1),
                "::",
                stringify!(AppFocused)
            )
        );
    }
    test_field_AppFocused();
}
#[test]
fn bindgen_test_layout_ImGuiInputEvent() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiInputEvent>(),
        24usize,
        concat!("Size of: ", stringify!(ImGuiInputEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiInputEvent>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiInputEvent))
    );
    fn test_field_Type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputEvent>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputEvent),
                "::",
                stringify!(Type)
            )
        );
    }
    test_field_Type();
    fn test_field_Source() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputEvent>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Source) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputEvent),
                "::",
                stringify!(Source)
            )
        );
    }
    test_field_Source();
    fn test_field_AddedByTestEngine() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiInputEvent>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AddedByTestEngine) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiInputEvent),
                "::",
                stringify!(AddedByTestEngine)
            )
        );
    }
    test_field_AddedByTestEngine();
}
pub const ImGuiNavReadMode_ImGuiNavReadMode_Down: ImGuiNavReadMode = 0;
pub const ImGuiNavReadMode_ImGuiNavReadMode_Pressed: ImGuiNavReadMode = 1;
pub const ImGuiNavReadMode_ImGuiNavReadMode_Released: ImGuiNavReadMode = 2;
pub const ImGuiNavReadMode_ImGuiNavReadMode_Repeat: ImGuiNavReadMode = 3;
pub const ImGuiNavReadMode_ImGuiNavReadMode_RepeatSlow: ImGuiNavReadMode = 4;
pub const ImGuiNavReadMode_ImGuiNavReadMode_RepeatFast: ImGuiNavReadMode = 5;
pub type ImGuiNavReadMode = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiListClipperRange {
    pub Min: ::std::os::raw::c_int,
    pub Max: ::std::os::raw::c_int,
    pub PosToIndexConvert: bool,
    pub PosToIndexOffsetMin: ImS8,
    pub PosToIndexOffsetMax: ImS8,
}
#[test]
fn bindgen_test_layout_ImGuiListClipperRange() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiListClipperRange>(),
        12usize,
        concat!("Size of: ", stringify!(ImGuiListClipperRange))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiListClipperRange>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiListClipperRange))
    );
    fn test_field_Min() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiListClipperRange>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Min) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiListClipperRange),
                "::",
                stringify!(Min)
            )
        );
    }
    test_field_Min();
    fn test_field_Max() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiListClipperRange>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Max) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiListClipperRange),
                "::",
                stringify!(Max)
            )
        );
    }
    test_field_Max();
    fn test_field_PosToIndexConvert() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiListClipperRange>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PosToIndexConvert) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiListClipperRange),
                "::",
                stringify!(PosToIndexConvert)
            )
        );
    }
    test_field_PosToIndexConvert();
    fn test_field_PosToIndexOffsetMin() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiListClipperRange>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PosToIndexOffsetMin) as usize - ptr as usize
            },
            9usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiListClipperRange),
                "::",
                stringify!(PosToIndexOffsetMin)
            )
        );
    }
    test_field_PosToIndexOffsetMin();
    fn test_field_PosToIndexOffsetMax() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiListClipperRange>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PosToIndexOffsetMax) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiListClipperRange),
                "::",
                stringify!(PosToIndexOffsetMax)
            )
        );
    }
    test_field_PosToIndexOffsetMax();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiListClipperRange {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiListClipperRange,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiListClipperRange() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiListClipperRange>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiListClipperRange))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiListClipperRange>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiListClipperRange))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiListClipperRange>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiListClipperRange),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiListClipperRange>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiListClipperRange),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiListClipperRange>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiListClipperRange),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiListClipperData {
    pub ListClipper: *mut ImGuiListClipper,
    pub LossynessOffset: f32,
    pub StepNo: ::std::os::raw::c_int,
    pub ItemsFrozen: ::std::os::raw::c_int,
    pub Ranges: ImVector_ImGuiListClipperRange,
}
#[test]
fn bindgen_test_layout_ImGuiListClipperData() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiListClipperData>(),
        40usize,
        concat!("Size of: ", stringify!(ImGuiListClipperData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiListClipperData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiListClipperData))
    );
    fn test_field_ListClipper() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiListClipperData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ListClipper) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiListClipperData),
                "::",
                stringify!(ListClipper)
            )
        );
    }
    test_field_ListClipper();
    fn test_field_LossynessOffset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiListClipperData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LossynessOffset) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiListClipperData),
                "::",
                stringify!(LossynessOffset)
            )
        );
    }
    test_field_LossynessOffset();
    fn test_field_StepNo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiListClipperData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).StepNo) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiListClipperData),
                "::",
                stringify!(StepNo)
            )
        );
    }
    test_field_StepNo();
    fn test_field_ItemsFrozen() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiListClipperData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ItemsFrozen) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiListClipperData),
                "::",
                stringify!(ItemsFrozen)
            )
        );
    }
    test_field_ItemsFrozen();
    fn test_field_Ranges() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiListClipperData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Ranges) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiListClipperData),
                "::",
                stringify!(Ranges)
            )
        );
    }
    test_field_Ranges();
}
pub const ImGuiActivateFlags__ImGuiActivateFlags_None: ImGuiActivateFlags_ = 0;
pub const ImGuiActivateFlags__ImGuiActivateFlags_PreferInput: ImGuiActivateFlags_ = 1;
pub const ImGuiActivateFlags__ImGuiActivateFlags_PreferTweak: ImGuiActivateFlags_ = 2;
pub const ImGuiActivateFlags__ImGuiActivateFlags_TryToPreserveState: ImGuiActivateFlags_ = 4;
pub type ImGuiActivateFlags_ = ::std::os::raw::c_int;
pub const ImGuiScrollFlags__ImGuiScrollFlags_None: ImGuiScrollFlags_ = 0;
pub const ImGuiScrollFlags__ImGuiScrollFlags_KeepVisibleEdgeX: ImGuiScrollFlags_ = 1;
pub const ImGuiScrollFlags__ImGuiScrollFlags_KeepVisibleEdgeY: ImGuiScrollFlags_ = 2;
pub const ImGuiScrollFlags__ImGuiScrollFlags_KeepVisibleCenterX: ImGuiScrollFlags_ = 4;
pub const ImGuiScrollFlags__ImGuiScrollFlags_KeepVisibleCenterY: ImGuiScrollFlags_ = 8;
pub const ImGuiScrollFlags__ImGuiScrollFlags_AlwaysCenterX: ImGuiScrollFlags_ = 16;
pub const ImGuiScrollFlags__ImGuiScrollFlags_AlwaysCenterY: ImGuiScrollFlags_ = 32;
pub const ImGuiScrollFlags__ImGuiScrollFlags_NoScrollParent: ImGuiScrollFlags_ = 64;
pub const ImGuiScrollFlags__ImGuiScrollFlags_MaskX_: ImGuiScrollFlags_ = 21;
pub const ImGuiScrollFlags__ImGuiScrollFlags_MaskY_: ImGuiScrollFlags_ = 42;
pub type ImGuiScrollFlags_ = ::std::os::raw::c_int;
pub const ImGuiNavHighlightFlags__ImGuiNavHighlightFlags_None: ImGuiNavHighlightFlags_ = 0;
pub const ImGuiNavHighlightFlags__ImGuiNavHighlightFlags_TypeDefault: ImGuiNavHighlightFlags_ = 1;
pub const ImGuiNavHighlightFlags__ImGuiNavHighlightFlags_TypeThin: ImGuiNavHighlightFlags_ = 2;
pub const ImGuiNavHighlightFlags__ImGuiNavHighlightFlags_AlwaysDraw: ImGuiNavHighlightFlags_ = 4;
pub const ImGuiNavHighlightFlags__ImGuiNavHighlightFlags_NoRounding: ImGuiNavHighlightFlags_ = 8;
pub type ImGuiNavHighlightFlags_ = ::std::os::raw::c_int;
pub const ImGuiNavDirSourceFlags__ImGuiNavDirSourceFlags_None: ImGuiNavDirSourceFlags_ = 0;
pub const ImGuiNavDirSourceFlags__ImGuiNavDirSourceFlags_RawKeyboard: ImGuiNavDirSourceFlags_ = 1;
pub const ImGuiNavDirSourceFlags__ImGuiNavDirSourceFlags_Keyboard: ImGuiNavDirSourceFlags_ = 2;
pub const ImGuiNavDirSourceFlags__ImGuiNavDirSourceFlags_PadDPad: ImGuiNavDirSourceFlags_ = 4;
pub const ImGuiNavDirSourceFlags__ImGuiNavDirSourceFlags_PadLStick: ImGuiNavDirSourceFlags_ = 8;
pub type ImGuiNavDirSourceFlags_ = ::std::os::raw::c_int;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_None: ImGuiNavMoveFlags_ = 0;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_LoopX: ImGuiNavMoveFlags_ = 1;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_LoopY: ImGuiNavMoveFlags_ = 2;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_WrapX: ImGuiNavMoveFlags_ = 4;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_WrapY: ImGuiNavMoveFlags_ = 8;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_AllowCurrentNavId: ImGuiNavMoveFlags_ = 16;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_AlsoScoreVisibleSet: ImGuiNavMoveFlags_ = 32;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_ScrollToEdgeY: ImGuiNavMoveFlags_ = 64;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_Forwarded: ImGuiNavMoveFlags_ = 128;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_DebugNoResult: ImGuiNavMoveFlags_ = 256;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_FocusApi: ImGuiNavMoveFlags_ = 512;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_Tabbing: ImGuiNavMoveFlags_ = 1024;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_Activate: ImGuiNavMoveFlags_ = 2048;
pub const ImGuiNavMoveFlags__ImGuiNavMoveFlags_DontSetNavHighlight: ImGuiNavMoveFlags_ = 4096;
pub type ImGuiNavMoveFlags_ = ::std::os::raw::c_int;
pub const ImGuiNavLayer_ImGuiNavLayer_Main: ImGuiNavLayer = 0;
pub const ImGuiNavLayer_ImGuiNavLayer_Menu: ImGuiNavLayer = 1;
pub const ImGuiNavLayer_ImGuiNavLayer_COUNT: ImGuiNavLayer = 2;
pub type ImGuiNavLayer = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiNavItemData {
    pub Window: *mut ImGuiWindow,
    pub ID: ImGuiID,
    pub FocusScopeId: ImGuiID,
    pub RectRel: ImRect,
    pub InFlags: ImGuiItemFlags,
    pub DistBox: f32,
    pub DistCenter: f32,
    pub DistAxial: f32,
}
#[test]
fn bindgen_test_layout_ImGuiNavItemData() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiNavItemData>(),
        48usize,
        concat!("Size of: ", stringify!(ImGuiNavItemData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiNavItemData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiNavItemData))
    );
    fn test_field_Window() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiNavItemData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Window) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiNavItemData),
                "::",
                stringify!(Window)
            )
        );
    }
    test_field_Window();
    fn test_field_ID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiNavItemData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ID) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiNavItemData),
                "::",
                stringify!(ID)
            )
        );
    }
    test_field_ID();
    fn test_field_FocusScopeId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiNavItemData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FocusScopeId) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiNavItemData),
                "::",
                stringify!(FocusScopeId)
            )
        );
    }
    test_field_FocusScopeId();
    fn test_field_RectRel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiNavItemData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RectRel) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiNavItemData),
                "::",
                stringify!(RectRel)
            )
        );
    }
    test_field_RectRel();
    fn test_field_InFlags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiNavItemData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).InFlags) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiNavItemData),
                "::",
                stringify!(InFlags)
            )
        );
    }
    test_field_InFlags();
    fn test_field_DistBox() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiNavItemData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DistBox) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiNavItemData),
                "::",
                stringify!(DistBox)
            )
        );
    }
    test_field_DistBox();
    fn test_field_DistCenter() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiNavItemData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DistCenter) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiNavItemData),
                "::",
                stringify!(DistCenter)
            )
        );
    }
    test_field_DistCenter();
    fn test_field_DistAxial() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiNavItemData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DistAxial) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiNavItemData),
                "::",
                stringify!(DistAxial)
            )
        );
    }
    test_field_DistAxial();
}
pub const ImGuiOldColumnFlags__ImGuiOldColumnFlags_None: ImGuiOldColumnFlags_ = 0;
pub const ImGuiOldColumnFlags__ImGuiOldColumnFlags_NoBorder: ImGuiOldColumnFlags_ = 1;
pub const ImGuiOldColumnFlags__ImGuiOldColumnFlags_NoResize: ImGuiOldColumnFlags_ = 2;
pub const ImGuiOldColumnFlags__ImGuiOldColumnFlags_NoPreserveWidths: ImGuiOldColumnFlags_ = 4;
pub const ImGuiOldColumnFlags__ImGuiOldColumnFlags_NoForceWithinWindow: ImGuiOldColumnFlags_ = 8;
pub const ImGuiOldColumnFlags__ImGuiOldColumnFlags_GrowParentContentsSize: ImGuiOldColumnFlags_ =
    16;
pub type ImGuiOldColumnFlags_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiOldColumnData {
    pub OffsetNorm: f32,
    pub OffsetNormBeforeResize: f32,
    pub Flags: ImGuiOldColumnFlags,
    pub ClipRect: ImRect,
}
#[test]
fn bindgen_test_layout_ImGuiOldColumnData() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiOldColumnData>(),
        28usize,
        concat!("Size of: ", stringify!(ImGuiOldColumnData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiOldColumnData>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiOldColumnData))
    );
    fn test_field_OffsetNorm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiOldColumnData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).OffsetNorm) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiOldColumnData),
                "::",
                stringify!(OffsetNorm)
            )
        );
    }
    test_field_OffsetNorm();
    fn test_field_OffsetNormBeforeResize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiOldColumnData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).OffsetNormBeforeResize) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiOldColumnData),
                "::",
                stringify!(OffsetNormBeforeResize)
            )
        );
    }
    test_field_OffsetNormBeforeResize();
    fn test_field_Flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiOldColumnData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiOldColumnData),
                "::",
                stringify!(Flags)
            )
        );
    }
    test_field_Flags();
    fn test_field_ClipRect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiOldColumnData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ClipRect) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiOldColumnData),
                "::",
                stringify!(ClipRect)
            )
        );
    }
    test_field_ClipRect();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiOldColumnData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiOldColumnData,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiOldColumnData() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiOldColumnData>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiOldColumnData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiOldColumnData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiOldColumnData))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiOldColumnData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiOldColumnData),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiOldColumnData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiOldColumnData),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiOldColumnData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiOldColumnData),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiOldColumns {
    pub ID: ImGuiID,
    pub Flags: ImGuiOldColumnFlags,
    pub IsFirstFrame: bool,
    pub IsBeingResized: bool,
    pub Current: ::std::os::raw::c_int,
    pub Count: ::std::os::raw::c_int,
    pub OffMinX: f32,
    pub OffMaxX: f32,
    pub LineMinY: f32,
    pub LineMaxY: f32,
    pub HostCursorPosY: f32,
    pub HostCursorMaxPosX: f32,
    pub HostInitialClipRect: ImRect,
    pub HostBackupClipRect: ImRect,
    pub HostBackupParentWorkRect: ImRect,
    pub Columns: ImVector_ImGuiOldColumnData,
    pub Splitter: ImDrawListSplitter,
}
#[test]
fn bindgen_test_layout_ImGuiOldColumns() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiOldColumns>(),
        136usize,
        concat!("Size of: ", stringify!(ImGuiOldColumns))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiOldColumns>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiOldColumns))
    );
    fn test_field_ID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiOldColumns>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ID) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiOldColumns),
                "::",
                stringify!(ID)
            )
        );
    }
    test_field_ID();
    fn test_field_Flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiOldColumns>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiOldColumns),
                "::",
                stringify!(Flags)
            )
        );
    }
    test_field_Flags();
    fn test_field_IsFirstFrame() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiOldColumns>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsFirstFrame) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiOldColumns),
                "::",
                stringify!(IsFirstFrame)
            )
        );
    }
    test_field_IsFirstFrame();
    fn test_field_IsBeingResized() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiOldColumns>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsBeingResized) as usize - ptr as usize
            },
            9usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiOldColumns),
                "::",
                stringify!(IsBeingResized)
            )
        );
    }
    test_field_IsBeingResized();
    fn test_field_Current() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiOldColumns>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Current) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiOldColumns),
                "::",
                stringify!(Current)
            )
        );
    }
    test_field_Current();
    fn test_field_Count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiOldColumns>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Count) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiOldColumns),
                "::",
                stringify!(Count)
            )
        );
    }
    test_field_Count();
    fn test_field_OffMinX() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiOldColumns>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).OffMinX) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiOldColumns),
                "::",
                stringify!(OffMinX)
            )
        );
    }
    test_field_OffMinX();
    fn test_field_OffMaxX() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiOldColumns>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).OffMaxX) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiOldColumns),
                "::",
                stringify!(OffMaxX)
            )
        );
    }
    test_field_OffMaxX();
    fn test_field_LineMinY() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiOldColumns>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LineMinY) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiOldColumns),
                "::",
                stringify!(LineMinY)
            )
        );
    }
    test_field_LineMinY();
    fn test_field_LineMaxY() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiOldColumns>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LineMaxY) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiOldColumns),
                "::",
                stringify!(LineMaxY)
            )
        );
    }
    test_field_LineMaxY();
    fn test_field_HostCursorPosY() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiOldColumns>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HostCursorPosY) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiOldColumns),
                "::",
                stringify!(HostCursorPosY)
            )
        );
    }
    test_field_HostCursorPosY();
    fn test_field_HostCursorMaxPosX() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiOldColumns>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HostCursorMaxPosX) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiOldColumns),
                "::",
                stringify!(HostCursorMaxPosX)
            )
        );
    }
    test_field_HostCursorMaxPosX();
    fn test_field_HostInitialClipRect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiOldColumns>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HostInitialClipRect) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiOldColumns),
                "::",
                stringify!(HostInitialClipRect)
            )
        );
    }
    test_field_HostInitialClipRect();
    fn test_field_HostBackupClipRect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiOldColumns>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HostBackupClipRect) as usize - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiOldColumns),
                "::",
                stringify!(HostBackupClipRect)
            )
        );
    }
    test_field_HostBackupClipRect();
    fn test_field_HostBackupParentWorkRect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiOldColumns>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HostBackupParentWorkRect) as usize - ptr as usize
            },
            76usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiOldColumns),
                "::",
                stringify!(HostBackupParentWorkRect)
            )
        );
    }
    test_field_HostBackupParentWorkRect();
    fn test_field_Columns() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiOldColumns>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Columns) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiOldColumns),
                "::",
                stringify!(Columns)
            )
        );
    }
    test_field_Columns();
    fn test_field_Splitter() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiOldColumns>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Splitter) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiOldColumns),
                "::",
                stringify!(Splitter)
            )
        );
    }
    test_field_Splitter();
}
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_DockSpace: ImGuiDockNodeFlagsPrivate_ =
    1024;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_CentralNode: ImGuiDockNodeFlagsPrivate_ =
    2048;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_NoTabBar: ImGuiDockNodeFlagsPrivate_ = 4096;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_HiddenTabBar: ImGuiDockNodeFlagsPrivate_ =
    8192;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_NoWindowMenuButton:
    ImGuiDockNodeFlagsPrivate_ = 16384;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_NoCloseButton: ImGuiDockNodeFlagsPrivate_ =
    32768;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_NoDocking: ImGuiDockNodeFlagsPrivate_ =
    65536;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_NoDockingSplitMe:
    ImGuiDockNodeFlagsPrivate_ = 131072;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_NoDockingSplitOther:
    ImGuiDockNodeFlagsPrivate_ = 262144;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_NoDockingOverMe:
    ImGuiDockNodeFlagsPrivate_ = 524288;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_NoDockingOverOther:
    ImGuiDockNodeFlagsPrivate_ = 1048576;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_NoDockingOverEmpty:
    ImGuiDockNodeFlagsPrivate_ = 2097152;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_NoResizeX: ImGuiDockNodeFlagsPrivate_ =
    4194304;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_NoResizeY: ImGuiDockNodeFlagsPrivate_ =
    8388608;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_SharedFlagsInheritMask_:
    ImGuiDockNodeFlagsPrivate_ = -1;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_NoResizeFlagsMask_:
    ImGuiDockNodeFlagsPrivate_ = 12582944;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_LocalFlagsMask_:
    ImGuiDockNodeFlagsPrivate_ = 12713072;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_LocalFlagsTransferMask_:
    ImGuiDockNodeFlagsPrivate_ = 12712048;
pub const ImGuiDockNodeFlagsPrivate__ImGuiDockNodeFlags_SavedFlagsMask_:
    ImGuiDockNodeFlagsPrivate_ = 12712992;
pub type ImGuiDockNodeFlagsPrivate_ = ::std::os::raw::c_int;
pub const ImGuiDataAuthority__ImGuiDataAuthority_Auto: ImGuiDataAuthority_ = 0;
pub const ImGuiDataAuthority__ImGuiDataAuthority_DockNode: ImGuiDataAuthority_ = 1;
pub const ImGuiDataAuthority__ImGuiDataAuthority_Window: ImGuiDataAuthority_ = 2;
pub type ImGuiDataAuthority_ = ::std::os::raw::c_int;
pub const ImGuiDockNodeState_ImGuiDockNodeState_Unknown: ImGuiDockNodeState = 0;
pub const ImGuiDockNodeState_ImGuiDockNodeState_HostWindowHiddenBecauseSingleWindow:
    ImGuiDockNodeState = 1;
pub const ImGuiDockNodeState_ImGuiDockNodeState_HostWindowHiddenBecauseWindowsAreResizing:
    ImGuiDockNodeState = 2;
pub const ImGuiDockNodeState_ImGuiDockNodeState_HostWindowVisible: ImGuiDockNodeState = 3;
pub type ImGuiDockNodeState = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiWindowPtr {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut *mut ImGuiWindow,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiWindowPtr() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiWindowPtr>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiWindowPtr))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiWindowPtr>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiWindowPtr))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiWindowPtr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiWindowPtr),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiWindowPtr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiWindowPtr),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiWindowPtr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiWindowPtr),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiDockNode {
    pub ID: ImGuiID,
    pub SharedFlags: ImGuiDockNodeFlags,
    pub LocalFlags: ImGuiDockNodeFlags,
    pub LocalFlagsInWindows: ImGuiDockNodeFlags,
    pub MergedFlags: ImGuiDockNodeFlags,
    pub State: ImGuiDockNodeState,
    pub ParentNode: *mut ImGuiDockNode,
    pub ChildNodes: [*mut ImGuiDockNode; 2usize],
    pub Windows: ImVector_ImGuiWindowPtr,
    pub TabBar: *mut ImGuiTabBar,
    pub Pos: ImVec2,
    pub Size: ImVec2,
    pub SizeRef: ImVec2,
    pub SplitAxis: ImGuiAxis,
    pub WindowClass: ImGuiWindowClass,
    pub LastBgColor: ImU32,
    pub HostWindow: *mut ImGuiWindow,
    pub VisibleWindow: *mut ImGuiWindow,
    pub CentralNode: *mut ImGuiDockNode,
    pub OnlyNodeWithWindows: *mut ImGuiDockNode,
    pub CountNodeWithWindows: ::std::os::raw::c_int,
    pub LastFrameAlive: ::std::os::raw::c_int,
    pub LastFrameActive: ::std::os::raw::c_int,
    pub LastFrameFocused: ::std::os::raw::c_int,
    pub LastFocusedNodeId: ImGuiID,
    pub SelectedTabId: ImGuiID,
    pub WantCloseTabId: ImGuiID,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
    pub __bindgen_padding_0: [u8; 9usize],
}
#[test]
fn bindgen_test_layout_ImGuiDockNode() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiDockNode>(),
        208usize,
        concat!("Size of: ", stringify!(ImGuiDockNode))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiDockNode>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiDockNode))
    );
    fn test_field_ID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiDockNode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ID) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiDockNode),
                "::",
                stringify!(ID)
            )
        );
    }
    test_field_ID();
    fn test_field_SharedFlags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiDockNode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SharedFlags) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiDockNode),
                "::",
                stringify!(SharedFlags)
            )
        );
    }
    test_field_SharedFlags();
    fn test_field_LocalFlags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiDockNode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LocalFlags) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiDockNode),
                "::",
                stringify!(LocalFlags)
            )
        );
    }
    test_field_LocalFlags();
    fn test_field_LocalFlagsInWindows() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiDockNode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LocalFlagsInWindows) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiDockNode),
                "::",
                stringify!(LocalFlagsInWindows)
            )
        );
    }
    test_field_LocalFlagsInWindows();
    fn test_field_MergedFlags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiDockNode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MergedFlags) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiDockNode),
                "::",
                stringify!(MergedFlags)
            )
        );
    }
    test_field_MergedFlags();
    fn test_field_State() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiDockNode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).State) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiDockNode),
                "::",
                stringify!(State)
            )
        );
    }
    test_field_State();
    fn test_field_ParentNode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiDockNode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ParentNode) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiDockNode),
                "::",
                stringify!(ParentNode)
            )
        );
    }
    test_field_ParentNode();
    fn test_field_ChildNodes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiDockNode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ChildNodes) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiDockNode),
                "::",
                stringify!(ChildNodes)
            )
        );
    }
    test_field_ChildNodes();
    fn test_field_Windows() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiDockNode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Windows) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiDockNode),
                "::",
                stringify!(Windows)
            )
        );
    }
    test_field_Windows();
    fn test_field_TabBar() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiDockNode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TabBar) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiDockNode),
                "::",
                stringify!(TabBar)
            )
        );
    }
    test_field_TabBar();
    fn test_field_Pos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiDockNode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Pos) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiDockNode),
                "::",
                stringify!(Pos)
            )
        );
    }
    test_field_Pos();
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiDockNode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiDockNode),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_SizeRef() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiDockNode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SizeRef) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiDockNode),
                "::",
                stringify!(SizeRef)
            )
        );
    }
    test_field_SizeRef();
    fn test_field_SplitAxis() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiDockNode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SplitAxis) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiDockNode),
                "::",
                stringify!(SplitAxis)
            )
        );
    }
    test_field_SplitAxis();
    fn test_field_WindowClass() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiDockNode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WindowClass) as usize - ptr as usize
            },
            100usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiDockNode),
                "::",
                stringify!(WindowClass)
            )
        );
    }
    test_field_WindowClass();
    fn test_field_LastBgColor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiDockNode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LastBgColor) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiDockNode),
                "::",
                stringify!(LastBgColor)
            )
        );
    }
    test_field_LastBgColor();
    fn test_field_HostWindow() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiDockNode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HostWindow) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiDockNode),
                "::",
                stringify!(HostWindow)
            )
        );
    }
    test_field_HostWindow();
    fn test_field_VisibleWindow() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiDockNode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VisibleWindow) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiDockNode),
                "::",
                stringify!(VisibleWindow)
            )
        );
    }
    test_field_VisibleWindow();
    fn test_field_CentralNode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiDockNode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CentralNode) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiDockNode),
                "::",
                stringify!(CentralNode)
            )
        );
    }
    test_field_CentralNode();
    fn test_field_OnlyNodeWithWindows() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiDockNode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).OnlyNodeWithWindows) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiDockNode),
                "::",
                stringify!(OnlyNodeWithWindows)
            )
        );
    }
    test_field_OnlyNodeWithWindows();
    fn test_field_CountNodeWithWindows() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiDockNode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CountNodeWithWindows) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiDockNode),
                "::",
                stringify!(CountNodeWithWindows)
            )
        );
    }
    test_field_CountNodeWithWindows();
    fn test_field_LastFrameAlive() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiDockNode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LastFrameAlive) as usize - ptr as usize
            },
            172usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiDockNode),
                "::",
                stringify!(LastFrameAlive)
            )
        );
    }
    test_field_LastFrameAlive();
    fn test_field_LastFrameActive() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiDockNode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LastFrameActive) as usize - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiDockNode),
                "::",
                stringify!(LastFrameActive)
            )
        );
    }
    test_field_LastFrameActive();
    fn test_field_LastFrameFocused() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiDockNode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LastFrameFocused) as usize - ptr as usize
            },
            180usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiDockNode),
                "::",
                stringify!(LastFrameFocused)
            )
        );
    }
    test_field_LastFrameFocused();
    fn test_field_LastFocusedNodeId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiDockNode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LastFocusedNodeId) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiDockNode),
                "::",
                stringify!(LastFocusedNodeId)
            )
        );
    }
    test_field_LastFocusedNodeId();
    fn test_field_SelectedTabId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiDockNode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SelectedTabId) as usize - ptr as usize
            },
            188usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiDockNode),
                "::",
                stringify!(SelectedTabId)
            )
        );
    }
    test_field_SelectedTabId();
    fn test_field_WantCloseTabId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiDockNode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WantCloseTabId) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiDockNode),
                "::",
                stringify!(WantCloseTabId)
            )
        );
    }
    test_field_WantCloseTabId();
}
impl ImGuiDockNode {
    #[inline]
    pub fn AuthorityForPos(&self) -> ImGuiDataAuthority {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_AuthorityForPos(&mut self, val: ImGuiDataAuthority) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn AuthorityForSize(&self) -> ImGuiDataAuthority {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_AuthorityForSize(&mut self, val: ImGuiDataAuthority) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn AuthorityForViewport(&self) -> ImGuiDataAuthority {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_AuthorityForViewport(&mut self, val: ImGuiDataAuthority) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn IsVisible(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_IsVisible(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn IsFocused(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_IsFocused(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn IsBgDrawnThisFrame(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_IsBgDrawnThisFrame(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn HasCloseButton(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_HasCloseButton(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn HasWindowMenuButton(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_HasWindowMenuButton(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn HasCentralNodeChild(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_HasCentralNodeChild(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn WantCloseAll(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_WantCloseAll(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn WantLockSizeOnce(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_WantLockSizeOnce(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn WantMouseMove(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_WantMouseMove(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn WantHiddenTabBarUpdate(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_WantHiddenTabBarUpdate(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn WantHiddenTabBarToggle(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_WantHiddenTabBarToggle(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        AuthorityForPos: ImGuiDataAuthority,
        AuthorityForSize: ImGuiDataAuthority,
        AuthorityForViewport: ImGuiDataAuthority,
        IsVisible: bool,
        IsFocused: bool,
        IsBgDrawnThisFrame: bool,
        HasCloseButton: bool,
        HasWindowMenuButton: bool,
        HasCentralNodeChild: bool,
        WantCloseAll: bool,
        WantLockSizeOnce: bool,
        WantMouseMove: bool,
        WantHiddenTabBarUpdate: bool,
        WantHiddenTabBarToggle: bool,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let AuthorityForPos: u32 = unsafe { ::std::mem::transmute(AuthorityForPos) };
            AuthorityForPos as u64
        });
        __bindgen_bitfield_unit.set(3usize, 3u8, {
            let AuthorityForSize: u32 = unsafe { ::std::mem::transmute(AuthorityForSize) };
            AuthorityForSize as u64
        });
        __bindgen_bitfield_unit.set(6usize, 3u8, {
            let AuthorityForViewport: u32 = unsafe { ::std::mem::transmute(AuthorityForViewport) };
            AuthorityForViewport as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let IsVisible: u8 = unsafe { ::std::mem::transmute(IsVisible) };
            IsVisible as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let IsFocused: u8 = unsafe { ::std::mem::transmute(IsFocused) };
            IsFocused as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let IsBgDrawnThisFrame: u8 = unsafe { ::std::mem::transmute(IsBgDrawnThisFrame) };
            IsBgDrawnThisFrame as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let HasCloseButton: u8 = unsafe { ::std::mem::transmute(HasCloseButton) };
            HasCloseButton as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let HasWindowMenuButton: u8 = unsafe { ::std::mem::transmute(HasWindowMenuButton) };
            HasWindowMenuButton as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let HasCentralNodeChild: u8 = unsafe { ::std::mem::transmute(HasCentralNodeChild) };
            HasCentralNodeChild as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let WantCloseAll: u8 = unsafe { ::std::mem::transmute(WantCloseAll) };
            WantCloseAll as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let WantLockSizeOnce: u8 = unsafe { ::std::mem::transmute(WantLockSizeOnce) };
            WantLockSizeOnce as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let WantMouseMove: u8 = unsafe { ::std::mem::transmute(WantMouseMove) };
            WantMouseMove as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let WantHiddenTabBarUpdate: u8 =
                unsafe { ::std::mem::transmute(WantHiddenTabBarUpdate) };
            WantHiddenTabBarUpdate as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let WantHiddenTabBarToggle: u8 =
                unsafe { ::std::mem::transmute(WantHiddenTabBarToggle) };
            WantHiddenTabBarToggle as u64
        });
        __bindgen_bitfield_unit
    }
}
pub const ImGuiWindowDockStyleCol_ImGuiWindowDockStyleCol_Text: ImGuiWindowDockStyleCol = 0;
pub const ImGuiWindowDockStyleCol_ImGuiWindowDockStyleCol_Tab: ImGuiWindowDockStyleCol = 1;
pub const ImGuiWindowDockStyleCol_ImGuiWindowDockStyleCol_TabHovered: ImGuiWindowDockStyleCol = 2;
pub const ImGuiWindowDockStyleCol_ImGuiWindowDockStyleCol_TabActive: ImGuiWindowDockStyleCol = 3;
pub const ImGuiWindowDockStyleCol_ImGuiWindowDockStyleCol_TabUnfocused: ImGuiWindowDockStyleCol = 4;
pub const ImGuiWindowDockStyleCol_ImGuiWindowDockStyleCol_TabUnfocusedActive:
    ImGuiWindowDockStyleCol = 5;
pub const ImGuiWindowDockStyleCol_ImGuiWindowDockStyleCol_COUNT: ImGuiWindowDockStyleCol = 6;
pub type ImGuiWindowDockStyleCol = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiWindowDockStyle {
    pub Colors: [ImU32; 6usize],
}
#[test]
fn bindgen_test_layout_ImGuiWindowDockStyle() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiWindowDockStyle>(),
        24usize,
        concat!("Size of: ", stringify!(ImGuiWindowDockStyle))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiWindowDockStyle>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiWindowDockStyle))
    );
    fn test_field_Colors() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowDockStyle>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Colors) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowDockStyle),
                "::",
                stringify!(Colors)
            )
        );
    }
    test_field_Colors();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiDockRequest {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiDockRequest,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiDockRequest() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiDockRequest>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiDockRequest))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiDockRequest>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiDockRequest))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiDockRequest>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiDockRequest),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiDockRequest>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiDockRequest),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiDockRequest>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiDockRequest),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiDockNodeSettings {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiDockNodeSettings,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiDockNodeSettings() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiDockNodeSettings>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiDockNodeSettings))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiDockNodeSettings>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiDockNodeSettings))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiDockNodeSettings>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiDockNodeSettings),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiDockNodeSettings>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiDockNodeSettings),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiDockNodeSettings>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiDockNodeSettings),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiDockContext {
    pub Nodes: ImGuiStorage,
    pub Requests: ImVector_ImGuiDockRequest,
    pub NodesSettings: ImVector_ImGuiDockNodeSettings,
    pub WantFullRebuild: bool,
}
#[test]
fn bindgen_test_layout_ImGuiDockContext() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiDockContext>(),
        56usize,
        concat!("Size of: ", stringify!(ImGuiDockContext))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiDockContext>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiDockContext))
    );
    fn test_field_Nodes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiDockContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Nodes) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiDockContext),
                "::",
                stringify!(Nodes)
            )
        );
    }
    test_field_Nodes();
    fn test_field_Requests() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiDockContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Requests) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiDockContext),
                "::",
                stringify!(Requests)
            )
        );
    }
    test_field_Requests();
    fn test_field_NodesSettings() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiDockContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NodesSettings) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiDockContext),
                "::",
                stringify!(NodesSettings)
            )
        );
    }
    test_field_NodesSettings();
    fn test_field_WantFullRebuild() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiDockContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WantFullRebuild) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiDockContext),
                "::",
                stringify!(WantFullRebuild)
            )
        );
    }
    test_field_WantFullRebuild();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiViewportP {
    pub _ImGuiViewport: ImGuiViewport,
    pub Idx: ::std::os::raw::c_int,
    pub LastFrameActive: ::std::os::raw::c_int,
    pub LastFrontMostStampCount: ::std::os::raw::c_int,
    pub LastNameHash: ImGuiID,
    pub LastPos: ImVec2,
    pub Alpha: f32,
    pub LastAlpha: f32,
    pub PlatformMonitor: ::std::os::raw::c_short,
    pub PlatformWindowCreated: bool,
    pub Window: *mut ImGuiWindow,
    pub DrawListsLastFrame: [::std::os::raw::c_int; 2usize],
    pub DrawLists: [*mut ImDrawList; 2usize],
    pub DrawDataP: ImDrawData,
    pub DrawDataBuilder: ImDrawDataBuilder,
    pub LastPlatformPos: ImVec2,
    pub LastPlatformSize: ImVec2,
    pub LastRendererSize: ImVec2,
    pub WorkOffsetMin: ImVec2,
    pub WorkOffsetMax: ImVec2,
    pub BuildWorkOffsetMin: ImVec2,
    pub BuildWorkOffsetMax: ImVec2,
}
#[test]
fn bindgen_test_layout_ImGuiViewportP() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiViewportP>(),
        312usize,
        concat!("Size of: ", stringify!(ImGuiViewportP))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiViewportP>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiViewportP))
    );
    fn test_field__ImGuiViewport() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiViewportP>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr)._ImGuiViewport) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiViewportP),
                "::",
                stringify!(_ImGuiViewport)
            )
        );
    }
    test_field__ImGuiViewport();
    fn test_field_Idx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiViewportP>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Idx) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiViewportP),
                "::",
                stringify!(Idx)
            )
        );
    }
    test_field_Idx();
    fn test_field_LastFrameActive() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiViewportP>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LastFrameActive) as usize - ptr as usize
            },
            100usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiViewportP),
                "::",
                stringify!(LastFrameActive)
            )
        );
    }
    test_field_LastFrameActive();
    fn test_field_LastFrontMostStampCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiViewportP>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LastFrontMostStampCount) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiViewportP),
                "::",
                stringify!(LastFrontMostStampCount)
            )
        );
    }
    test_field_LastFrontMostStampCount();
    fn test_field_LastNameHash() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiViewportP>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LastNameHash) as usize - ptr as usize
            },
            108usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiViewportP),
                "::",
                stringify!(LastNameHash)
            )
        );
    }
    test_field_LastNameHash();
    fn test_field_LastPos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiViewportP>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LastPos) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiViewportP),
                "::",
                stringify!(LastPos)
            )
        );
    }
    test_field_LastPos();
    fn test_field_Alpha() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiViewportP>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Alpha) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiViewportP),
                "::",
                stringify!(Alpha)
            )
        );
    }
    test_field_Alpha();
    fn test_field_LastAlpha() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiViewportP>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LastAlpha) as usize - ptr as usize
            },
            124usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiViewportP),
                "::",
                stringify!(LastAlpha)
            )
        );
    }
    test_field_LastAlpha();
    fn test_field_PlatformMonitor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiViewportP>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PlatformMonitor) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiViewportP),
                "::",
                stringify!(PlatformMonitor)
            )
        );
    }
    test_field_PlatformMonitor();
    fn test_field_PlatformWindowCreated() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiViewportP>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PlatformWindowCreated) as usize - ptr as usize
            },
            130usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiViewportP),
                "::",
                stringify!(PlatformWindowCreated)
            )
        );
    }
    test_field_PlatformWindowCreated();
    fn test_field_Window() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiViewportP>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Window) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiViewportP),
                "::",
                stringify!(Window)
            )
        );
    }
    test_field_Window();
    fn test_field_DrawListsLastFrame() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiViewportP>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DrawListsLastFrame) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiViewportP),
                "::",
                stringify!(DrawListsLastFrame)
            )
        );
    }
    test_field_DrawListsLastFrame();
    fn test_field_DrawLists() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiViewportP>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DrawLists) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiViewportP),
                "::",
                stringify!(DrawLists)
            )
        );
    }
    test_field_DrawLists();
    fn test_field_DrawDataP() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiViewportP>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DrawDataP) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiViewportP),
                "::",
                stringify!(DrawDataP)
            )
        );
    }
    test_field_DrawDataP();
    fn test_field_DrawDataBuilder() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiViewportP>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DrawDataBuilder) as usize - ptr as usize
            },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiViewportP),
                "::",
                stringify!(DrawDataBuilder)
            )
        );
    }
    test_field_DrawDataBuilder();
    fn test_field_LastPlatformPos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiViewportP>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LastPlatformPos) as usize - ptr as usize
            },
            256usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiViewportP),
                "::",
                stringify!(LastPlatformPos)
            )
        );
    }
    test_field_LastPlatformPos();
    fn test_field_LastPlatformSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiViewportP>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LastPlatformSize) as usize - ptr as usize
            },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiViewportP),
                "::",
                stringify!(LastPlatformSize)
            )
        );
    }
    test_field_LastPlatformSize();
    fn test_field_LastRendererSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiViewportP>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LastRendererSize) as usize - ptr as usize
            },
            272usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiViewportP),
                "::",
                stringify!(LastRendererSize)
            )
        );
    }
    test_field_LastRendererSize();
    fn test_field_WorkOffsetMin() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiViewportP>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WorkOffsetMin) as usize - ptr as usize
            },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiViewportP),
                "::",
                stringify!(WorkOffsetMin)
            )
        );
    }
    test_field_WorkOffsetMin();
    fn test_field_WorkOffsetMax() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiViewportP>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WorkOffsetMax) as usize - ptr as usize
            },
            288usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiViewportP),
                "::",
                stringify!(WorkOffsetMax)
            )
        );
    }
    test_field_WorkOffsetMax();
    fn test_field_BuildWorkOffsetMin() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiViewportP>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BuildWorkOffsetMin) as usize - ptr as usize
            },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiViewportP),
                "::",
                stringify!(BuildWorkOffsetMin)
            )
        );
    }
    test_field_BuildWorkOffsetMin();
    fn test_field_BuildWorkOffsetMax() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiViewportP>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BuildWorkOffsetMax) as usize - ptr as usize
            },
            304usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiViewportP),
                "::",
                stringify!(BuildWorkOffsetMax)
            )
        );
    }
    test_field_BuildWorkOffsetMax();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiWindowSettings {
    pub ID: ImGuiID,
    pub Pos: ImVec2ih,
    pub Size: ImVec2ih,
    pub ViewportPos: ImVec2ih,
    pub ViewportId: ImGuiID,
    pub DockId: ImGuiID,
    pub ClassId: ImGuiID,
    pub DockOrder: ::std::os::raw::c_short,
    pub Collapsed: bool,
    pub WantApply: bool,
}
#[test]
fn bindgen_test_layout_ImGuiWindowSettings() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiWindowSettings>(),
        32usize,
        concat!("Size of: ", stringify!(ImGuiWindowSettings))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiWindowSettings>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiWindowSettings))
    );
    fn test_field_ID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowSettings>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ID) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowSettings),
                "::",
                stringify!(ID)
            )
        );
    }
    test_field_ID();
    fn test_field_Pos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowSettings>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Pos) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowSettings),
                "::",
                stringify!(Pos)
            )
        );
    }
    test_field_Pos();
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowSettings>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowSettings),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_ViewportPos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowSettings>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ViewportPos) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowSettings),
                "::",
                stringify!(ViewportPos)
            )
        );
    }
    test_field_ViewportPos();
    fn test_field_ViewportId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowSettings>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ViewportId) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowSettings),
                "::",
                stringify!(ViewportId)
            )
        );
    }
    test_field_ViewportId();
    fn test_field_DockId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowSettings>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DockId) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowSettings),
                "::",
                stringify!(DockId)
            )
        );
    }
    test_field_DockId();
    fn test_field_ClassId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowSettings>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ClassId) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowSettings),
                "::",
                stringify!(ClassId)
            )
        );
    }
    test_field_ClassId();
    fn test_field_DockOrder() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowSettings>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DockOrder) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowSettings),
                "::",
                stringify!(DockOrder)
            )
        );
    }
    test_field_DockOrder();
    fn test_field_Collapsed() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowSettings>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Collapsed) as usize - ptr as usize
            },
            30usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowSettings),
                "::",
                stringify!(Collapsed)
            )
        );
    }
    test_field_Collapsed();
    fn test_field_WantApply() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowSettings>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WantApply) as usize - ptr as usize
            },
            31usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowSettings),
                "::",
                stringify!(WantApply)
            )
        );
    }
    test_field_WantApply();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiSettingsHandler {
    pub TypeName: *const ::std::os::raw::c_char,
    pub TypeHash: ImGuiID,
    pub ClearAllFn: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut ImGuiContext, handler: *mut ImGuiSettingsHandler),
    >,
    pub ReadInitFn: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut ImGuiContext, handler: *mut ImGuiSettingsHandler),
    >,
    pub ReadOpenFn: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut ImGuiContext,
            handler: *mut ImGuiSettingsHandler,
            name: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub ReadLineFn: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut ImGuiContext,
            handler: *mut ImGuiSettingsHandler,
            entry: *mut ::std::os::raw::c_void,
            line: *const ::std::os::raw::c_char,
        ),
    >,
    pub ApplyAllFn: ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut ImGuiContext, handler: *mut ImGuiSettingsHandler),
    >,
    pub WriteAllFn: ::std::option::Option<
        unsafe extern "C" fn(
            ctx: *mut ImGuiContext,
            handler: *mut ImGuiSettingsHandler,
            out_buf: *mut ImGuiTextBuffer,
        ),
    >,
    pub UserData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ImGuiSettingsHandler() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiSettingsHandler>(),
        72usize,
        concat!("Size of: ", stringify!(ImGuiSettingsHandler))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiSettingsHandler>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiSettingsHandler))
    );
    fn test_field_TypeName() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiSettingsHandler>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TypeName) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiSettingsHandler),
                "::",
                stringify!(TypeName)
            )
        );
    }
    test_field_TypeName();
    fn test_field_TypeHash() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiSettingsHandler>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TypeHash) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiSettingsHandler),
                "::",
                stringify!(TypeHash)
            )
        );
    }
    test_field_TypeHash();
    fn test_field_ClearAllFn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiSettingsHandler>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ClearAllFn) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiSettingsHandler),
                "::",
                stringify!(ClearAllFn)
            )
        );
    }
    test_field_ClearAllFn();
    fn test_field_ReadInitFn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiSettingsHandler>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReadInitFn) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiSettingsHandler),
                "::",
                stringify!(ReadInitFn)
            )
        );
    }
    test_field_ReadInitFn();
    fn test_field_ReadOpenFn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiSettingsHandler>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReadOpenFn) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiSettingsHandler),
                "::",
                stringify!(ReadOpenFn)
            )
        );
    }
    test_field_ReadOpenFn();
    fn test_field_ReadLineFn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiSettingsHandler>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReadLineFn) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiSettingsHandler),
                "::",
                stringify!(ReadLineFn)
            )
        );
    }
    test_field_ReadLineFn();
    fn test_field_ApplyAllFn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiSettingsHandler>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ApplyAllFn) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiSettingsHandler),
                "::",
                stringify!(ApplyAllFn)
            )
        );
    }
    test_field_ApplyAllFn();
    fn test_field_WriteAllFn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiSettingsHandler>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WriteAllFn) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiSettingsHandler),
                "::",
                stringify!(WriteAllFn)
            )
        );
    }
    test_field_WriteAllFn();
    fn test_field_UserData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiSettingsHandler>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).UserData) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiSettingsHandler),
                "::",
                stringify!(UserData)
            )
        );
    }
    test_field_UserData();
}
pub const ImGuiDebugLogFlags__ImGuiDebugLogFlags_None: ImGuiDebugLogFlags_ = 0;
pub const ImGuiDebugLogFlags__ImGuiDebugLogFlags_EventActiveId: ImGuiDebugLogFlags_ = 1;
pub const ImGuiDebugLogFlags__ImGuiDebugLogFlags_EventFocus: ImGuiDebugLogFlags_ = 2;
pub const ImGuiDebugLogFlags__ImGuiDebugLogFlags_EventPopup: ImGuiDebugLogFlags_ = 4;
pub const ImGuiDebugLogFlags__ImGuiDebugLogFlags_EventNav: ImGuiDebugLogFlags_ = 8;
pub const ImGuiDebugLogFlags__ImGuiDebugLogFlags_EventIO: ImGuiDebugLogFlags_ = 16;
pub const ImGuiDebugLogFlags__ImGuiDebugLogFlags_EventDocking: ImGuiDebugLogFlags_ = 32;
pub const ImGuiDebugLogFlags__ImGuiDebugLogFlags_EventViewport: ImGuiDebugLogFlags_ = 64;
pub const ImGuiDebugLogFlags__ImGuiDebugLogFlags_EventMask_: ImGuiDebugLogFlags_ = 127;
pub const ImGuiDebugLogFlags__ImGuiDebugLogFlags_OutputToTTY: ImGuiDebugLogFlags_ = 1024;
pub type ImGuiDebugLogFlags_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiMetricsConfig {
    pub ShowDebugLog: bool,
    pub ShowStackTool: bool,
    pub ShowWindowsRects: bool,
    pub ShowWindowsBeginOrder: bool,
    pub ShowTablesRects: bool,
    pub ShowDrawCmdMesh: bool,
    pub ShowDrawCmdBoundingBoxes: bool,
    pub ShowDockingNodes: bool,
    pub ShowWindowsRectsType: ::std::os::raw::c_int,
    pub ShowTablesRectsType: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ImGuiMetricsConfig() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiMetricsConfig>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiMetricsConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiMetricsConfig>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiMetricsConfig))
    );
    fn test_field_ShowDebugLog() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiMetricsConfig>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ShowDebugLog) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiMetricsConfig),
                "::",
                stringify!(ShowDebugLog)
            )
        );
    }
    test_field_ShowDebugLog();
    fn test_field_ShowStackTool() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiMetricsConfig>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ShowStackTool) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiMetricsConfig),
                "::",
                stringify!(ShowStackTool)
            )
        );
    }
    test_field_ShowStackTool();
    fn test_field_ShowWindowsRects() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiMetricsConfig>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ShowWindowsRects) as usize - ptr as usize
            },
            2usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiMetricsConfig),
                "::",
                stringify!(ShowWindowsRects)
            )
        );
    }
    test_field_ShowWindowsRects();
    fn test_field_ShowWindowsBeginOrder() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiMetricsConfig>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ShowWindowsBeginOrder) as usize - ptr as usize
            },
            3usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiMetricsConfig),
                "::",
                stringify!(ShowWindowsBeginOrder)
            )
        );
    }
    test_field_ShowWindowsBeginOrder();
    fn test_field_ShowTablesRects() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiMetricsConfig>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ShowTablesRects) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiMetricsConfig),
                "::",
                stringify!(ShowTablesRects)
            )
        );
    }
    test_field_ShowTablesRects();
    fn test_field_ShowDrawCmdMesh() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiMetricsConfig>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ShowDrawCmdMesh) as usize - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiMetricsConfig),
                "::",
                stringify!(ShowDrawCmdMesh)
            )
        );
    }
    test_field_ShowDrawCmdMesh();
    fn test_field_ShowDrawCmdBoundingBoxes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiMetricsConfig>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ShowDrawCmdBoundingBoxes) as usize - ptr as usize
            },
            6usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiMetricsConfig),
                "::",
                stringify!(ShowDrawCmdBoundingBoxes)
            )
        );
    }
    test_field_ShowDrawCmdBoundingBoxes();
    fn test_field_ShowDockingNodes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiMetricsConfig>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ShowDockingNodes) as usize - ptr as usize
            },
            7usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiMetricsConfig),
                "::",
                stringify!(ShowDockingNodes)
            )
        );
    }
    test_field_ShowDockingNodes();
    fn test_field_ShowWindowsRectsType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiMetricsConfig>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ShowWindowsRectsType) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiMetricsConfig),
                "::",
                stringify!(ShowWindowsRectsType)
            )
        );
    }
    test_field_ShowWindowsRectsType();
    fn test_field_ShowTablesRectsType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiMetricsConfig>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ShowTablesRectsType) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiMetricsConfig),
                "::",
                stringify!(ShowTablesRectsType)
            )
        );
    }
    test_field_ShowTablesRectsType();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiStackLevelInfo {
    pub ID: ImGuiID,
    pub QueryFrameCount: ImS8,
    pub QuerySuccess: bool,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub __bindgen_padding_0: [u8; 5usize],
    pub Desc: [::std::os::raw::c_char; 57usize],
}
#[test]
fn bindgen_test_layout_ImGuiStackLevelInfo() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiStackLevelInfo>(),
        72usize,
        concat!("Size of: ", stringify!(ImGuiStackLevelInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiStackLevelInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiStackLevelInfo))
    );
    fn test_field_ID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStackLevelInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ID) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStackLevelInfo),
                "::",
                stringify!(ID)
            )
        );
    }
    test_field_ID();
    fn test_field_QueryFrameCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStackLevelInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).QueryFrameCount) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStackLevelInfo),
                "::",
                stringify!(QueryFrameCount)
            )
        );
    }
    test_field_QueryFrameCount();
    fn test_field_QuerySuccess() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStackLevelInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).QuerySuccess) as usize - ptr as usize
            },
            5usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStackLevelInfo),
                "::",
                stringify!(QuerySuccess)
            )
        );
    }
    test_field_QuerySuccess();
    fn test_field_Desc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStackLevelInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Desc) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStackLevelInfo),
                "::",
                stringify!(Desc)
            )
        );
    }
    test_field_Desc();
}
impl ImGuiStackLevelInfo {
    #[inline]
    pub fn DataType(&self) -> ImGuiDataType {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_DataType(&mut self, val: ImGuiDataType) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(DataType: ImGuiDataType) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let DataType: u32 = unsafe { ::std::mem::transmute(DataType) };
            DataType as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiStackLevelInfo {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiStackLevelInfo,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiStackLevelInfo() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiStackLevelInfo>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiStackLevelInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiStackLevelInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiStackLevelInfo))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiStackLevelInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiStackLevelInfo),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiStackLevelInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiStackLevelInfo),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiStackLevelInfo>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiStackLevelInfo),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiStackTool {
    pub LastActiveFrame: ::std::os::raw::c_int,
    pub StackLevel: ::std::os::raw::c_int,
    pub QueryId: ImGuiID,
    pub Results: ImVector_ImGuiStackLevelInfo,
    pub CopyToClipboardOnCtrlC: bool,
    pub CopyToClipboardLastTime: f32,
}
#[test]
fn bindgen_test_layout_ImGuiStackTool() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiStackTool>(),
        40usize,
        concat!("Size of: ", stringify!(ImGuiStackTool))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiStackTool>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiStackTool))
    );
    fn test_field_LastActiveFrame() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStackTool>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LastActiveFrame) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStackTool),
                "::",
                stringify!(LastActiveFrame)
            )
        );
    }
    test_field_LastActiveFrame();
    fn test_field_StackLevel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStackTool>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).StackLevel) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStackTool),
                "::",
                stringify!(StackLevel)
            )
        );
    }
    test_field_StackLevel();
    fn test_field_QueryId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStackTool>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).QueryId) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStackTool),
                "::",
                stringify!(QueryId)
            )
        );
    }
    test_field_QueryId();
    fn test_field_Results() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStackTool>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Results) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStackTool),
                "::",
                stringify!(Results)
            )
        );
    }
    test_field_Results();
    fn test_field_CopyToClipboardOnCtrlC() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStackTool>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CopyToClipboardOnCtrlC) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStackTool),
                "::",
                stringify!(CopyToClipboardOnCtrlC)
            )
        );
    }
    test_field_CopyToClipboardOnCtrlC();
    fn test_field_CopyToClipboardLastTime() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiStackTool>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CopyToClipboardLastTime) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiStackTool),
                "::",
                stringify!(CopyToClipboardLastTime)
            )
        );
    }
    test_field_CopyToClipboardLastTime();
}
pub type ImGuiContextHookCallback = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ImGuiContext, hook: *mut ImGuiContextHook),
>;
pub const ImGuiContextHookType_ImGuiContextHookType_NewFramePre: ImGuiContextHookType = 0;
pub const ImGuiContextHookType_ImGuiContextHookType_NewFramePost: ImGuiContextHookType = 1;
pub const ImGuiContextHookType_ImGuiContextHookType_EndFramePre: ImGuiContextHookType = 2;
pub const ImGuiContextHookType_ImGuiContextHookType_EndFramePost: ImGuiContextHookType = 3;
pub const ImGuiContextHookType_ImGuiContextHookType_RenderPre: ImGuiContextHookType = 4;
pub const ImGuiContextHookType_ImGuiContextHookType_RenderPost: ImGuiContextHookType = 5;
pub const ImGuiContextHookType_ImGuiContextHookType_Shutdown: ImGuiContextHookType = 6;
pub const ImGuiContextHookType_ImGuiContextHookType_PendingRemoval_: ImGuiContextHookType = 7;
pub type ImGuiContextHookType = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiContextHook {
    pub HookId: ImGuiID,
    pub Type: ImGuiContextHookType,
    pub Owner: ImGuiID,
    pub Callback: ImGuiContextHookCallback,
    pub UserData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ImGuiContextHook() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiContextHook>(),
        32usize,
        concat!("Size of: ", stringify!(ImGuiContextHook))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiContextHook>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiContextHook))
    );
    fn test_field_HookId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContextHook>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HookId) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContextHook),
                "::",
                stringify!(HookId)
            )
        );
    }
    test_field_HookId();
    fn test_field_Type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContextHook>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Type) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContextHook),
                "::",
                stringify!(Type)
            )
        );
    }
    test_field_Type();
    fn test_field_Owner() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContextHook>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Owner) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContextHook),
                "::",
                stringify!(Owner)
            )
        );
    }
    test_field_Owner();
    fn test_field_Callback() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContextHook>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Callback) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContextHook),
                "::",
                stringify!(Callback)
            )
        );
    }
    test_field_Callback();
    fn test_field_UserData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContextHook>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).UserData) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContextHook),
                "::",
                stringify!(UserData)
            )
        );
    }
    test_field_UserData();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiInputEvent {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiInputEvent,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiInputEvent() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiInputEvent>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiInputEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiInputEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiInputEvent))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiInputEvent>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiInputEvent),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiInputEvent>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiInputEvent),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiInputEvent>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiInputEvent),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiWindowStackData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiWindowStackData,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiWindowStackData() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiWindowStackData>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiWindowStackData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiWindowStackData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiWindowStackData))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiWindowStackData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiWindowStackData),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiWindowStackData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiWindowStackData),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiWindowStackData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiWindowStackData),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiColorMod {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiColorMod,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiColorMod() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiColorMod>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiColorMod))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiColorMod>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiColorMod))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiColorMod>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiColorMod),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiColorMod>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiColorMod),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiColorMod>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiColorMod),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiStyleMod {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiStyleMod,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiStyleMod() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiStyleMod>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiStyleMod))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiStyleMod>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiStyleMod))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiStyleMod>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiStyleMod),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiStyleMod>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiStyleMod),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiStyleMod>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiStyleMod),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiID {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiID,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiID() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiID>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiID))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiID>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiID))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiID>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiID),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiID>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiID),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiID>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiID),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiItemFlags {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiItemFlags,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiItemFlags() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiItemFlags>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiItemFlags))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiItemFlags>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiItemFlags))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiItemFlags>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiItemFlags),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiItemFlags>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiItemFlags),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiItemFlags>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiItemFlags),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiGroupData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiGroupData,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiGroupData() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiGroupData>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiGroupData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiGroupData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiGroupData))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiGroupData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiGroupData),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiGroupData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiGroupData),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiGroupData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiGroupData),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiPopupData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiPopupData,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiPopupData() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiPopupData>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiPopupData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiPopupData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiPopupData))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiPopupData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiPopupData),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiPopupData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiPopupData),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiPopupData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiPopupData),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiViewportPPtr {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut *mut ImGuiViewportP,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiViewportPPtr() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiViewportPPtr>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiViewportPPtr))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiViewportPPtr>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiViewportPPtr))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiViewportPPtr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiViewportPPtr),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiViewportPPtr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiViewportPPtr),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiViewportPPtr>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiViewportPPtr),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_unsigned_char {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_ImVector_unsigned_char() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_unsigned_char>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_unsigned_char))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_unsigned_char>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_unsigned_char))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_unsigned_char>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_unsigned_char),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_unsigned_char>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_unsigned_char),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_unsigned_char>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_unsigned_char),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiListClipperData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiListClipperData,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiListClipperData() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiListClipperData>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiListClipperData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiListClipperData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiListClipperData))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiListClipperData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiListClipperData),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiListClipperData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiListClipperData),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiListClipperData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiListClipperData),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiTableTempData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiTableTempData,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiTableTempData() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiTableTempData>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiTableTempData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiTableTempData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiTableTempData))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiTableTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiTableTempData),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiTableTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiTableTempData),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiTableTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiTableTempData),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiTable {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiTable,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiTable() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiTable>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiTable))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiTable>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiTable))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiTable),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiTable),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiTable),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImPool_ImGuiTable {
    pub Buf: ImVector_ImGuiTable,
    pub Map: ImGuiStorage,
    pub FreeIdx: ImPoolIdx,
    pub AliveCount: ImPoolIdx,
}
#[test]
fn bindgen_test_layout_ImPool_ImGuiTable() {
    assert_eq!(
        ::std::mem::size_of::<ImPool_ImGuiTable>(),
        40usize,
        concat!("Size of: ", stringify!(ImPool_ImGuiTable))
    );
    assert_eq!(
        ::std::mem::align_of::<ImPool_ImGuiTable>(),
        8usize,
        concat!("Alignment of ", stringify!(ImPool_ImGuiTable))
    );
    fn test_field_Buf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImPool_ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Buf) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImPool_ImGuiTable),
                "::",
                stringify!(Buf)
            )
        );
    }
    test_field_Buf();
    fn test_field_Map() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImPool_ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Map) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImPool_ImGuiTable),
                "::",
                stringify!(Map)
            )
        );
    }
    test_field_Map();
    fn test_field_FreeIdx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImPool_ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FreeIdx) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ImPool_ImGuiTable),
                "::",
                stringify!(FreeIdx)
            )
        );
    }
    test_field_FreeIdx();
    fn test_field_AliveCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImPool_ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AliveCount) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(ImPool_ImGuiTable),
                "::",
                stringify!(AliveCount)
            )
        );
    }
    test_field_AliveCount();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiTabBar {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiTabBar,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiTabBar() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiTabBar>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiTabBar))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiTabBar>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiTabBar))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiTabBar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiTabBar),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiTabBar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiTabBar),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiTabBar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiTabBar),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImPool_ImGuiTabBar {
    pub Buf: ImVector_ImGuiTabBar,
    pub Map: ImGuiStorage,
    pub FreeIdx: ImPoolIdx,
    pub AliveCount: ImPoolIdx,
}
#[test]
fn bindgen_test_layout_ImPool_ImGuiTabBar() {
    assert_eq!(
        ::std::mem::size_of::<ImPool_ImGuiTabBar>(),
        40usize,
        concat!("Size of: ", stringify!(ImPool_ImGuiTabBar))
    );
    assert_eq!(
        ::std::mem::align_of::<ImPool_ImGuiTabBar>(),
        8usize,
        concat!("Alignment of ", stringify!(ImPool_ImGuiTabBar))
    );
    fn test_field_Buf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImPool_ImGuiTabBar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Buf) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImPool_ImGuiTabBar),
                "::",
                stringify!(Buf)
            )
        );
    }
    test_field_Buf();
    fn test_field_Map() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImPool_ImGuiTabBar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Map) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImPool_ImGuiTabBar),
                "::",
                stringify!(Map)
            )
        );
    }
    test_field_Map();
    fn test_field_FreeIdx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImPool_ImGuiTabBar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FreeIdx) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ImPool_ImGuiTabBar),
                "::",
                stringify!(FreeIdx)
            )
        );
    }
    test_field_FreeIdx();
    fn test_field_AliveCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImPool_ImGuiTabBar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AliveCount) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(ImPool_ImGuiTabBar),
                "::",
                stringify!(AliveCount)
            )
        );
    }
    test_field_AliveCount();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiPtrOrIndex {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiPtrOrIndex,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiPtrOrIndex() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiPtrOrIndex>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiPtrOrIndex))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiPtrOrIndex>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiPtrOrIndex))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiPtrOrIndex>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiPtrOrIndex),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiPtrOrIndex>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiPtrOrIndex),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiPtrOrIndex>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiPtrOrIndex),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiShrinkWidthItem {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiShrinkWidthItem,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiShrinkWidthItem() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiShrinkWidthItem>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiShrinkWidthItem))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiShrinkWidthItem>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiShrinkWidthItem))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiShrinkWidthItem>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiShrinkWidthItem),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiShrinkWidthItem>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiShrinkWidthItem),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiShrinkWidthItem>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiShrinkWidthItem),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiSettingsHandler {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiSettingsHandler,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiSettingsHandler() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiSettingsHandler>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiSettingsHandler))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiSettingsHandler>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiSettingsHandler))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiSettingsHandler>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiSettingsHandler),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiSettingsHandler>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiSettingsHandler),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiSettingsHandler>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiSettingsHandler),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImChunkStream_ImGuiWindowSettings {
    pub Buf: ImVector_char,
}
#[test]
fn bindgen_test_layout_ImChunkStream_ImGuiWindowSettings() {
    assert_eq!(
        ::std::mem::size_of::<ImChunkStream_ImGuiWindowSettings>(),
        16usize,
        concat!("Size of: ", stringify!(ImChunkStream_ImGuiWindowSettings))
    );
    assert_eq!(
        ::std::mem::align_of::<ImChunkStream_ImGuiWindowSettings>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ImChunkStream_ImGuiWindowSettings)
        )
    );
    fn test_field_Buf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImChunkStream_ImGuiWindowSettings>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Buf) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImChunkStream_ImGuiWindowSettings),
                "::",
                stringify!(Buf)
            )
        );
    }
    test_field_Buf();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImChunkStream_ImGuiTableSettings {
    pub Buf: ImVector_char,
}
#[test]
fn bindgen_test_layout_ImChunkStream_ImGuiTableSettings() {
    assert_eq!(
        ::std::mem::size_of::<ImChunkStream_ImGuiTableSettings>(),
        16usize,
        concat!("Size of: ", stringify!(ImChunkStream_ImGuiTableSettings))
    );
    assert_eq!(
        ::std::mem::align_of::<ImChunkStream_ImGuiTableSettings>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ImChunkStream_ImGuiTableSettings)
        )
    );
    fn test_field_Buf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImChunkStream_ImGuiTableSettings>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Buf) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImChunkStream_ImGuiTableSettings),
                "::",
                stringify!(Buf)
            )
        );
    }
    test_field_Buf();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiContextHook {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiContextHook,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiContextHook() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiContextHook>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiContextHook))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiContextHook>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiContextHook))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiContextHook>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiContextHook),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiContextHook>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiContextHook),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiContextHook>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiContextHook),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiContext {
    pub Initialized: bool,
    pub FontAtlasOwnedByContext: bool,
    pub IO: ImGuiIO,
    pub PlatformIO: ImGuiPlatformIO,
    pub InputEventsQueue: ImVector_ImGuiInputEvent,
    pub InputEventsTrail: ImVector_ImGuiInputEvent,
    pub Style: ImGuiStyle,
    pub ConfigFlagsCurrFrame: ImGuiConfigFlags,
    pub ConfigFlagsLastFrame: ImGuiConfigFlags,
    pub Font: *mut ImFont,
    pub FontSize: f32,
    pub FontBaseSize: f32,
    pub DrawListSharedData: ImDrawListSharedData,
    pub Time: f64,
    pub FrameCount: ::std::os::raw::c_int,
    pub FrameCountEnded: ::std::os::raw::c_int,
    pub FrameCountPlatformEnded: ::std::os::raw::c_int,
    pub FrameCountRendered: ::std::os::raw::c_int,
    pub WithinFrameScope: bool,
    pub WithinFrameScopeWithImplicitWindow: bool,
    pub WithinEndChild: bool,
    pub GcCompactAll: bool,
    pub TestEngineHookItems: bool,
    pub TestEngine: *mut ::std::os::raw::c_void,
    pub Windows: ImVector_ImGuiWindowPtr,
    pub WindowsFocusOrder: ImVector_ImGuiWindowPtr,
    pub WindowsTempSortBuffer: ImVector_ImGuiWindowPtr,
    pub CurrentWindowStack: ImVector_ImGuiWindowStackData,
    pub WindowsById: ImGuiStorage,
    pub WindowsActiveCount: ::std::os::raw::c_int,
    pub WindowsHoverPadding: ImVec2,
    pub CurrentWindow: *mut ImGuiWindow,
    pub HoveredWindow: *mut ImGuiWindow,
    pub HoveredWindowUnderMovingWindow: *mut ImGuiWindow,
    pub HoveredDockNode: *mut ImGuiDockNode,
    pub MovingWindow: *mut ImGuiWindow,
    pub WheelingWindow: *mut ImGuiWindow,
    pub WheelingWindowRefMousePos: ImVec2,
    pub WheelingWindowTimer: f32,
    pub DebugHookIdInfo: ImGuiID,
    pub HoveredId: ImGuiID,
    pub HoveredIdPreviousFrame: ImGuiID,
    pub HoveredIdAllowOverlap: bool,
    pub HoveredIdUsingMouseWheel: bool,
    pub HoveredIdPreviousFrameUsingMouseWheel: bool,
    pub HoveredIdDisabled: bool,
    pub HoveredIdTimer: f32,
    pub HoveredIdNotActiveTimer: f32,
    pub ActiveId: ImGuiID,
    pub ActiveIdIsAlive: ImGuiID,
    pub ActiveIdTimer: f32,
    pub ActiveIdIsJustActivated: bool,
    pub ActiveIdAllowOverlap: bool,
    pub ActiveIdNoClearOnFocusLoss: bool,
    pub ActiveIdHasBeenPressedBefore: bool,
    pub ActiveIdHasBeenEditedBefore: bool,
    pub ActiveIdHasBeenEditedThisFrame: bool,
    pub ActiveIdClickOffset: ImVec2,
    pub ActiveIdWindow: *mut ImGuiWindow,
    pub ActiveIdSource: ImGuiInputSource,
    pub ActiveIdMouseButton: ::std::os::raw::c_int,
    pub ActiveIdPreviousFrame: ImGuiID,
    pub ActiveIdPreviousFrameIsAlive: bool,
    pub ActiveIdPreviousFrameHasBeenEditedBefore: bool,
    pub ActiveIdPreviousFrameWindow: *mut ImGuiWindow,
    pub LastActiveId: ImGuiID,
    pub LastActiveIdTimer: f32,
    pub ActiveIdUsingMouseWheel: bool,
    pub ActiveIdUsingNavDirMask: ImU32,
    pub ActiveIdUsingNavInputMask: ImU32,
    pub ActiveIdUsingKeyInputMask: ImBitArrayForNamedKeys,
    pub CurrentItemFlags: ImGuiItemFlags,
    pub NextItemData: ImGuiNextItemData,
    pub LastItemData: ImGuiLastItemData,
    pub NextWindowData: ImGuiNextWindowData,
    pub ColorStack: ImVector_ImGuiColorMod,
    pub StyleVarStack: ImVector_ImGuiStyleMod,
    pub FontStack: ImVector_ImFontPtr,
    pub FocusScopeStack: ImVector_ImGuiID,
    pub ItemFlagsStack: ImVector_ImGuiItemFlags,
    pub GroupStack: ImVector_ImGuiGroupData,
    pub OpenPopupStack: ImVector_ImGuiPopupData,
    pub BeginPopupStack: ImVector_ImGuiPopupData,
    pub BeginMenuCount: ::std::os::raw::c_int,
    pub Viewports: ImVector_ImGuiViewportPPtr,
    pub CurrentDpiScale: f32,
    pub CurrentViewport: *mut ImGuiViewportP,
    pub MouseViewport: *mut ImGuiViewportP,
    pub MouseLastHoveredViewport: *mut ImGuiViewportP,
    pub PlatformLastFocusedViewportId: ImGuiID,
    pub FallbackMonitor: ImGuiPlatformMonitor,
    pub ViewportFrontMostStampCount: ::std::os::raw::c_int,
    pub NavWindow: *mut ImGuiWindow,
    pub NavId: ImGuiID,
    pub NavFocusScopeId: ImGuiID,
    pub NavActivateId: ImGuiID,
    pub NavActivateDownId: ImGuiID,
    pub NavActivatePressedId: ImGuiID,
    pub NavActivateInputId: ImGuiID,
    pub NavActivateFlags: ImGuiActivateFlags,
    pub NavJustMovedToId: ImGuiID,
    pub NavJustMovedToFocusScopeId: ImGuiID,
    pub NavJustMovedToKeyMods: ImGuiModFlags,
    pub NavNextActivateId: ImGuiID,
    pub NavNextActivateFlags: ImGuiActivateFlags,
    pub NavInputSource: ImGuiInputSource,
    pub NavLayer: ImGuiNavLayer,
    pub NavIdIsAlive: bool,
    pub NavMousePosDirty: bool,
    pub NavDisableHighlight: bool,
    pub NavDisableMouseHover: bool,
    pub NavAnyRequest: bool,
    pub NavInitRequest: bool,
    pub NavInitRequestFromMove: bool,
    pub NavInitResultId: ImGuiID,
    pub NavInitResultRectRel: ImRect,
    pub NavMoveSubmitted: bool,
    pub NavMoveScoringItems: bool,
    pub NavMoveForwardToNextFrame: bool,
    pub NavMoveFlags: ImGuiNavMoveFlags,
    pub NavMoveScrollFlags: ImGuiScrollFlags,
    pub NavMoveKeyMods: ImGuiModFlags,
    pub NavMoveDir: ImGuiDir,
    pub NavMoveDirForDebug: ImGuiDir,
    pub NavMoveClipDir: ImGuiDir,
    pub NavScoringRect: ImRect,
    pub NavScoringNoClipRect: ImRect,
    pub NavScoringDebugCount: ::std::os::raw::c_int,
    pub NavTabbingDir: ::std::os::raw::c_int,
    pub NavTabbingCounter: ::std::os::raw::c_int,
    pub NavMoveResultLocal: ImGuiNavItemData,
    pub NavMoveResultLocalVisible: ImGuiNavItemData,
    pub NavMoveResultOther: ImGuiNavItemData,
    pub NavTabbingResultFirst: ImGuiNavItemData,
    pub NavWindowingTarget: *mut ImGuiWindow,
    pub NavWindowingTargetAnim: *mut ImGuiWindow,
    pub NavWindowingListWindow: *mut ImGuiWindow,
    pub NavWindowingTimer: f32,
    pub NavWindowingHighlightAlpha: f32,
    pub NavWindowingToggleLayer: bool,
    pub DimBgRatio: f32,
    pub MouseCursor: ImGuiMouseCursor,
    pub DragDropActive: bool,
    pub DragDropWithinSource: bool,
    pub DragDropWithinTarget: bool,
    pub DragDropSourceFlags: ImGuiDragDropFlags,
    pub DragDropSourceFrameCount: ::std::os::raw::c_int,
    pub DragDropMouseButton: ::std::os::raw::c_int,
    pub DragDropPayload: ImGuiPayload,
    pub DragDropTargetRect: ImRect,
    pub DragDropTargetId: ImGuiID,
    pub DragDropAcceptFlags: ImGuiDragDropFlags,
    pub DragDropAcceptIdCurrRectSurface: f32,
    pub DragDropAcceptIdCurr: ImGuiID,
    pub DragDropAcceptIdPrev: ImGuiID,
    pub DragDropAcceptFrameCount: ::std::os::raw::c_int,
    pub DragDropHoldJustPressedId: ImGuiID,
    pub DragDropPayloadBufHeap: ImVector_unsigned_char,
    pub DragDropPayloadBufLocal: [::std::os::raw::c_uchar; 16usize],
    pub ClipperTempDataStacked: ::std::os::raw::c_int,
    pub ClipperTempData: ImVector_ImGuiListClipperData,
    pub CurrentTable: *mut ImGuiTable,
    pub TablesTempDataStacked: ::std::os::raw::c_int,
    pub TablesTempData: ImVector_ImGuiTableTempData,
    pub Tables: ImPool_ImGuiTable,
    pub TablesLastTimeActive: ImVector_float,
    pub DrawChannelsTempMergeBuffer: ImVector_ImDrawChannel,
    pub CurrentTabBar: *mut ImGuiTabBar,
    pub TabBars: ImPool_ImGuiTabBar,
    pub CurrentTabBarStack: ImVector_ImGuiPtrOrIndex,
    pub ShrinkWidthBuffer: ImVector_ImGuiShrinkWidthItem,
    pub MouseLastValidPos: ImVec2,
    pub InputTextState: ImGuiInputTextState,
    pub InputTextPasswordFont: ImFont,
    pub TempInputId: ImGuiID,
    pub ColorEditOptions: ImGuiColorEditFlags,
    pub ColorEditLastHue: f32,
    pub ColorEditLastSat: f32,
    pub ColorEditLastColor: ImU32,
    pub ColorPickerRef: ImVec4,
    pub ComboPreviewData: ImGuiComboPreviewData,
    pub SliderGrabClickOffset: f32,
    pub SliderCurrentAccum: f32,
    pub SliderCurrentAccumDirty: bool,
    pub DragCurrentAccumDirty: bool,
    pub DragCurrentAccum: f32,
    pub DragSpeedDefaultRatio: f32,
    pub ScrollbarClickDeltaToGrabCenter: f32,
    pub DisabledAlphaBackup: f32,
    pub DisabledStackSize: ::std::os::raw::c_short,
    pub TooltipOverrideCount: ::std::os::raw::c_short,
    pub TooltipSlowDelay: f32,
    pub ClipboardHandlerData: ImVector_char,
    pub MenusIdSubmittedThisFrame: ImVector_ImGuiID,
    pub PlatformImeData: ImGuiPlatformImeData,
    pub PlatformImeDataPrev: ImGuiPlatformImeData,
    pub PlatformImeViewport: ImGuiID,
    pub PlatformLocaleDecimalPoint: ::std::os::raw::c_char,
    pub DockContext: ImGuiDockContext,
    pub SettingsLoaded: bool,
    pub SettingsDirtyTimer: f32,
    pub SettingsIniData: ImGuiTextBuffer,
    pub SettingsHandlers: ImVector_ImGuiSettingsHandler,
    pub SettingsWindows: ImChunkStream_ImGuiWindowSettings,
    pub SettingsTables: ImChunkStream_ImGuiTableSettings,
    pub Hooks: ImVector_ImGuiContextHook,
    pub HookIdNext: ImGuiID,
    pub LogEnabled: bool,
    pub LogType: ImGuiLogType,
    pub LogFile: ImFileHandle,
    pub LogBuffer: ImGuiTextBuffer,
    pub LogNextPrefix: *const ::std::os::raw::c_char,
    pub LogNextSuffix: *const ::std::os::raw::c_char,
    pub LogLinePosY: f32,
    pub LogLineFirstItem: bool,
    pub LogDepthRef: ::std::os::raw::c_int,
    pub LogDepthToExpand: ::std::os::raw::c_int,
    pub LogDepthToExpandDefault: ::std::os::raw::c_int,
    pub DebugLogFlags: ImGuiDebugLogFlags,
    pub DebugLogBuf: ImGuiTextBuffer,
    pub DebugItemPickerActive: bool,
    pub DebugItemPickerBreakId: ImGuiID,
    pub DebugMetricsConfig: ImGuiMetricsConfig,
    pub DebugStackTool: ImGuiStackTool,
    pub FramerateSecPerFrame: [f32; 120usize],
    pub FramerateSecPerFrameIdx: ::std::os::raw::c_int,
    pub FramerateSecPerFrameCount: ::std::os::raw::c_int,
    pub FramerateSecPerFrameAccum: f32,
    pub WantCaptureMouseNextFrame: ::std::os::raw::c_int,
    pub WantCaptureKeyboardNextFrame: ::std::os::raw::c_int,
    pub WantTextInputNextFrame: ::std::os::raw::c_int,
    pub TempBuffer: ImVector_char,
}
#[test]
fn bindgen_test_layout_ImGuiContext() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiContext>(),
        22632usize,
        concat!("Size of: ", stringify!(ImGuiContext))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiContext>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiContext))
    );
    fn test_field_Initialized() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Initialized) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(Initialized)
            )
        );
    }
    test_field_Initialized();
    fn test_field_FontAtlasOwnedByContext() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FontAtlasOwnedByContext) as usize - ptr as usize
            },
            1usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(FontAtlasOwnedByContext)
            )
        );
    }
    test_field_FontAtlasOwnedByContext();
    fn test_field_IO() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IO) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(IO)
            )
        );
    }
    test_field_IO();
    fn test_field_PlatformIO() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PlatformIO) as usize - ptr as usize
            },
            14352usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(PlatformIO)
            )
        );
    }
    test_field_PlatformIO();
    fn test_field_InputEventsQueue() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).InputEventsQueue) as usize - ptr as usize
            },
            14568usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(InputEventsQueue)
            )
        );
    }
    test_field_InputEventsQueue();
    fn test_field_InputEventsTrail() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).InputEventsTrail) as usize - ptr as usize
            },
            14584usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(InputEventsTrail)
            )
        );
    }
    test_field_InputEventsTrail();
    fn test_field_Style() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Style) as usize - ptr as usize
            },
            14600usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(Style)
            )
        );
    }
    test_field_Style();
    fn test_field_ConfigFlagsCurrFrame() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ConfigFlagsCurrFrame) as usize - ptr as usize
            },
            15680usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(ConfigFlagsCurrFrame)
            )
        );
    }
    test_field_ConfigFlagsCurrFrame();
    fn test_field_ConfigFlagsLastFrame() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ConfigFlagsLastFrame) as usize - ptr as usize
            },
            15684usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(ConfigFlagsLastFrame)
            )
        );
    }
    test_field_ConfigFlagsLastFrame();
    fn test_field_Font() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Font) as usize - ptr as usize
            },
            15688usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(Font)
            )
        );
    }
    test_field_Font();
    fn test_field_FontSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FontSize) as usize - ptr as usize
            },
            15696usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(FontSize)
            )
        );
    }
    test_field_FontSize();
    fn test_field_FontBaseSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FontBaseSize) as usize - ptr as usize
            },
            15700usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(FontBaseSize)
            )
        );
    }
    test_field_FontBaseSize();
    fn test_field_DrawListSharedData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DrawListSharedData) as usize - ptr as usize
            },
            15704usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(DrawListSharedData)
            )
        );
    }
    test_field_DrawListSharedData();
    fn test_field_Time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Time) as usize - ptr as usize
            },
            16216usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(Time)
            )
        );
    }
    test_field_Time();
    fn test_field_FrameCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FrameCount) as usize - ptr as usize
            },
            16224usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(FrameCount)
            )
        );
    }
    test_field_FrameCount();
    fn test_field_FrameCountEnded() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FrameCountEnded) as usize - ptr as usize
            },
            16228usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(FrameCountEnded)
            )
        );
    }
    test_field_FrameCountEnded();
    fn test_field_FrameCountPlatformEnded() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FrameCountPlatformEnded) as usize - ptr as usize
            },
            16232usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(FrameCountPlatformEnded)
            )
        );
    }
    test_field_FrameCountPlatformEnded();
    fn test_field_FrameCountRendered() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FrameCountRendered) as usize - ptr as usize
            },
            16236usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(FrameCountRendered)
            )
        );
    }
    test_field_FrameCountRendered();
    fn test_field_WithinFrameScope() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WithinFrameScope) as usize - ptr as usize
            },
            16240usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(WithinFrameScope)
            )
        );
    }
    test_field_WithinFrameScope();
    fn test_field_WithinFrameScopeWithImplicitWindow() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WithinFrameScopeWithImplicitWindow) as usize
                    - ptr as usize
            },
            16241usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(WithinFrameScopeWithImplicitWindow)
            )
        );
    }
    test_field_WithinFrameScopeWithImplicitWindow();
    fn test_field_WithinEndChild() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WithinEndChild) as usize - ptr as usize
            },
            16242usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(WithinEndChild)
            )
        );
    }
    test_field_WithinEndChild();
    fn test_field_GcCompactAll() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GcCompactAll) as usize - ptr as usize
            },
            16243usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(GcCompactAll)
            )
        );
    }
    test_field_GcCompactAll();
    fn test_field_TestEngineHookItems() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TestEngineHookItems) as usize - ptr as usize
            },
            16244usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(TestEngineHookItems)
            )
        );
    }
    test_field_TestEngineHookItems();
    fn test_field_TestEngine() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TestEngine) as usize - ptr as usize
            },
            16248usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(TestEngine)
            )
        );
    }
    test_field_TestEngine();
    fn test_field_Windows() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Windows) as usize - ptr as usize
            },
            16256usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(Windows)
            )
        );
    }
    test_field_Windows();
    fn test_field_WindowsFocusOrder() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WindowsFocusOrder) as usize - ptr as usize
            },
            16272usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(WindowsFocusOrder)
            )
        );
    }
    test_field_WindowsFocusOrder();
    fn test_field_WindowsTempSortBuffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WindowsTempSortBuffer) as usize - ptr as usize
            },
            16288usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(WindowsTempSortBuffer)
            )
        );
    }
    test_field_WindowsTempSortBuffer();
    fn test_field_CurrentWindowStack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CurrentWindowStack) as usize - ptr as usize
            },
            16304usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(CurrentWindowStack)
            )
        );
    }
    test_field_CurrentWindowStack();
    fn test_field_WindowsById() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WindowsById) as usize - ptr as usize
            },
            16320usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(WindowsById)
            )
        );
    }
    test_field_WindowsById();
    fn test_field_WindowsActiveCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WindowsActiveCount) as usize - ptr as usize
            },
            16336usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(WindowsActiveCount)
            )
        );
    }
    test_field_WindowsActiveCount();
    fn test_field_WindowsHoverPadding() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WindowsHoverPadding) as usize - ptr as usize
            },
            16340usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(WindowsHoverPadding)
            )
        );
    }
    test_field_WindowsHoverPadding();
    fn test_field_CurrentWindow() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CurrentWindow) as usize - ptr as usize
            },
            16352usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(CurrentWindow)
            )
        );
    }
    test_field_CurrentWindow();
    fn test_field_HoveredWindow() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HoveredWindow) as usize - ptr as usize
            },
            16360usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(HoveredWindow)
            )
        );
    }
    test_field_HoveredWindow();
    fn test_field_HoveredWindowUnderMovingWindow() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HoveredWindowUnderMovingWindow) as usize - ptr as usize
            },
            16368usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(HoveredWindowUnderMovingWindow)
            )
        );
    }
    test_field_HoveredWindowUnderMovingWindow();
    fn test_field_HoveredDockNode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HoveredDockNode) as usize - ptr as usize
            },
            16376usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(HoveredDockNode)
            )
        );
    }
    test_field_HoveredDockNode();
    fn test_field_MovingWindow() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MovingWindow) as usize - ptr as usize
            },
            16384usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(MovingWindow)
            )
        );
    }
    test_field_MovingWindow();
    fn test_field_WheelingWindow() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WheelingWindow) as usize - ptr as usize
            },
            16392usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(WheelingWindow)
            )
        );
    }
    test_field_WheelingWindow();
    fn test_field_WheelingWindowRefMousePos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WheelingWindowRefMousePos) as usize - ptr as usize
            },
            16400usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(WheelingWindowRefMousePos)
            )
        );
    }
    test_field_WheelingWindowRefMousePos();
    fn test_field_WheelingWindowTimer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WheelingWindowTimer) as usize - ptr as usize
            },
            16408usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(WheelingWindowTimer)
            )
        );
    }
    test_field_WheelingWindowTimer();
    fn test_field_DebugHookIdInfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DebugHookIdInfo) as usize - ptr as usize
            },
            16412usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(DebugHookIdInfo)
            )
        );
    }
    test_field_DebugHookIdInfo();
    fn test_field_HoveredId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HoveredId) as usize - ptr as usize
            },
            16416usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(HoveredId)
            )
        );
    }
    test_field_HoveredId();
    fn test_field_HoveredIdPreviousFrame() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HoveredIdPreviousFrame) as usize - ptr as usize
            },
            16420usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(HoveredIdPreviousFrame)
            )
        );
    }
    test_field_HoveredIdPreviousFrame();
    fn test_field_HoveredIdAllowOverlap() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HoveredIdAllowOverlap) as usize - ptr as usize
            },
            16424usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(HoveredIdAllowOverlap)
            )
        );
    }
    test_field_HoveredIdAllowOverlap();
    fn test_field_HoveredIdUsingMouseWheel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HoveredIdUsingMouseWheel) as usize - ptr as usize
            },
            16425usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(HoveredIdUsingMouseWheel)
            )
        );
    }
    test_field_HoveredIdUsingMouseWheel();
    fn test_field_HoveredIdPreviousFrameUsingMouseWheel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HoveredIdPreviousFrameUsingMouseWheel) as usize
                    - ptr as usize
            },
            16426usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(HoveredIdPreviousFrameUsingMouseWheel)
            )
        );
    }
    test_field_HoveredIdPreviousFrameUsingMouseWheel();
    fn test_field_HoveredIdDisabled() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HoveredIdDisabled) as usize - ptr as usize
            },
            16427usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(HoveredIdDisabled)
            )
        );
    }
    test_field_HoveredIdDisabled();
    fn test_field_HoveredIdTimer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HoveredIdTimer) as usize - ptr as usize
            },
            16428usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(HoveredIdTimer)
            )
        );
    }
    test_field_HoveredIdTimer();
    fn test_field_HoveredIdNotActiveTimer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HoveredIdNotActiveTimer) as usize - ptr as usize
            },
            16432usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(HoveredIdNotActiveTimer)
            )
        );
    }
    test_field_HoveredIdNotActiveTimer();
    fn test_field_ActiveId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ActiveId) as usize - ptr as usize
            },
            16436usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(ActiveId)
            )
        );
    }
    test_field_ActiveId();
    fn test_field_ActiveIdIsAlive() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ActiveIdIsAlive) as usize - ptr as usize
            },
            16440usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(ActiveIdIsAlive)
            )
        );
    }
    test_field_ActiveIdIsAlive();
    fn test_field_ActiveIdTimer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ActiveIdTimer) as usize - ptr as usize
            },
            16444usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(ActiveIdTimer)
            )
        );
    }
    test_field_ActiveIdTimer();
    fn test_field_ActiveIdIsJustActivated() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ActiveIdIsJustActivated) as usize - ptr as usize
            },
            16448usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(ActiveIdIsJustActivated)
            )
        );
    }
    test_field_ActiveIdIsJustActivated();
    fn test_field_ActiveIdAllowOverlap() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ActiveIdAllowOverlap) as usize - ptr as usize
            },
            16449usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(ActiveIdAllowOverlap)
            )
        );
    }
    test_field_ActiveIdAllowOverlap();
    fn test_field_ActiveIdNoClearOnFocusLoss() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ActiveIdNoClearOnFocusLoss) as usize - ptr as usize
            },
            16450usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(ActiveIdNoClearOnFocusLoss)
            )
        );
    }
    test_field_ActiveIdNoClearOnFocusLoss();
    fn test_field_ActiveIdHasBeenPressedBefore() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ActiveIdHasBeenPressedBefore) as usize - ptr as usize
            },
            16451usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(ActiveIdHasBeenPressedBefore)
            )
        );
    }
    test_field_ActiveIdHasBeenPressedBefore();
    fn test_field_ActiveIdHasBeenEditedBefore() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ActiveIdHasBeenEditedBefore) as usize - ptr as usize
            },
            16452usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(ActiveIdHasBeenEditedBefore)
            )
        );
    }
    test_field_ActiveIdHasBeenEditedBefore();
    fn test_field_ActiveIdHasBeenEditedThisFrame() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ActiveIdHasBeenEditedThisFrame) as usize - ptr as usize
            },
            16453usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(ActiveIdHasBeenEditedThisFrame)
            )
        );
    }
    test_field_ActiveIdHasBeenEditedThisFrame();
    fn test_field_ActiveIdClickOffset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ActiveIdClickOffset) as usize - ptr as usize
            },
            16456usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(ActiveIdClickOffset)
            )
        );
    }
    test_field_ActiveIdClickOffset();
    fn test_field_ActiveIdWindow() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ActiveIdWindow) as usize - ptr as usize
            },
            16464usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(ActiveIdWindow)
            )
        );
    }
    test_field_ActiveIdWindow();
    fn test_field_ActiveIdSource() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ActiveIdSource) as usize - ptr as usize
            },
            16472usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(ActiveIdSource)
            )
        );
    }
    test_field_ActiveIdSource();
    fn test_field_ActiveIdMouseButton() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ActiveIdMouseButton) as usize - ptr as usize
            },
            16476usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(ActiveIdMouseButton)
            )
        );
    }
    test_field_ActiveIdMouseButton();
    fn test_field_ActiveIdPreviousFrame() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ActiveIdPreviousFrame) as usize - ptr as usize
            },
            16480usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(ActiveIdPreviousFrame)
            )
        );
    }
    test_field_ActiveIdPreviousFrame();
    fn test_field_ActiveIdPreviousFrameIsAlive() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ActiveIdPreviousFrameIsAlive) as usize - ptr as usize
            },
            16484usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(ActiveIdPreviousFrameIsAlive)
            )
        );
    }
    test_field_ActiveIdPreviousFrameIsAlive();
    fn test_field_ActiveIdPreviousFrameHasBeenEditedBefore() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ActiveIdPreviousFrameHasBeenEditedBefore) as usize
                    - ptr as usize
            },
            16485usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(ActiveIdPreviousFrameHasBeenEditedBefore)
            )
        );
    }
    test_field_ActiveIdPreviousFrameHasBeenEditedBefore();
    fn test_field_ActiveIdPreviousFrameWindow() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ActiveIdPreviousFrameWindow) as usize - ptr as usize
            },
            16488usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(ActiveIdPreviousFrameWindow)
            )
        );
    }
    test_field_ActiveIdPreviousFrameWindow();
    fn test_field_LastActiveId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LastActiveId) as usize - ptr as usize
            },
            16496usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(LastActiveId)
            )
        );
    }
    test_field_LastActiveId();
    fn test_field_LastActiveIdTimer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LastActiveIdTimer) as usize - ptr as usize
            },
            16500usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(LastActiveIdTimer)
            )
        );
    }
    test_field_LastActiveIdTimer();
    fn test_field_ActiveIdUsingMouseWheel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ActiveIdUsingMouseWheel) as usize - ptr as usize
            },
            16504usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(ActiveIdUsingMouseWheel)
            )
        );
    }
    test_field_ActiveIdUsingMouseWheel();
    fn test_field_ActiveIdUsingNavDirMask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ActiveIdUsingNavDirMask) as usize - ptr as usize
            },
            16508usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(ActiveIdUsingNavDirMask)
            )
        );
    }
    test_field_ActiveIdUsingNavDirMask();
    fn test_field_ActiveIdUsingNavInputMask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ActiveIdUsingNavInputMask) as usize - ptr as usize
            },
            16512usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(ActiveIdUsingNavInputMask)
            )
        );
    }
    test_field_ActiveIdUsingNavInputMask();
    fn test_field_ActiveIdUsingKeyInputMask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ActiveIdUsingKeyInputMask) as usize - ptr as usize
            },
            16516usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(ActiveIdUsingKeyInputMask)
            )
        );
    }
    test_field_ActiveIdUsingKeyInputMask();
    fn test_field_CurrentItemFlags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CurrentItemFlags) as usize - ptr as usize
            },
            16536usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(CurrentItemFlags)
            )
        );
    }
    test_field_CurrentItemFlags();
    fn test_field_NextItemData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NextItemData) as usize - ptr as usize
            },
            16540usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NextItemData)
            )
        );
    }
    test_field_NextItemData();
    fn test_field_LastItemData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LastItemData) as usize - ptr as usize
            },
            16560usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(LastItemData)
            )
        );
    }
    test_field_LastItemData();
    fn test_field_NextWindowData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NextWindowData) as usize - ptr as usize
            },
            16624usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NextWindowData)
            )
        );
    }
    test_field_NextWindowData();
    fn test_field_ColorStack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ColorStack) as usize - ptr as usize
            },
            16768usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(ColorStack)
            )
        );
    }
    test_field_ColorStack();
    fn test_field_StyleVarStack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).StyleVarStack) as usize - ptr as usize
            },
            16784usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(StyleVarStack)
            )
        );
    }
    test_field_StyleVarStack();
    fn test_field_FontStack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FontStack) as usize - ptr as usize
            },
            16800usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(FontStack)
            )
        );
    }
    test_field_FontStack();
    fn test_field_FocusScopeStack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FocusScopeStack) as usize - ptr as usize
            },
            16816usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(FocusScopeStack)
            )
        );
    }
    test_field_FocusScopeStack();
    fn test_field_ItemFlagsStack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ItemFlagsStack) as usize - ptr as usize
            },
            16832usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(ItemFlagsStack)
            )
        );
    }
    test_field_ItemFlagsStack();
    fn test_field_GroupStack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GroupStack) as usize - ptr as usize
            },
            16848usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(GroupStack)
            )
        );
    }
    test_field_GroupStack();
    fn test_field_OpenPopupStack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).OpenPopupStack) as usize - ptr as usize
            },
            16864usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(OpenPopupStack)
            )
        );
    }
    test_field_OpenPopupStack();
    fn test_field_BeginPopupStack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BeginPopupStack) as usize - ptr as usize
            },
            16880usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(BeginPopupStack)
            )
        );
    }
    test_field_BeginPopupStack();
    fn test_field_BeginMenuCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BeginMenuCount) as usize - ptr as usize
            },
            16896usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(BeginMenuCount)
            )
        );
    }
    test_field_BeginMenuCount();
    fn test_field_Viewports() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Viewports) as usize - ptr as usize
            },
            16904usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(Viewports)
            )
        );
    }
    test_field_Viewports();
    fn test_field_CurrentDpiScale() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CurrentDpiScale) as usize - ptr as usize
            },
            16920usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(CurrentDpiScale)
            )
        );
    }
    test_field_CurrentDpiScale();
    fn test_field_CurrentViewport() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CurrentViewport) as usize - ptr as usize
            },
            16928usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(CurrentViewport)
            )
        );
    }
    test_field_CurrentViewport();
    fn test_field_MouseViewport() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MouseViewport) as usize - ptr as usize
            },
            16936usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(MouseViewport)
            )
        );
    }
    test_field_MouseViewport();
    fn test_field_MouseLastHoveredViewport() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MouseLastHoveredViewport) as usize - ptr as usize
            },
            16944usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(MouseLastHoveredViewport)
            )
        );
    }
    test_field_MouseLastHoveredViewport();
    fn test_field_PlatformLastFocusedViewportId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PlatformLastFocusedViewportId) as usize - ptr as usize
            },
            16952usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(PlatformLastFocusedViewportId)
            )
        );
    }
    test_field_PlatformLastFocusedViewportId();
    fn test_field_FallbackMonitor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FallbackMonitor) as usize - ptr as usize
            },
            16956usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(FallbackMonitor)
            )
        );
    }
    test_field_FallbackMonitor();
    fn test_field_ViewportFrontMostStampCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ViewportFrontMostStampCount) as usize - ptr as usize
            },
            16992usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(ViewportFrontMostStampCount)
            )
        );
    }
    test_field_ViewportFrontMostStampCount();
    fn test_field_NavWindow() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavWindow) as usize - ptr as usize
            },
            17000usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NavWindow)
            )
        );
    }
    test_field_NavWindow();
    fn test_field_NavId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavId) as usize - ptr as usize
            },
            17008usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NavId)
            )
        );
    }
    test_field_NavId();
    fn test_field_NavFocusScopeId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavFocusScopeId) as usize - ptr as usize
            },
            17012usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NavFocusScopeId)
            )
        );
    }
    test_field_NavFocusScopeId();
    fn test_field_NavActivateId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavActivateId) as usize - ptr as usize
            },
            17016usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NavActivateId)
            )
        );
    }
    test_field_NavActivateId();
    fn test_field_NavActivateDownId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavActivateDownId) as usize - ptr as usize
            },
            17020usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NavActivateDownId)
            )
        );
    }
    test_field_NavActivateDownId();
    fn test_field_NavActivatePressedId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavActivatePressedId) as usize - ptr as usize
            },
            17024usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NavActivatePressedId)
            )
        );
    }
    test_field_NavActivatePressedId();
    fn test_field_NavActivateInputId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavActivateInputId) as usize - ptr as usize
            },
            17028usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NavActivateInputId)
            )
        );
    }
    test_field_NavActivateInputId();
    fn test_field_NavActivateFlags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavActivateFlags) as usize - ptr as usize
            },
            17032usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NavActivateFlags)
            )
        );
    }
    test_field_NavActivateFlags();
    fn test_field_NavJustMovedToId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavJustMovedToId) as usize - ptr as usize
            },
            17036usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NavJustMovedToId)
            )
        );
    }
    test_field_NavJustMovedToId();
    fn test_field_NavJustMovedToFocusScopeId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavJustMovedToFocusScopeId) as usize - ptr as usize
            },
            17040usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NavJustMovedToFocusScopeId)
            )
        );
    }
    test_field_NavJustMovedToFocusScopeId();
    fn test_field_NavJustMovedToKeyMods() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavJustMovedToKeyMods) as usize - ptr as usize
            },
            17044usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NavJustMovedToKeyMods)
            )
        );
    }
    test_field_NavJustMovedToKeyMods();
    fn test_field_NavNextActivateId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavNextActivateId) as usize - ptr as usize
            },
            17048usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NavNextActivateId)
            )
        );
    }
    test_field_NavNextActivateId();
    fn test_field_NavNextActivateFlags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavNextActivateFlags) as usize - ptr as usize
            },
            17052usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NavNextActivateFlags)
            )
        );
    }
    test_field_NavNextActivateFlags();
    fn test_field_NavInputSource() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavInputSource) as usize - ptr as usize
            },
            17056usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NavInputSource)
            )
        );
    }
    test_field_NavInputSource();
    fn test_field_NavLayer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavLayer) as usize - ptr as usize
            },
            17060usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NavLayer)
            )
        );
    }
    test_field_NavLayer();
    fn test_field_NavIdIsAlive() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavIdIsAlive) as usize - ptr as usize
            },
            17064usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NavIdIsAlive)
            )
        );
    }
    test_field_NavIdIsAlive();
    fn test_field_NavMousePosDirty() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavMousePosDirty) as usize - ptr as usize
            },
            17065usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NavMousePosDirty)
            )
        );
    }
    test_field_NavMousePosDirty();
    fn test_field_NavDisableHighlight() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavDisableHighlight) as usize - ptr as usize
            },
            17066usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NavDisableHighlight)
            )
        );
    }
    test_field_NavDisableHighlight();
    fn test_field_NavDisableMouseHover() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavDisableMouseHover) as usize - ptr as usize
            },
            17067usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NavDisableMouseHover)
            )
        );
    }
    test_field_NavDisableMouseHover();
    fn test_field_NavAnyRequest() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavAnyRequest) as usize - ptr as usize
            },
            17068usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NavAnyRequest)
            )
        );
    }
    test_field_NavAnyRequest();
    fn test_field_NavInitRequest() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavInitRequest) as usize - ptr as usize
            },
            17069usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NavInitRequest)
            )
        );
    }
    test_field_NavInitRequest();
    fn test_field_NavInitRequestFromMove() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavInitRequestFromMove) as usize - ptr as usize
            },
            17070usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NavInitRequestFromMove)
            )
        );
    }
    test_field_NavInitRequestFromMove();
    fn test_field_NavInitResultId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavInitResultId) as usize - ptr as usize
            },
            17072usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NavInitResultId)
            )
        );
    }
    test_field_NavInitResultId();
    fn test_field_NavInitResultRectRel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavInitResultRectRel) as usize - ptr as usize
            },
            17076usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NavInitResultRectRel)
            )
        );
    }
    test_field_NavInitResultRectRel();
    fn test_field_NavMoveSubmitted() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavMoveSubmitted) as usize - ptr as usize
            },
            17092usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NavMoveSubmitted)
            )
        );
    }
    test_field_NavMoveSubmitted();
    fn test_field_NavMoveScoringItems() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavMoveScoringItems) as usize - ptr as usize
            },
            17093usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NavMoveScoringItems)
            )
        );
    }
    test_field_NavMoveScoringItems();
    fn test_field_NavMoveForwardToNextFrame() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavMoveForwardToNextFrame) as usize - ptr as usize
            },
            17094usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NavMoveForwardToNextFrame)
            )
        );
    }
    test_field_NavMoveForwardToNextFrame();
    fn test_field_NavMoveFlags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavMoveFlags) as usize - ptr as usize
            },
            17096usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NavMoveFlags)
            )
        );
    }
    test_field_NavMoveFlags();
    fn test_field_NavMoveScrollFlags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavMoveScrollFlags) as usize - ptr as usize
            },
            17100usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NavMoveScrollFlags)
            )
        );
    }
    test_field_NavMoveScrollFlags();
    fn test_field_NavMoveKeyMods() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavMoveKeyMods) as usize - ptr as usize
            },
            17104usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NavMoveKeyMods)
            )
        );
    }
    test_field_NavMoveKeyMods();
    fn test_field_NavMoveDir() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavMoveDir) as usize - ptr as usize
            },
            17108usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NavMoveDir)
            )
        );
    }
    test_field_NavMoveDir();
    fn test_field_NavMoveDirForDebug() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavMoveDirForDebug) as usize - ptr as usize
            },
            17112usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NavMoveDirForDebug)
            )
        );
    }
    test_field_NavMoveDirForDebug();
    fn test_field_NavMoveClipDir() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavMoveClipDir) as usize - ptr as usize
            },
            17116usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NavMoveClipDir)
            )
        );
    }
    test_field_NavMoveClipDir();
    fn test_field_NavScoringRect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavScoringRect) as usize - ptr as usize
            },
            17120usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NavScoringRect)
            )
        );
    }
    test_field_NavScoringRect();
    fn test_field_NavScoringNoClipRect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavScoringNoClipRect) as usize - ptr as usize
            },
            17136usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NavScoringNoClipRect)
            )
        );
    }
    test_field_NavScoringNoClipRect();
    fn test_field_NavScoringDebugCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavScoringDebugCount) as usize - ptr as usize
            },
            17152usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NavScoringDebugCount)
            )
        );
    }
    test_field_NavScoringDebugCount();
    fn test_field_NavTabbingDir() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavTabbingDir) as usize - ptr as usize
            },
            17156usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NavTabbingDir)
            )
        );
    }
    test_field_NavTabbingDir();
    fn test_field_NavTabbingCounter() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavTabbingCounter) as usize - ptr as usize
            },
            17160usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NavTabbingCounter)
            )
        );
    }
    test_field_NavTabbingCounter();
    fn test_field_NavMoveResultLocal() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavMoveResultLocal) as usize - ptr as usize
            },
            17168usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NavMoveResultLocal)
            )
        );
    }
    test_field_NavMoveResultLocal();
    fn test_field_NavMoveResultLocalVisible() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavMoveResultLocalVisible) as usize - ptr as usize
            },
            17216usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NavMoveResultLocalVisible)
            )
        );
    }
    test_field_NavMoveResultLocalVisible();
    fn test_field_NavMoveResultOther() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavMoveResultOther) as usize - ptr as usize
            },
            17264usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NavMoveResultOther)
            )
        );
    }
    test_field_NavMoveResultOther();
    fn test_field_NavTabbingResultFirst() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavTabbingResultFirst) as usize - ptr as usize
            },
            17312usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NavTabbingResultFirst)
            )
        );
    }
    test_field_NavTabbingResultFirst();
    fn test_field_NavWindowingTarget() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavWindowingTarget) as usize - ptr as usize
            },
            17360usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NavWindowingTarget)
            )
        );
    }
    test_field_NavWindowingTarget();
    fn test_field_NavWindowingTargetAnim() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavWindowingTargetAnim) as usize - ptr as usize
            },
            17368usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NavWindowingTargetAnim)
            )
        );
    }
    test_field_NavWindowingTargetAnim();
    fn test_field_NavWindowingListWindow() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavWindowingListWindow) as usize - ptr as usize
            },
            17376usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NavWindowingListWindow)
            )
        );
    }
    test_field_NavWindowingListWindow();
    fn test_field_NavWindowingTimer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavWindowingTimer) as usize - ptr as usize
            },
            17384usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NavWindowingTimer)
            )
        );
    }
    test_field_NavWindowingTimer();
    fn test_field_NavWindowingHighlightAlpha() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavWindowingHighlightAlpha) as usize - ptr as usize
            },
            17388usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NavWindowingHighlightAlpha)
            )
        );
    }
    test_field_NavWindowingHighlightAlpha();
    fn test_field_NavWindowingToggleLayer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavWindowingToggleLayer) as usize - ptr as usize
            },
            17392usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(NavWindowingToggleLayer)
            )
        );
    }
    test_field_NavWindowingToggleLayer();
    fn test_field_DimBgRatio() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DimBgRatio) as usize - ptr as usize
            },
            17396usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(DimBgRatio)
            )
        );
    }
    test_field_DimBgRatio();
    fn test_field_MouseCursor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MouseCursor) as usize - ptr as usize
            },
            17400usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(MouseCursor)
            )
        );
    }
    test_field_MouseCursor();
    fn test_field_DragDropActive() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DragDropActive) as usize - ptr as usize
            },
            17404usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(DragDropActive)
            )
        );
    }
    test_field_DragDropActive();
    fn test_field_DragDropWithinSource() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DragDropWithinSource) as usize - ptr as usize
            },
            17405usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(DragDropWithinSource)
            )
        );
    }
    test_field_DragDropWithinSource();
    fn test_field_DragDropWithinTarget() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DragDropWithinTarget) as usize - ptr as usize
            },
            17406usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(DragDropWithinTarget)
            )
        );
    }
    test_field_DragDropWithinTarget();
    fn test_field_DragDropSourceFlags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DragDropSourceFlags) as usize - ptr as usize
            },
            17408usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(DragDropSourceFlags)
            )
        );
    }
    test_field_DragDropSourceFlags();
    fn test_field_DragDropSourceFrameCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DragDropSourceFrameCount) as usize - ptr as usize
            },
            17412usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(DragDropSourceFrameCount)
            )
        );
    }
    test_field_DragDropSourceFrameCount();
    fn test_field_DragDropMouseButton() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DragDropMouseButton) as usize - ptr as usize
            },
            17416usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(DragDropMouseButton)
            )
        );
    }
    test_field_DragDropMouseButton();
    fn test_field_DragDropPayload() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DragDropPayload) as usize - ptr as usize
            },
            17424usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(DragDropPayload)
            )
        );
    }
    test_field_DragDropPayload();
    fn test_field_DragDropTargetRect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DragDropTargetRect) as usize - ptr as usize
            },
            17488usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(DragDropTargetRect)
            )
        );
    }
    test_field_DragDropTargetRect();
    fn test_field_DragDropTargetId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DragDropTargetId) as usize - ptr as usize
            },
            17504usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(DragDropTargetId)
            )
        );
    }
    test_field_DragDropTargetId();
    fn test_field_DragDropAcceptFlags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DragDropAcceptFlags) as usize - ptr as usize
            },
            17508usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(DragDropAcceptFlags)
            )
        );
    }
    test_field_DragDropAcceptFlags();
    fn test_field_DragDropAcceptIdCurrRectSurface() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DragDropAcceptIdCurrRectSurface) as usize - ptr as usize
            },
            17512usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(DragDropAcceptIdCurrRectSurface)
            )
        );
    }
    test_field_DragDropAcceptIdCurrRectSurface();
    fn test_field_DragDropAcceptIdCurr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DragDropAcceptIdCurr) as usize - ptr as usize
            },
            17516usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(DragDropAcceptIdCurr)
            )
        );
    }
    test_field_DragDropAcceptIdCurr();
    fn test_field_DragDropAcceptIdPrev() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DragDropAcceptIdPrev) as usize - ptr as usize
            },
            17520usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(DragDropAcceptIdPrev)
            )
        );
    }
    test_field_DragDropAcceptIdPrev();
    fn test_field_DragDropAcceptFrameCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DragDropAcceptFrameCount) as usize - ptr as usize
            },
            17524usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(DragDropAcceptFrameCount)
            )
        );
    }
    test_field_DragDropAcceptFrameCount();
    fn test_field_DragDropHoldJustPressedId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DragDropHoldJustPressedId) as usize - ptr as usize
            },
            17528usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(DragDropHoldJustPressedId)
            )
        );
    }
    test_field_DragDropHoldJustPressedId();
    fn test_field_DragDropPayloadBufHeap() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DragDropPayloadBufHeap) as usize - ptr as usize
            },
            17536usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(DragDropPayloadBufHeap)
            )
        );
    }
    test_field_DragDropPayloadBufHeap();
    fn test_field_DragDropPayloadBufLocal() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DragDropPayloadBufLocal) as usize - ptr as usize
            },
            17552usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(DragDropPayloadBufLocal)
            )
        );
    }
    test_field_DragDropPayloadBufLocal();
    fn test_field_ClipperTempDataStacked() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ClipperTempDataStacked) as usize - ptr as usize
            },
            17568usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(ClipperTempDataStacked)
            )
        );
    }
    test_field_ClipperTempDataStacked();
    fn test_field_ClipperTempData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ClipperTempData) as usize - ptr as usize
            },
            17576usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(ClipperTempData)
            )
        );
    }
    test_field_ClipperTempData();
    fn test_field_CurrentTable() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CurrentTable) as usize - ptr as usize
            },
            17592usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(CurrentTable)
            )
        );
    }
    test_field_CurrentTable();
    fn test_field_TablesTempDataStacked() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TablesTempDataStacked) as usize - ptr as usize
            },
            17600usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(TablesTempDataStacked)
            )
        );
    }
    test_field_TablesTempDataStacked();
    fn test_field_TablesTempData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TablesTempData) as usize - ptr as usize
            },
            17608usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(TablesTempData)
            )
        );
    }
    test_field_TablesTempData();
    fn test_field_Tables() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Tables) as usize - ptr as usize
            },
            17624usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(Tables)
            )
        );
    }
    test_field_Tables();
    fn test_field_TablesLastTimeActive() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TablesLastTimeActive) as usize - ptr as usize
            },
            17664usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(TablesLastTimeActive)
            )
        );
    }
    test_field_TablesLastTimeActive();
    fn test_field_DrawChannelsTempMergeBuffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DrawChannelsTempMergeBuffer) as usize - ptr as usize
            },
            17680usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(DrawChannelsTempMergeBuffer)
            )
        );
    }
    test_field_DrawChannelsTempMergeBuffer();
    fn test_field_CurrentTabBar() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CurrentTabBar) as usize - ptr as usize
            },
            17696usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(CurrentTabBar)
            )
        );
    }
    test_field_CurrentTabBar();
    fn test_field_TabBars() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TabBars) as usize - ptr as usize
            },
            17704usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(TabBars)
            )
        );
    }
    test_field_TabBars();
    fn test_field_CurrentTabBarStack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CurrentTabBarStack) as usize - ptr as usize
            },
            17744usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(CurrentTabBarStack)
            )
        );
    }
    test_field_CurrentTabBarStack();
    fn test_field_ShrinkWidthBuffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ShrinkWidthBuffer) as usize - ptr as usize
            },
            17760usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(ShrinkWidthBuffer)
            )
        );
    }
    test_field_ShrinkWidthBuffer();
    fn test_field_MouseLastValidPos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MouseLastValidPos) as usize - ptr as usize
            },
            17776usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(MouseLastValidPos)
            )
        );
    }
    test_field_MouseLastValidPos();
    fn test_field_InputTextState() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).InputTextState) as usize - ptr as usize
            },
            17784usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(InputTextState)
            )
        );
    }
    test_field_InputTextState();
    fn test_field_InputTextPasswordFont() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).InputTextPasswordFont) as usize - ptr as usize
            },
            21504usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(InputTextPasswordFont)
            )
        );
    }
    test_field_InputTextPasswordFont();
    fn test_field_TempInputId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TempInputId) as usize - ptr as usize
            },
            21616usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(TempInputId)
            )
        );
    }
    test_field_TempInputId();
    fn test_field_ColorEditOptions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ColorEditOptions) as usize - ptr as usize
            },
            21620usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(ColorEditOptions)
            )
        );
    }
    test_field_ColorEditOptions();
    fn test_field_ColorEditLastHue() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ColorEditLastHue) as usize - ptr as usize
            },
            21624usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(ColorEditLastHue)
            )
        );
    }
    test_field_ColorEditLastHue();
    fn test_field_ColorEditLastSat() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ColorEditLastSat) as usize - ptr as usize
            },
            21628usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(ColorEditLastSat)
            )
        );
    }
    test_field_ColorEditLastSat();
    fn test_field_ColorEditLastColor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ColorEditLastColor) as usize - ptr as usize
            },
            21632usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(ColorEditLastColor)
            )
        );
    }
    test_field_ColorEditLastColor();
    fn test_field_ColorPickerRef() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ColorPickerRef) as usize - ptr as usize
            },
            21636usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(ColorPickerRef)
            )
        );
    }
    test_field_ColorPickerRef();
    fn test_field_ComboPreviewData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ComboPreviewData) as usize - ptr as usize
            },
            21652usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(ComboPreviewData)
            )
        );
    }
    test_field_ComboPreviewData();
    fn test_field_SliderGrabClickOffset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SliderGrabClickOffset) as usize - ptr as usize
            },
            21700usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(SliderGrabClickOffset)
            )
        );
    }
    test_field_SliderGrabClickOffset();
    fn test_field_SliderCurrentAccum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SliderCurrentAccum) as usize - ptr as usize
            },
            21704usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(SliderCurrentAccum)
            )
        );
    }
    test_field_SliderCurrentAccum();
    fn test_field_SliderCurrentAccumDirty() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SliderCurrentAccumDirty) as usize - ptr as usize
            },
            21708usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(SliderCurrentAccumDirty)
            )
        );
    }
    test_field_SliderCurrentAccumDirty();
    fn test_field_DragCurrentAccumDirty() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DragCurrentAccumDirty) as usize - ptr as usize
            },
            21709usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(DragCurrentAccumDirty)
            )
        );
    }
    test_field_DragCurrentAccumDirty();
    fn test_field_DragCurrentAccum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DragCurrentAccum) as usize - ptr as usize
            },
            21712usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(DragCurrentAccum)
            )
        );
    }
    test_field_DragCurrentAccum();
    fn test_field_DragSpeedDefaultRatio() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DragSpeedDefaultRatio) as usize - ptr as usize
            },
            21716usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(DragSpeedDefaultRatio)
            )
        );
    }
    test_field_DragSpeedDefaultRatio();
    fn test_field_ScrollbarClickDeltaToGrabCenter() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ScrollbarClickDeltaToGrabCenter) as usize - ptr as usize
            },
            21720usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(ScrollbarClickDeltaToGrabCenter)
            )
        );
    }
    test_field_ScrollbarClickDeltaToGrabCenter();
    fn test_field_DisabledAlphaBackup() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DisabledAlphaBackup) as usize - ptr as usize
            },
            21724usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(DisabledAlphaBackup)
            )
        );
    }
    test_field_DisabledAlphaBackup();
    fn test_field_DisabledStackSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DisabledStackSize) as usize - ptr as usize
            },
            21728usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(DisabledStackSize)
            )
        );
    }
    test_field_DisabledStackSize();
    fn test_field_TooltipOverrideCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TooltipOverrideCount) as usize - ptr as usize
            },
            21730usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(TooltipOverrideCount)
            )
        );
    }
    test_field_TooltipOverrideCount();
    fn test_field_TooltipSlowDelay() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TooltipSlowDelay) as usize - ptr as usize
            },
            21732usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(TooltipSlowDelay)
            )
        );
    }
    test_field_TooltipSlowDelay();
    fn test_field_ClipboardHandlerData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ClipboardHandlerData) as usize - ptr as usize
            },
            21736usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(ClipboardHandlerData)
            )
        );
    }
    test_field_ClipboardHandlerData();
    fn test_field_MenusIdSubmittedThisFrame() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MenusIdSubmittedThisFrame) as usize - ptr as usize
            },
            21752usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(MenusIdSubmittedThisFrame)
            )
        );
    }
    test_field_MenusIdSubmittedThisFrame();
    fn test_field_PlatformImeData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PlatformImeData) as usize - ptr as usize
            },
            21768usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(PlatformImeData)
            )
        );
    }
    test_field_PlatformImeData();
    fn test_field_PlatformImeDataPrev() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PlatformImeDataPrev) as usize - ptr as usize
            },
            21784usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(PlatformImeDataPrev)
            )
        );
    }
    test_field_PlatformImeDataPrev();
    fn test_field_PlatformImeViewport() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PlatformImeViewport) as usize - ptr as usize
            },
            21800usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(PlatformImeViewport)
            )
        );
    }
    test_field_PlatformImeViewport();
    fn test_field_PlatformLocaleDecimalPoint() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PlatformLocaleDecimalPoint) as usize - ptr as usize
            },
            21804usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(PlatformLocaleDecimalPoint)
            )
        );
    }
    test_field_PlatformLocaleDecimalPoint();
    fn test_field_DockContext() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DockContext) as usize - ptr as usize
            },
            21808usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(DockContext)
            )
        );
    }
    test_field_DockContext();
    fn test_field_SettingsLoaded() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SettingsLoaded) as usize - ptr as usize
            },
            21864usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(SettingsLoaded)
            )
        );
    }
    test_field_SettingsLoaded();
    fn test_field_SettingsDirtyTimer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SettingsDirtyTimer) as usize - ptr as usize
            },
            21868usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(SettingsDirtyTimer)
            )
        );
    }
    test_field_SettingsDirtyTimer();
    fn test_field_SettingsIniData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SettingsIniData) as usize - ptr as usize
            },
            21872usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(SettingsIniData)
            )
        );
    }
    test_field_SettingsIniData();
    fn test_field_SettingsHandlers() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SettingsHandlers) as usize - ptr as usize
            },
            21888usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(SettingsHandlers)
            )
        );
    }
    test_field_SettingsHandlers();
    fn test_field_SettingsWindows() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SettingsWindows) as usize - ptr as usize
            },
            21904usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(SettingsWindows)
            )
        );
    }
    test_field_SettingsWindows();
    fn test_field_SettingsTables() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SettingsTables) as usize - ptr as usize
            },
            21920usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(SettingsTables)
            )
        );
    }
    test_field_SettingsTables();
    fn test_field_Hooks() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Hooks) as usize - ptr as usize
            },
            21936usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(Hooks)
            )
        );
    }
    test_field_Hooks();
    fn test_field_HookIdNext() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HookIdNext) as usize - ptr as usize
            },
            21952usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(HookIdNext)
            )
        );
    }
    test_field_HookIdNext();
    fn test_field_LogEnabled() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LogEnabled) as usize - ptr as usize
            },
            21956usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(LogEnabled)
            )
        );
    }
    test_field_LogEnabled();
    fn test_field_LogType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LogType) as usize - ptr as usize
            },
            21960usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(LogType)
            )
        );
    }
    test_field_LogType();
    fn test_field_LogFile() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LogFile) as usize - ptr as usize
            },
            21968usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(LogFile)
            )
        );
    }
    test_field_LogFile();
    fn test_field_LogBuffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LogBuffer) as usize - ptr as usize
            },
            21976usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(LogBuffer)
            )
        );
    }
    test_field_LogBuffer();
    fn test_field_LogNextPrefix() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LogNextPrefix) as usize - ptr as usize
            },
            21992usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(LogNextPrefix)
            )
        );
    }
    test_field_LogNextPrefix();
    fn test_field_LogNextSuffix() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LogNextSuffix) as usize - ptr as usize
            },
            22000usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(LogNextSuffix)
            )
        );
    }
    test_field_LogNextSuffix();
    fn test_field_LogLinePosY() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LogLinePosY) as usize - ptr as usize
            },
            22008usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(LogLinePosY)
            )
        );
    }
    test_field_LogLinePosY();
    fn test_field_LogLineFirstItem() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LogLineFirstItem) as usize - ptr as usize
            },
            22012usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(LogLineFirstItem)
            )
        );
    }
    test_field_LogLineFirstItem();
    fn test_field_LogDepthRef() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LogDepthRef) as usize - ptr as usize
            },
            22016usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(LogDepthRef)
            )
        );
    }
    test_field_LogDepthRef();
    fn test_field_LogDepthToExpand() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LogDepthToExpand) as usize - ptr as usize
            },
            22020usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(LogDepthToExpand)
            )
        );
    }
    test_field_LogDepthToExpand();
    fn test_field_LogDepthToExpandDefault() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LogDepthToExpandDefault) as usize - ptr as usize
            },
            22024usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(LogDepthToExpandDefault)
            )
        );
    }
    test_field_LogDepthToExpandDefault();
    fn test_field_DebugLogFlags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DebugLogFlags) as usize - ptr as usize
            },
            22028usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(DebugLogFlags)
            )
        );
    }
    test_field_DebugLogFlags();
    fn test_field_DebugLogBuf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DebugLogBuf) as usize - ptr as usize
            },
            22032usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(DebugLogBuf)
            )
        );
    }
    test_field_DebugLogBuf();
    fn test_field_DebugItemPickerActive() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DebugItemPickerActive) as usize - ptr as usize
            },
            22048usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(DebugItemPickerActive)
            )
        );
    }
    test_field_DebugItemPickerActive();
    fn test_field_DebugItemPickerBreakId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DebugItemPickerBreakId) as usize - ptr as usize
            },
            22052usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(DebugItemPickerBreakId)
            )
        );
    }
    test_field_DebugItemPickerBreakId();
    fn test_field_DebugMetricsConfig() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DebugMetricsConfig) as usize - ptr as usize
            },
            22056usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(DebugMetricsConfig)
            )
        );
    }
    test_field_DebugMetricsConfig();
    fn test_field_DebugStackTool() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DebugStackTool) as usize - ptr as usize
            },
            22072usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(DebugStackTool)
            )
        );
    }
    test_field_DebugStackTool();
    fn test_field_FramerateSecPerFrame() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FramerateSecPerFrame) as usize - ptr as usize
            },
            22112usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(FramerateSecPerFrame)
            )
        );
    }
    test_field_FramerateSecPerFrame();
    fn test_field_FramerateSecPerFrameIdx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FramerateSecPerFrameIdx) as usize - ptr as usize
            },
            22592usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(FramerateSecPerFrameIdx)
            )
        );
    }
    test_field_FramerateSecPerFrameIdx();
    fn test_field_FramerateSecPerFrameCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FramerateSecPerFrameCount) as usize - ptr as usize
            },
            22596usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(FramerateSecPerFrameCount)
            )
        );
    }
    test_field_FramerateSecPerFrameCount();
    fn test_field_FramerateSecPerFrameAccum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FramerateSecPerFrameAccum) as usize - ptr as usize
            },
            22600usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(FramerateSecPerFrameAccum)
            )
        );
    }
    test_field_FramerateSecPerFrameAccum();
    fn test_field_WantCaptureMouseNextFrame() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WantCaptureMouseNextFrame) as usize - ptr as usize
            },
            22604usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(WantCaptureMouseNextFrame)
            )
        );
    }
    test_field_WantCaptureMouseNextFrame();
    fn test_field_WantCaptureKeyboardNextFrame() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WantCaptureKeyboardNextFrame) as usize - ptr as usize
            },
            22608usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(WantCaptureKeyboardNextFrame)
            )
        );
    }
    test_field_WantCaptureKeyboardNextFrame();
    fn test_field_WantTextInputNextFrame() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WantTextInputNextFrame) as usize - ptr as usize
            },
            22612usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(WantTextInputNextFrame)
            )
        );
    }
    test_field_WantTextInputNextFrame();
    fn test_field_TempBuffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiContext>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TempBuffer) as usize - ptr as usize
            },
            22616usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiContext),
                "::",
                stringify!(TempBuffer)
            )
        );
    }
    test_field_TempBuffer();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiWindowTempData {
    pub CursorPos: ImVec2,
    pub CursorPosPrevLine: ImVec2,
    pub CursorStartPos: ImVec2,
    pub CursorMaxPos: ImVec2,
    pub IdealMaxPos: ImVec2,
    pub CurrLineSize: ImVec2,
    pub PrevLineSize: ImVec2,
    pub CurrLineTextBaseOffset: f32,
    pub PrevLineTextBaseOffset: f32,
    pub IsSameLine: bool,
    pub Indent: ImVec1,
    pub ColumnsOffset: ImVec1,
    pub GroupOffset: ImVec1,
    pub CursorStartPosLossyness: ImVec2,
    pub NavLayerCurrent: ImGuiNavLayer,
    pub NavLayersActiveMask: ::std::os::raw::c_short,
    pub NavLayersActiveMaskNext: ::std::os::raw::c_short,
    pub NavFocusScopeIdCurrent: ImGuiID,
    pub NavHideHighlightOneFrame: bool,
    pub NavHasScroll: bool,
    pub MenuBarAppending: bool,
    pub MenuBarOffset: ImVec2,
    pub MenuColumns: ImGuiMenuColumns,
    pub TreeDepth: ::std::os::raw::c_int,
    pub TreeJumpToParentOnPopMask: ImU32,
    pub ChildWindows: ImVector_ImGuiWindowPtr,
    pub StateStorage: *mut ImGuiStorage,
    pub CurrentColumns: *mut ImGuiOldColumns,
    pub CurrentTableIdx: ::std::os::raw::c_int,
    pub LayoutType: ImGuiLayoutType,
    pub ParentLayoutType: ImGuiLayoutType,
    pub ItemWidth: f32,
    pub TextWrapPos: f32,
    pub ItemWidthStack: ImVector_float,
    pub TextWrapPosStack: ImVector_float,
}
#[test]
fn bindgen_test_layout_ImGuiWindowTempData() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiWindowTempData>(),
        240usize,
        concat!("Size of: ", stringify!(ImGuiWindowTempData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiWindowTempData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiWindowTempData))
    );
    fn test_field_CursorPos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CursorPos) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowTempData),
                "::",
                stringify!(CursorPos)
            )
        );
    }
    test_field_CursorPos();
    fn test_field_CursorPosPrevLine() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CursorPosPrevLine) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowTempData),
                "::",
                stringify!(CursorPosPrevLine)
            )
        );
    }
    test_field_CursorPosPrevLine();
    fn test_field_CursorStartPos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CursorStartPos) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowTempData),
                "::",
                stringify!(CursorStartPos)
            )
        );
    }
    test_field_CursorStartPos();
    fn test_field_CursorMaxPos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CursorMaxPos) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowTempData),
                "::",
                stringify!(CursorMaxPos)
            )
        );
    }
    test_field_CursorMaxPos();
    fn test_field_IdealMaxPos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IdealMaxPos) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowTempData),
                "::",
                stringify!(IdealMaxPos)
            )
        );
    }
    test_field_IdealMaxPos();
    fn test_field_CurrLineSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CurrLineSize) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowTempData),
                "::",
                stringify!(CurrLineSize)
            )
        );
    }
    test_field_CurrLineSize();
    fn test_field_PrevLineSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PrevLineSize) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowTempData),
                "::",
                stringify!(PrevLineSize)
            )
        );
    }
    test_field_PrevLineSize();
    fn test_field_CurrLineTextBaseOffset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CurrLineTextBaseOffset) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowTempData),
                "::",
                stringify!(CurrLineTextBaseOffset)
            )
        );
    }
    test_field_CurrLineTextBaseOffset();
    fn test_field_PrevLineTextBaseOffset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PrevLineTextBaseOffset) as usize - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowTempData),
                "::",
                stringify!(PrevLineTextBaseOffset)
            )
        );
    }
    test_field_PrevLineTextBaseOffset();
    fn test_field_IsSameLine() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsSameLine) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowTempData),
                "::",
                stringify!(IsSameLine)
            )
        );
    }
    test_field_IsSameLine();
    fn test_field_Indent() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Indent) as usize - ptr as usize
            },
            68usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowTempData),
                "::",
                stringify!(Indent)
            )
        );
    }
    test_field_Indent();
    fn test_field_ColumnsOffset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ColumnsOffset) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowTempData),
                "::",
                stringify!(ColumnsOffset)
            )
        );
    }
    test_field_ColumnsOffset();
    fn test_field_GroupOffset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).GroupOffset) as usize - ptr as usize
            },
            76usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowTempData),
                "::",
                stringify!(GroupOffset)
            )
        );
    }
    test_field_GroupOffset();
    fn test_field_CursorStartPosLossyness() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CursorStartPosLossyness) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowTempData),
                "::",
                stringify!(CursorStartPosLossyness)
            )
        );
    }
    test_field_CursorStartPosLossyness();
    fn test_field_NavLayerCurrent() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavLayerCurrent) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowTempData),
                "::",
                stringify!(NavLayerCurrent)
            )
        );
    }
    test_field_NavLayerCurrent();
    fn test_field_NavLayersActiveMask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavLayersActiveMask) as usize - ptr as usize
            },
            92usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowTempData),
                "::",
                stringify!(NavLayersActiveMask)
            )
        );
    }
    test_field_NavLayersActiveMask();
    fn test_field_NavLayersActiveMaskNext() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavLayersActiveMaskNext) as usize - ptr as usize
            },
            94usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowTempData),
                "::",
                stringify!(NavLayersActiveMaskNext)
            )
        );
    }
    test_field_NavLayersActiveMaskNext();
    fn test_field_NavFocusScopeIdCurrent() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavFocusScopeIdCurrent) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowTempData),
                "::",
                stringify!(NavFocusScopeIdCurrent)
            )
        );
    }
    test_field_NavFocusScopeIdCurrent();
    fn test_field_NavHideHighlightOneFrame() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavHideHighlightOneFrame) as usize - ptr as usize
            },
            100usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowTempData),
                "::",
                stringify!(NavHideHighlightOneFrame)
            )
        );
    }
    test_field_NavHideHighlightOneFrame();
    fn test_field_NavHasScroll() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavHasScroll) as usize - ptr as usize
            },
            101usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowTempData),
                "::",
                stringify!(NavHasScroll)
            )
        );
    }
    test_field_NavHasScroll();
    fn test_field_MenuBarAppending() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MenuBarAppending) as usize - ptr as usize
            },
            102usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowTempData),
                "::",
                stringify!(MenuBarAppending)
            )
        );
    }
    test_field_MenuBarAppending();
    fn test_field_MenuBarOffset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MenuBarOffset) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowTempData),
                "::",
                stringify!(MenuBarOffset)
            )
        );
    }
    test_field_MenuBarOffset();
    fn test_field_MenuColumns() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MenuColumns) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowTempData),
                "::",
                stringify!(MenuColumns)
            )
        );
    }
    test_field_MenuColumns();
    fn test_field_TreeDepth() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TreeDepth) as usize - ptr as usize
            },
            140usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowTempData),
                "::",
                stringify!(TreeDepth)
            )
        );
    }
    test_field_TreeDepth();
    fn test_field_TreeJumpToParentOnPopMask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TreeJumpToParentOnPopMask) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowTempData),
                "::",
                stringify!(TreeJumpToParentOnPopMask)
            )
        );
    }
    test_field_TreeJumpToParentOnPopMask();
    fn test_field_ChildWindows() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ChildWindows) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowTempData),
                "::",
                stringify!(ChildWindows)
            )
        );
    }
    test_field_ChildWindows();
    fn test_field_StateStorage() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).StateStorage) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowTempData),
                "::",
                stringify!(StateStorage)
            )
        );
    }
    test_field_StateStorage();
    fn test_field_CurrentColumns() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CurrentColumns) as usize - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowTempData),
                "::",
                stringify!(CurrentColumns)
            )
        );
    }
    test_field_CurrentColumns();
    fn test_field_CurrentTableIdx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CurrentTableIdx) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowTempData),
                "::",
                stringify!(CurrentTableIdx)
            )
        );
    }
    test_field_CurrentTableIdx();
    fn test_field_LayoutType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LayoutType) as usize - ptr as usize
            },
            188usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowTempData),
                "::",
                stringify!(LayoutType)
            )
        );
    }
    test_field_LayoutType();
    fn test_field_ParentLayoutType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ParentLayoutType) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowTempData),
                "::",
                stringify!(ParentLayoutType)
            )
        );
    }
    test_field_ParentLayoutType();
    fn test_field_ItemWidth() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ItemWidth) as usize - ptr as usize
            },
            196usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowTempData),
                "::",
                stringify!(ItemWidth)
            )
        );
    }
    test_field_ItemWidth();
    fn test_field_TextWrapPos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TextWrapPos) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowTempData),
                "::",
                stringify!(TextWrapPos)
            )
        );
    }
    test_field_TextWrapPos();
    fn test_field_ItemWidthStack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ItemWidthStack) as usize - ptr as usize
            },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowTempData),
                "::",
                stringify!(ItemWidthStack)
            )
        );
    }
    test_field_ItemWidthStack();
    fn test_field_TextWrapPosStack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindowTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TextWrapPosStack) as usize - ptr as usize
            },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindowTempData),
                "::",
                stringify!(TextWrapPosStack)
            )
        );
    }
    test_field_TextWrapPosStack();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiOldColumns {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiOldColumns,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiOldColumns() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiOldColumns>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiOldColumns))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiOldColumns>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiOldColumns))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiOldColumns>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiOldColumns),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiOldColumns>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiOldColumns),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiOldColumns>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiOldColumns),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiWindow {
    pub Name: *mut ::std::os::raw::c_char,
    pub ID: ImGuiID,
    pub Flags: ImGuiWindowFlags,
    pub FlagsPreviousFrame: ImGuiWindowFlags,
    pub WindowClass: ImGuiWindowClass,
    pub Viewport: *mut ImGuiViewportP,
    pub ViewportId: ImGuiID,
    pub ViewportPos: ImVec2,
    pub ViewportAllowPlatformMonitorExtend: ::std::os::raw::c_int,
    pub Pos: ImVec2,
    pub Size: ImVec2,
    pub SizeFull: ImVec2,
    pub ContentSize: ImVec2,
    pub ContentSizeIdeal: ImVec2,
    pub ContentSizeExplicit: ImVec2,
    pub WindowPadding: ImVec2,
    pub WindowRounding: f32,
    pub WindowBorderSize: f32,
    pub NameBufLen: ::std::os::raw::c_int,
    pub MoveId: ImGuiID,
    pub TabId: ImGuiID,
    pub ChildId: ImGuiID,
    pub Scroll: ImVec2,
    pub ScrollMax: ImVec2,
    pub ScrollTarget: ImVec2,
    pub ScrollTargetCenterRatio: ImVec2,
    pub ScrollTargetEdgeSnapDist: ImVec2,
    pub ScrollbarSizes: ImVec2,
    pub ScrollbarX: bool,
    pub ScrollbarY: bool,
    pub ViewportOwned: bool,
    pub Active: bool,
    pub WasActive: bool,
    pub WriteAccessed: bool,
    pub Collapsed: bool,
    pub WantCollapseToggle: bool,
    pub SkipItems: bool,
    pub Appearing: bool,
    pub Hidden: bool,
    pub IsFallbackWindow: bool,
    pub IsExplicitChild: bool,
    pub HasCloseButton: bool,
    pub ResizeBorderHeld: ::std::os::raw::c_schar,
    pub BeginCount: ::std::os::raw::c_short,
    pub BeginOrderWithinParent: ::std::os::raw::c_short,
    pub BeginOrderWithinContext: ::std::os::raw::c_short,
    pub FocusOrder: ::std::os::raw::c_short,
    pub PopupId: ImGuiID,
    pub AutoFitFramesX: ImS8,
    pub AutoFitFramesY: ImS8,
    pub AutoFitChildAxises: ImS8,
    pub AutoFitOnlyGrows: bool,
    pub AutoPosLastDirection: ImGuiDir,
    pub HiddenFramesCanSkipItems: ImS8,
    pub HiddenFramesCannotSkipItems: ImS8,
    pub HiddenFramesForRenderOnly: ImS8,
    pub DisableInputsFrames: ImS8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub SetWindowPosVal: ImVec2,
    pub SetWindowPosPivot: ImVec2,
    pub IDStack: ImVector_ImGuiID,
    pub DC: ImGuiWindowTempData,
    pub OuterRectClipped: ImRect,
    pub InnerRect: ImRect,
    pub InnerClipRect: ImRect,
    pub WorkRect: ImRect,
    pub ParentWorkRect: ImRect,
    pub ClipRect: ImRect,
    pub ContentRegionRect: ImRect,
    pub HitTestHoleSize: ImVec2ih,
    pub HitTestHoleOffset: ImVec2ih,
    pub LastFrameActive: ::std::os::raw::c_int,
    pub LastFrameJustFocused: ::std::os::raw::c_int,
    pub LastTimeActive: f32,
    pub ItemWidthDefault: f32,
    pub StateStorage: ImGuiStorage,
    pub ColumnsStorage: ImVector_ImGuiOldColumns,
    pub FontWindowScale: f32,
    pub FontDpiScale: f32,
    pub SettingsOffset: ::std::os::raw::c_int,
    pub DrawList: *mut ImDrawList,
    pub DrawListInst: ImDrawList,
    pub ParentWindow: *mut ImGuiWindow,
    pub ParentWindowInBeginStack: *mut ImGuiWindow,
    pub RootWindow: *mut ImGuiWindow,
    pub RootWindowPopupTree: *mut ImGuiWindow,
    pub RootWindowDockTree: *mut ImGuiWindow,
    pub RootWindowForTitleBarHighlight: *mut ImGuiWindow,
    pub RootWindowForNav: *mut ImGuiWindow,
    pub NavLastChildNavWindow: *mut ImGuiWindow,
    pub NavLastIds: [ImGuiID; 2usize],
    pub NavRectRel: [ImRect; 2usize],
    pub MemoryDrawListIdxCapacity: ::std::os::raw::c_int,
    pub MemoryDrawListVtxCapacity: ::std::os::raw::c_int,
    pub MemoryCompacted: bool,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub DockOrder: ::std::os::raw::c_short,
    pub DockStyle: ImGuiWindowDockStyle,
    pub DockNode: *mut ImGuiDockNode,
    pub DockNodeAsHost: *mut ImGuiDockNode,
    pub DockId: ImGuiID,
    pub DockTabItemStatusFlags: ImGuiItemStatusFlags,
    pub DockTabItemRect: ImRect,
}
#[test]
fn bindgen_test_layout_ImGuiWindow() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiWindow>(),
        1096usize,
        concat!("Size of: ", stringify!(ImGuiWindow))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiWindow>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiWindow))
    );
    fn test_field_Name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Name) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(Name)
            )
        );
    }
    test_field_Name();
    fn test_field_ID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ID) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(ID)
            )
        );
    }
    test_field_ID();
    fn test_field_Flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(Flags)
            )
        );
    }
    test_field_Flags();
    fn test_field_FlagsPreviousFrame() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FlagsPreviousFrame) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(FlagsPreviousFrame)
            )
        );
    }
    test_field_FlagsPreviousFrame();
    fn test_field_WindowClass() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WindowClass) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(WindowClass)
            )
        );
    }
    test_field_WindowClass();
    fn test_field_Viewport() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Viewport) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(Viewport)
            )
        );
    }
    test_field_Viewport();
    fn test_field_ViewportId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ViewportId) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(ViewportId)
            )
        );
    }
    test_field_ViewportId();
    fn test_field_ViewportPos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ViewportPos) as usize - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(ViewportPos)
            )
        );
    }
    test_field_ViewportPos();
    fn test_field_ViewportAllowPlatformMonitorExtend() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ViewportAllowPlatformMonitorExtend) as usize
                    - ptr as usize
            },
            68usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(ViewportAllowPlatformMonitorExtend)
            )
        );
    }
    test_field_ViewportAllowPlatformMonitorExtend();
    fn test_field_Pos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Pos) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(Pos)
            )
        );
    }
    test_field_Pos();
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_SizeFull() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SizeFull) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(SizeFull)
            )
        );
    }
    test_field_SizeFull();
    fn test_field_ContentSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ContentSize) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(ContentSize)
            )
        );
    }
    test_field_ContentSize();
    fn test_field_ContentSizeIdeal() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ContentSizeIdeal) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(ContentSizeIdeal)
            )
        );
    }
    test_field_ContentSizeIdeal();
    fn test_field_ContentSizeExplicit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ContentSizeExplicit) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(ContentSizeExplicit)
            )
        );
    }
    test_field_ContentSizeExplicit();
    fn test_field_WindowPadding() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WindowPadding) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(WindowPadding)
            )
        );
    }
    test_field_WindowPadding();
    fn test_field_WindowRounding() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WindowRounding) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(WindowRounding)
            )
        );
    }
    test_field_WindowRounding();
    fn test_field_WindowBorderSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WindowBorderSize) as usize - ptr as usize
            },
            132usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(WindowBorderSize)
            )
        );
    }
    test_field_WindowBorderSize();
    fn test_field_NameBufLen() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NameBufLen) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(NameBufLen)
            )
        );
    }
    test_field_NameBufLen();
    fn test_field_MoveId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MoveId) as usize - ptr as usize
            },
            140usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(MoveId)
            )
        );
    }
    test_field_MoveId();
    fn test_field_TabId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TabId) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(TabId)
            )
        );
    }
    test_field_TabId();
    fn test_field_ChildId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ChildId) as usize - ptr as usize
            },
            148usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(ChildId)
            )
        );
    }
    test_field_ChildId();
    fn test_field_Scroll() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Scroll) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(Scroll)
            )
        );
    }
    test_field_Scroll();
    fn test_field_ScrollMax() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ScrollMax) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(ScrollMax)
            )
        );
    }
    test_field_ScrollMax();
    fn test_field_ScrollTarget() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ScrollTarget) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(ScrollTarget)
            )
        );
    }
    test_field_ScrollTarget();
    fn test_field_ScrollTargetCenterRatio() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ScrollTargetCenterRatio) as usize - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(ScrollTargetCenterRatio)
            )
        );
    }
    test_field_ScrollTargetCenterRatio();
    fn test_field_ScrollTargetEdgeSnapDist() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ScrollTargetEdgeSnapDist) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(ScrollTargetEdgeSnapDist)
            )
        );
    }
    test_field_ScrollTargetEdgeSnapDist();
    fn test_field_ScrollbarSizes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ScrollbarSizes) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(ScrollbarSizes)
            )
        );
    }
    test_field_ScrollbarSizes();
    fn test_field_ScrollbarX() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ScrollbarX) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(ScrollbarX)
            )
        );
    }
    test_field_ScrollbarX();
    fn test_field_ScrollbarY() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ScrollbarY) as usize - ptr as usize
            },
            201usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(ScrollbarY)
            )
        );
    }
    test_field_ScrollbarY();
    fn test_field_ViewportOwned() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ViewportOwned) as usize - ptr as usize
            },
            202usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(ViewportOwned)
            )
        );
    }
    test_field_ViewportOwned();
    fn test_field_Active() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Active) as usize - ptr as usize
            },
            203usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(Active)
            )
        );
    }
    test_field_Active();
    fn test_field_WasActive() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WasActive) as usize - ptr as usize
            },
            204usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(WasActive)
            )
        );
    }
    test_field_WasActive();
    fn test_field_WriteAccessed() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WriteAccessed) as usize - ptr as usize
            },
            205usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(WriteAccessed)
            )
        );
    }
    test_field_WriteAccessed();
    fn test_field_Collapsed() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Collapsed) as usize - ptr as usize
            },
            206usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(Collapsed)
            )
        );
    }
    test_field_Collapsed();
    fn test_field_WantCollapseToggle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WantCollapseToggle) as usize - ptr as usize
            },
            207usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(WantCollapseToggle)
            )
        );
    }
    test_field_WantCollapseToggle();
    fn test_field_SkipItems() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SkipItems) as usize - ptr as usize
            },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(SkipItems)
            )
        );
    }
    test_field_SkipItems();
    fn test_field_Appearing() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Appearing) as usize - ptr as usize
            },
            209usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(Appearing)
            )
        );
    }
    test_field_Appearing();
    fn test_field_Hidden() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Hidden) as usize - ptr as usize
            },
            210usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(Hidden)
            )
        );
    }
    test_field_Hidden();
    fn test_field_IsFallbackWindow() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsFallbackWindow) as usize - ptr as usize
            },
            211usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(IsFallbackWindow)
            )
        );
    }
    test_field_IsFallbackWindow();
    fn test_field_IsExplicitChild() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsExplicitChild) as usize - ptr as usize
            },
            212usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(IsExplicitChild)
            )
        );
    }
    test_field_IsExplicitChild();
    fn test_field_HasCloseButton() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HasCloseButton) as usize - ptr as usize
            },
            213usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(HasCloseButton)
            )
        );
    }
    test_field_HasCloseButton();
    fn test_field_ResizeBorderHeld() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ResizeBorderHeld) as usize - ptr as usize
            },
            214usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(ResizeBorderHeld)
            )
        );
    }
    test_field_ResizeBorderHeld();
    fn test_field_BeginCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BeginCount) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(BeginCount)
            )
        );
    }
    test_field_BeginCount();
    fn test_field_BeginOrderWithinParent() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BeginOrderWithinParent) as usize - ptr as usize
            },
            218usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(BeginOrderWithinParent)
            )
        );
    }
    test_field_BeginOrderWithinParent();
    fn test_field_BeginOrderWithinContext() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BeginOrderWithinContext) as usize - ptr as usize
            },
            220usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(BeginOrderWithinContext)
            )
        );
    }
    test_field_BeginOrderWithinContext();
    fn test_field_FocusOrder() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FocusOrder) as usize - ptr as usize
            },
            222usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(FocusOrder)
            )
        );
    }
    test_field_FocusOrder();
    fn test_field_PopupId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PopupId) as usize - ptr as usize
            },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(PopupId)
            )
        );
    }
    test_field_PopupId();
    fn test_field_AutoFitFramesX() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AutoFitFramesX) as usize - ptr as usize
            },
            228usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(AutoFitFramesX)
            )
        );
    }
    test_field_AutoFitFramesX();
    fn test_field_AutoFitFramesY() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AutoFitFramesY) as usize - ptr as usize
            },
            229usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(AutoFitFramesY)
            )
        );
    }
    test_field_AutoFitFramesY();
    fn test_field_AutoFitChildAxises() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AutoFitChildAxises) as usize - ptr as usize
            },
            230usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(AutoFitChildAxises)
            )
        );
    }
    test_field_AutoFitChildAxises();
    fn test_field_AutoFitOnlyGrows() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AutoFitOnlyGrows) as usize - ptr as usize
            },
            231usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(AutoFitOnlyGrows)
            )
        );
    }
    test_field_AutoFitOnlyGrows();
    fn test_field_AutoPosLastDirection() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AutoPosLastDirection) as usize - ptr as usize
            },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(AutoPosLastDirection)
            )
        );
    }
    test_field_AutoPosLastDirection();
    fn test_field_HiddenFramesCanSkipItems() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HiddenFramesCanSkipItems) as usize - ptr as usize
            },
            236usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(HiddenFramesCanSkipItems)
            )
        );
    }
    test_field_HiddenFramesCanSkipItems();
    fn test_field_HiddenFramesCannotSkipItems() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HiddenFramesCannotSkipItems) as usize - ptr as usize
            },
            237usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(HiddenFramesCannotSkipItems)
            )
        );
    }
    test_field_HiddenFramesCannotSkipItems();
    fn test_field_HiddenFramesForRenderOnly() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HiddenFramesForRenderOnly) as usize - ptr as usize
            },
            238usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(HiddenFramesForRenderOnly)
            )
        );
    }
    test_field_HiddenFramesForRenderOnly();
    fn test_field_DisableInputsFrames() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DisableInputsFrames) as usize - ptr as usize
            },
            239usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(DisableInputsFrames)
            )
        );
    }
    test_field_DisableInputsFrames();
    fn test_field_SetWindowPosVal() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetWindowPosVal) as usize - ptr as usize
            },
            244usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(SetWindowPosVal)
            )
        );
    }
    test_field_SetWindowPosVal();
    fn test_field_SetWindowPosPivot() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SetWindowPosPivot) as usize - ptr as usize
            },
            252usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(SetWindowPosPivot)
            )
        );
    }
    test_field_SetWindowPosPivot();
    fn test_field_IDStack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IDStack) as usize - ptr as usize
            },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(IDStack)
            )
        );
    }
    test_field_IDStack();
    fn test_field_DC() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DC) as usize - ptr as usize
            },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(DC)
            )
        );
    }
    test_field_DC();
    fn test_field_OuterRectClipped() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).OuterRectClipped) as usize - ptr as usize
            },
            520usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(OuterRectClipped)
            )
        );
    }
    test_field_OuterRectClipped();
    fn test_field_InnerRect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).InnerRect) as usize - ptr as usize
            },
            536usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(InnerRect)
            )
        );
    }
    test_field_InnerRect();
    fn test_field_InnerClipRect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).InnerClipRect) as usize - ptr as usize
            },
            552usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(InnerClipRect)
            )
        );
    }
    test_field_InnerClipRect();
    fn test_field_WorkRect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WorkRect) as usize - ptr as usize
            },
            568usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(WorkRect)
            )
        );
    }
    test_field_WorkRect();
    fn test_field_ParentWorkRect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ParentWorkRect) as usize - ptr as usize
            },
            584usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(ParentWorkRect)
            )
        );
    }
    test_field_ParentWorkRect();
    fn test_field_ClipRect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ClipRect) as usize - ptr as usize
            },
            600usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(ClipRect)
            )
        );
    }
    test_field_ClipRect();
    fn test_field_ContentRegionRect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ContentRegionRect) as usize - ptr as usize
            },
            616usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(ContentRegionRect)
            )
        );
    }
    test_field_ContentRegionRect();
    fn test_field_HitTestHoleSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HitTestHoleSize) as usize - ptr as usize
            },
            632usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(HitTestHoleSize)
            )
        );
    }
    test_field_HitTestHoleSize();
    fn test_field_HitTestHoleOffset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HitTestHoleOffset) as usize - ptr as usize
            },
            636usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(HitTestHoleOffset)
            )
        );
    }
    test_field_HitTestHoleOffset();
    fn test_field_LastFrameActive() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LastFrameActive) as usize - ptr as usize
            },
            640usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(LastFrameActive)
            )
        );
    }
    test_field_LastFrameActive();
    fn test_field_LastFrameJustFocused() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LastFrameJustFocused) as usize - ptr as usize
            },
            644usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(LastFrameJustFocused)
            )
        );
    }
    test_field_LastFrameJustFocused();
    fn test_field_LastTimeActive() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LastTimeActive) as usize - ptr as usize
            },
            648usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(LastTimeActive)
            )
        );
    }
    test_field_LastTimeActive();
    fn test_field_ItemWidthDefault() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ItemWidthDefault) as usize - ptr as usize
            },
            652usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(ItemWidthDefault)
            )
        );
    }
    test_field_ItemWidthDefault();
    fn test_field_StateStorage() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).StateStorage) as usize - ptr as usize
            },
            656usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(StateStorage)
            )
        );
    }
    test_field_StateStorage();
    fn test_field_ColumnsStorage() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ColumnsStorage) as usize - ptr as usize
            },
            672usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(ColumnsStorage)
            )
        );
    }
    test_field_ColumnsStorage();
    fn test_field_FontWindowScale() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FontWindowScale) as usize - ptr as usize
            },
            688usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(FontWindowScale)
            )
        );
    }
    test_field_FontWindowScale();
    fn test_field_FontDpiScale() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FontDpiScale) as usize - ptr as usize
            },
            692usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(FontDpiScale)
            )
        );
    }
    test_field_FontDpiScale();
    fn test_field_SettingsOffset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SettingsOffset) as usize - ptr as usize
            },
            696usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(SettingsOffset)
            )
        );
    }
    test_field_SettingsOffset();
    fn test_field_DrawList() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DrawList) as usize - ptr as usize
            },
            704usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(DrawList)
            )
        );
    }
    test_field_DrawList();
    fn test_field_DrawListInst() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DrawListInst) as usize - ptr as usize
            },
            712usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(DrawListInst)
            )
        );
    }
    test_field_DrawListInst();
    fn test_field_ParentWindow() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ParentWindow) as usize - ptr as usize
            },
            912usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(ParentWindow)
            )
        );
    }
    test_field_ParentWindow();
    fn test_field_ParentWindowInBeginStack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ParentWindowInBeginStack) as usize - ptr as usize
            },
            920usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(ParentWindowInBeginStack)
            )
        );
    }
    test_field_ParentWindowInBeginStack();
    fn test_field_RootWindow() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RootWindow) as usize - ptr as usize
            },
            928usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(RootWindow)
            )
        );
    }
    test_field_RootWindow();
    fn test_field_RootWindowPopupTree() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RootWindowPopupTree) as usize - ptr as usize
            },
            936usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(RootWindowPopupTree)
            )
        );
    }
    test_field_RootWindowPopupTree();
    fn test_field_RootWindowDockTree() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RootWindowDockTree) as usize - ptr as usize
            },
            944usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(RootWindowDockTree)
            )
        );
    }
    test_field_RootWindowDockTree();
    fn test_field_RootWindowForTitleBarHighlight() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RootWindowForTitleBarHighlight) as usize - ptr as usize
            },
            952usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(RootWindowForTitleBarHighlight)
            )
        );
    }
    test_field_RootWindowForTitleBarHighlight();
    fn test_field_RootWindowForNav() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RootWindowForNav) as usize - ptr as usize
            },
            960usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(RootWindowForNav)
            )
        );
    }
    test_field_RootWindowForNav();
    fn test_field_NavLastChildNavWindow() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavLastChildNavWindow) as usize - ptr as usize
            },
            968usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(NavLastChildNavWindow)
            )
        );
    }
    test_field_NavLastChildNavWindow();
    fn test_field_NavLastIds() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavLastIds) as usize - ptr as usize
            },
            976usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(NavLastIds)
            )
        );
    }
    test_field_NavLastIds();
    fn test_field_NavRectRel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavRectRel) as usize - ptr as usize
            },
            984usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(NavRectRel)
            )
        );
    }
    test_field_NavRectRel();
    fn test_field_MemoryDrawListIdxCapacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MemoryDrawListIdxCapacity) as usize - ptr as usize
            },
            1016usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(MemoryDrawListIdxCapacity)
            )
        );
    }
    test_field_MemoryDrawListIdxCapacity();
    fn test_field_MemoryDrawListVtxCapacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MemoryDrawListVtxCapacity) as usize - ptr as usize
            },
            1020usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(MemoryDrawListVtxCapacity)
            )
        );
    }
    test_field_MemoryDrawListVtxCapacity();
    fn test_field_MemoryCompacted() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MemoryCompacted) as usize - ptr as usize
            },
            1024usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(MemoryCompacted)
            )
        );
    }
    test_field_MemoryCompacted();
    fn test_field_DockOrder() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DockOrder) as usize - ptr as usize
            },
            1026usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(DockOrder)
            )
        );
    }
    test_field_DockOrder();
    fn test_field_DockStyle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DockStyle) as usize - ptr as usize
            },
            1028usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(DockStyle)
            )
        );
    }
    test_field_DockStyle();
    fn test_field_DockNode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DockNode) as usize - ptr as usize
            },
            1056usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(DockNode)
            )
        );
    }
    test_field_DockNode();
    fn test_field_DockNodeAsHost() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DockNodeAsHost) as usize - ptr as usize
            },
            1064usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(DockNodeAsHost)
            )
        );
    }
    test_field_DockNodeAsHost();
    fn test_field_DockId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DockId) as usize - ptr as usize
            },
            1072usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(DockId)
            )
        );
    }
    test_field_DockId();
    fn test_field_DockTabItemStatusFlags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DockTabItemStatusFlags) as usize - ptr as usize
            },
            1076usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(DockTabItemStatusFlags)
            )
        );
    }
    test_field_DockTabItemStatusFlags();
    fn test_field_DockTabItemRect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiWindow>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DockTabItemRect) as usize - ptr as usize
            },
            1080usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiWindow),
                "::",
                stringify!(DockTabItemRect)
            )
        );
    }
    test_field_DockTabItemRect();
}
impl ImGuiWindow {
    #[inline]
    pub fn SetWindowPosAllowFlags(&self) -> ImGuiCond {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_SetWindowPosAllowFlags(&mut self, val: ImGuiCond) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn SetWindowSizeAllowFlags(&self) -> ImGuiCond {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_SetWindowSizeAllowFlags(&mut self, val: ImGuiCond) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn SetWindowCollapsedAllowFlags(&self) -> ImGuiCond {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_SetWindowCollapsedAllowFlags(&mut self, val: ImGuiCond) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn SetWindowDockAllowFlags(&self) -> ImGuiCond {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_SetWindowDockAllowFlags(&mut self, val: ImGuiCond) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        SetWindowPosAllowFlags: ImGuiCond,
        SetWindowSizeAllowFlags: ImGuiCond,
        SetWindowCollapsedAllowFlags: ImGuiCond,
        SetWindowDockAllowFlags: ImGuiCond,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let SetWindowPosAllowFlags: u32 =
                unsafe { ::std::mem::transmute(SetWindowPosAllowFlags) };
            SetWindowPosAllowFlags as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let SetWindowSizeAllowFlags: u32 =
                unsafe { ::std::mem::transmute(SetWindowSizeAllowFlags) };
            SetWindowSizeAllowFlags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 8u8, {
            let SetWindowCollapsedAllowFlags: u32 =
                unsafe { ::std::mem::transmute(SetWindowCollapsedAllowFlags) };
            SetWindowCollapsedAllowFlags as u64
        });
        __bindgen_bitfield_unit.set(24usize, 8u8, {
            let SetWindowDockAllowFlags: u32 =
                unsafe { ::std::mem::transmute(SetWindowDockAllowFlags) };
            SetWindowDockAllowFlags as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn DockIsActive(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_DockIsActive(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn DockNodeIsVisible(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_DockNodeIsVisible(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn DockTabIsVisible(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_DockTabIsVisible(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn DockTabWantClose(&self) -> bool {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_DockTabWantClose(&mut self, val: bool) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        DockIsActive: bool,
        DockNodeIsVisible: bool,
        DockTabIsVisible: bool,
        DockTabWantClose: bool,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let DockIsActive: u8 = unsafe { ::std::mem::transmute(DockIsActive) };
            DockIsActive as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let DockNodeIsVisible: u8 = unsafe { ::std::mem::transmute(DockNodeIsVisible) };
            DockNodeIsVisible as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let DockTabIsVisible: u8 = unsafe { ::std::mem::transmute(DockTabIsVisible) };
            DockTabIsVisible as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let DockTabWantClose: u8 = unsafe { ::std::mem::transmute(DockTabWantClose) };
            DockTabWantClose as u64
        });
        __bindgen_bitfield_unit
    }
}
pub const ImGuiTabBarFlagsPrivate__ImGuiTabBarFlags_DockNode: ImGuiTabBarFlagsPrivate_ = 1048576;
pub const ImGuiTabBarFlagsPrivate__ImGuiTabBarFlags_IsFocused: ImGuiTabBarFlagsPrivate_ = 2097152;
pub const ImGuiTabBarFlagsPrivate__ImGuiTabBarFlags_SaveSettings: ImGuiTabBarFlagsPrivate_ =
    4194304;
pub type ImGuiTabBarFlagsPrivate_ = ::std::os::raw::c_int;
pub const ImGuiTabItemFlagsPrivate__ImGuiTabItemFlags_SectionMask_: ImGuiTabItemFlagsPrivate_ = 192;
pub const ImGuiTabItemFlagsPrivate__ImGuiTabItemFlags_NoCloseButton: ImGuiTabItemFlagsPrivate_ =
    1048576;
pub const ImGuiTabItemFlagsPrivate__ImGuiTabItemFlags_Button: ImGuiTabItemFlagsPrivate_ = 2097152;
pub const ImGuiTabItemFlagsPrivate__ImGuiTabItemFlags_Unsorted: ImGuiTabItemFlagsPrivate_ = 4194304;
pub const ImGuiTabItemFlagsPrivate__ImGuiTabItemFlags_Preview: ImGuiTabItemFlagsPrivate_ = 8388608;
pub type ImGuiTabItemFlagsPrivate_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTabItem {
    pub ID: ImGuiID,
    pub Flags: ImGuiTabItemFlags,
    pub Window: *mut ImGuiWindow,
    pub LastFrameVisible: ::std::os::raw::c_int,
    pub LastFrameSelected: ::std::os::raw::c_int,
    pub Offset: f32,
    pub Width: f32,
    pub ContentWidth: f32,
    pub RequestedWidth: f32,
    pub NameOffset: ImS32,
    pub BeginOrder: ImS16,
    pub IndexDuringLayout: ImS16,
    pub WantClose: bool,
}
#[test]
fn bindgen_test_layout_ImGuiTabItem() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiTabItem>(),
        56usize,
        concat!("Size of: ", stringify!(ImGuiTabItem))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTabItem>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiTabItem))
    );
    fn test_field_ID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTabItem>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ID) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTabItem),
                "::",
                stringify!(ID)
            )
        );
    }
    test_field_ID();
    fn test_field_Flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTabItem>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTabItem),
                "::",
                stringify!(Flags)
            )
        );
    }
    test_field_Flags();
    fn test_field_Window() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTabItem>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Window) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTabItem),
                "::",
                stringify!(Window)
            )
        );
    }
    test_field_Window();
    fn test_field_LastFrameVisible() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTabItem>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LastFrameVisible) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTabItem),
                "::",
                stringify!(LastFrameVisible)
            )
        );
    }
    test_field_LastFrameVisible();
    fn test_field_LastFrameSelected() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTabItem>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LastFrameSelected) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTabItem),
                "::",
                stringify!(LastFrameSelected)
            )
        );
    }
    test_field_LastFrameSelected();
    fn test_field_Offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTabItem>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Offset) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTabItem),
                "::",
                stringify!(Offset)
            )
        );
    }
    test_field_Offset();
    fn test_field_Width() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTabItem>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Width) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTabItem),
                "::",
                stringify!(Width)
            )
        );
    }
    test_field_Width();
    fn test_field_ContentWidth() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTabItem>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ContentWidth) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTabItem),
                "::",
                stringify!(ContentWidth)
            )
        );
    }
    test_field_ContentWidth();
    fn test_field_RequestedWidth() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTabItem>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RequestedWidth) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTabItem),
                "::",
                stringify!(RequestedWidth)
            )
        );
    }
    test_field_RequestedWidth();
    fn test_field_NameOffset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTabItem>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NameOffset) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTabItem),
                "::",
                stringify!(NameOffset)
            )
        );
    }
    test_field_NameOffset();
    fn test_field_BeginOrder() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTabItem>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BeginOrder) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTabItem),
                "::",
                stringify!(BeginOrder)
            )
        );
    }
    test_field_BeginOrder();
    fn test_field_IndexDuringLayout() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTabItem>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IndexDuringLayout) as usize - ptr as usize
            },
            46usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTabItem),
                "::",
                stringify!(IndexDuringLayout)
            )
        );
    }
    test_field_IndexDuringLayout();
    fn test_field_WantClose() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTabItem>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WantClose) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTabItem),
                "::",
                stringify!(WantClose)
            )
        );
    }
    test_field_WantClose();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiTabItem {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiTabItem,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiTabItem() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiTabItem>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiTabItem))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiTabItem>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiTabItem))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiTabItem>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiTabItem),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiTabItem>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiTabItem),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiTabItem>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiTabItem),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTabBar {
    pub Tabs: ImVector_ImGuiTabItem,
    pub Flags: ImGuiTabBarFlags,
    pub ID: ImGuiID,
    pub SelectedTabId: ImGuiID,
    pub NextSelectedTabId: ImGuiID,
    pub VisibleTabId: ImGuiID,
    pub CurrFrameVisible: ::std::os::raw::c_int,
    pub PrevFrameVisible: ::std::os::raw::c_int,
    pub BarRect: ImRect,
    pub CurrTabsContentsHeight: f32,
    pub PrevTabsContentsHeight: f32,
    pub WidthAllTabs: f32,
    pub WidthAllTabsIdeal: f32,
    pub ScrollingAnim: f32,
    pub ScrollingTarget: f32,
    pub ScrollingTargetDistToVisibility: f32,
    pub ScrollingSpeed: f32,
    pub ScrollingRectMinX: f32,
    pub ScrollingRectMaxX: f32,
    pub ReorderRequestTabId: ImGuiID,
    pub ReorderRequestOffset: ImS16,
    pub BeginCount: ImS8,
    pub WantLayout: bool,
    pub VisibleTabWasSubmitted: bool,
    pub TabsAddedNew: bool,
    pub TabsActiveCount: ImS16,
    pub LastTabItemIdx: ImS16,
    pub ItemSpacingY: f32,
    pub FramePadding: ImVec2,
    pub BackupCursorPos: ImVec2,
    pub TabsNames: ImGuiTextBuffer,
}
#[test]
fn bindgen_test_layout_ImGuiTabBar() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiTabBar>(),
        152usize,
        concat!("Size of: ", stringify!(ImGuiTabBar))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTabBar>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiTabBar))
    );
    fn test_field_Tabs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTabBar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Tabs) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTabBar),
                "::",
                stringify!(Tabs)
            )
        );
    }
    test_field_Tabs();
    fn test_field_Flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTabBar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTabBar),
                "::",
                stringify!(Flags)
            )
        );
    }
    test_field_Flags();
    fn test_field_ID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTabBar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ID) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTabBar),
                "::",
                stringify!(ID)
            )
        );
    }
    test_field_ID();
    fn test_field_SelectedTabId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTabBar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SelectedTabId) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTabBar),
                "::",
                stringify!(SelectedTabId)
            )
        );
    }
    test_field_SelectedTabId();
    fn test_field_NextSelectedTabId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTabBar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NextSelectedTabId) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTabBar),
                "::",
                stringify!(NextSelectedTabId)
            )
        );
    }
    test_field_NextSelectedTabId();
    fn test_field_VisibleTabId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTabBar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VisibleTabId) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTabBar),
                "::",
                stringify!(VisibleTabId)
            )
        );
    }
    test_field_VisibleTabId();
    fn test_field_CurrFrameVisible() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTabBar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CurrFrameVisible) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTabBar),
                "::",
                stringify!(CurrFrameVisible)
            )
        );
    }
    test_field_CurrFrameVisible();
    fn test_field_PrevFrameVisible() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTabBar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PrevFrameVisible) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTabBar),
                "::",
                stringify!(PrevFrameVisible)
            )
        );
    }
    test_field_PrevFrameVisible();
    fn test_field_BarRect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTabBar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BarRect) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTabBar),
                "::",
                stringify!(BarRect)
            )
        );
    }
    test_field_BarRect();
    fn test_field_CurrTabsContentsHeight() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTabBar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CurrTabsContentsHeight) as usize - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTabBar),
                "::",
                stringify!(CurrTabsContentsHeight)
            )
        );
    }
    test_field_CurrTabsContentsHeight();
    fn test_field_PrevTabsContentsHeight() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTabBar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PrevTabsContentsHeight) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTabBar),
                "::",
                stringify!(PrevTabsContentsHeight)
            )
        );
    }
    test_field_PrevTabsContentsHeight();
    fn test_field_WidthAllTabs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTabBar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WidthAllTabs) as usize - ptr as usize
            },
            68usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTabBar),
                "::",
                stringify!(WidthAllTabs)
            )
        );
    }
    test_field_WidthAllTabs();
    fn test_field_WidthAllTabsIdeal() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTabBar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WidthAllTabsIdeal) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTabBar),
                "::",
                stringify!(WidthAllTabsIdeal)
            )
        );
    }
    test_field_WidthAllTabsIdeal();
    fn test_field_ScrollingAnim() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTabBar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ScrollingAnim) as usize - ptr as usize
            },
            76usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTabBar),
                "::",
                stringify!(ScrollingAnim)
            )
        );
    }
    test_field_ScrollingAnim();
    fn test_field_ScrollingTarget() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTabBar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ScrollingTarget) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTabBar),
                "::",
                stringify!(ScrollingTarget)
            )
        );
    }
    test_field_ScrollingTarget();
    fn test_field_ScrollingTargetDistToVisibility() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTabBar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ScrollingTargetDistToVisibility) as usize - ptr as usize
            },
            84usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTabBar),
                "::",
                stringify!(ScrollingTargetDistToVisibility)
            )
        );
    }
    test_field_ScrollingTargetDistToVisibility();
    fn test_field_ScrollingSpeed() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTabBar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ScrollingSpeed) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTabBar),
                "::",
                stringify!(ScrollingSpeed)
            )
        );
    }
    test_field_ScrollingSpeed();
    fn test_field_ScrollingRectMinX() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTabBar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ScrollingRectMinX) as usize - ptr as usize
            },
            92usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTabBar),
                "::",
                stringify!(ScrollingRectMinX)
            )
        );
    }
    test_field_ScrollingRectMinX();
    fn test_field_ScrollingRectMaxX() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTabBar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ScrollingRectMaxX) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTabBar),
                "::",
                stringify!(ScrollingRectMaxX)
            )
        );
    }
    test_field_ScrollingRectMaxX();
    fn test_field_ReorderRequestTabId() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTabBar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReorderRequestTabId) as usize - ptr as usize
            },
            100usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTabBar),
                "::",
                stringify!(ReorderRequestTabId)
            )
        );
    }
    test_field_ReorderRequestTabId();
    fn test_field_ReorderRequestOffset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTabBar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReorderRequestOffset) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTabBar),
                "::",
                stringify!(ReorderRequestOffset)
            )
        );
    }
    test_field_ReorderRequestOffset();
    fn test_field_BeginCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTabBar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BeginCount) as usize - ptr as usize
            },
            106usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTabBar),
                "::",
                stringify!(BeginCount)
            )
        );
    }
    test_field_BeginCount();
    fn test_field_WantLayout() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTabBar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WantLayout) as usize - ptr as usize
            },
            107usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTabBar),
                "::",
                stringify!(WantLayout)
            )
        );
    }
    test_field_WantLayout();
    fn test_field_VisibleTabWasSubmitted() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTabBar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VisibleTabWasSubmitted) as usize - ptr as usize
            },
            108usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTabBar),
                "::",
                stringify!(VisibleTabWasSubmitted)
            )
        );
    }
    test_field_VisibleTabWasSubmitted();
    fn test_field_TabsAddedNew() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTabBar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TabsAddedNew) as usize - ptr as usize
            },
            109usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTabBar),
                "::",
                stringify!(TabsAddedNew)
            )
        );
    }
    test_field_TabsAddedNew();
    fn test_field_TabsActiveCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTabBar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TabsActiveCount) as usize - ptr as usize
            },
            110usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTabBar),
                "::",
                stringify!(TabsActiveCount)
            )
        );
    }
    test_field_TabsActiveCount();
    fn test_field_LastTabItemIdx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTabBar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LastTabItemIdx) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTabBar),
                "::",
                stringify!(LastTabItemIdx)
            )
        );
    }
    test_field_LastTabItemIdx();
    fn test_field_ItemSpacingY() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTabBar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ItemSpacingY) as usize - ptr as usize
            },
            116usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTabBar),
                "::",
                stringify!(ItemSpacingY)
            )
        );
    }
    test_field_ItemSpacingY();
    fn test_field_FramePadding() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTabBar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FramePadding) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTabBar),
                "::",
                stringify!(FramePadding)
            )
        );
    }
    test_field_FramePadding();
    fn test_field_BackupCursorPos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTabBar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BackupCursorPos) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTabBar),
                "::",
                stringify!(BackupCursorPos)
            )
        );
    }
    test_field_BackupCursorPos();
    fn test_field_TabsNames() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTabBar>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TabsNames) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTabBar),
                "::",
                stringify!(TabsNames)
            )
        );
    }
    test_field_TabsNames();
}
pub type ImGuiTableColumnIdx = ImS8;
pub type ImGuiTableDrawChannelIdx = ImU8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableColumn {
    pub Flags: ImGuiTableColumnFlags,
    pub WidthGiven: f32,
    pub MinX: f32,
    pub MaxX: f32,
    pub WidthRequest: f32,
    pub WidthAuto: f32,
    pub StretchWeight: f32,
    pub InitStretchWeightOrWidth: f32,
    pub ClipRect: ImRect,
    pub UserID: ImGuiID,
    pub WorkMinX: f32,
    pub WorkMaxX: f32,
    pub ItemWidth: f32,
    pub ContentMaxXFrozen: f32,
    pub ContentMaxXUnfrozen: f32,
    pub ContentMaxXHeadersUsed: f32,
    pub ContentMaxXHeadersIdeal: f32,
    pub NameOffset: ImS16,
    pub DisplayOrder: ImGuiTableColumnIdx,
    pub IndexWithinEnabledSet: ImGuiTableColumnIdx,
    pub PrevEnabledColumn: ImGuiTableColumnIdx,
    pub NextEnabledColumn: ImGuiTableColumnIdx,
    pub SortOrder: ImGuiTableColumnIdx,
    pub DrawChannelCurrent: ImGuiTableDrawChannelIdx,
    pub DrawChannelFrozen: ImGuiTableDrawChannelIdx,
    pub DrawChannelUnfrozen: ImGuiTableDrawChannelIdx,
    pub IsEnabled: bool,
    pub IsUserEnabled: bool,
    pub IsUserEnabledNextFrame: bool,
    pub IsVisibleX: bool,
    pub IsVisibleY: bool,
    pub IsRequestOutput: bool,
    pub IsSkipItems: bool,
    pub IsPreserveWidthAuto: bool,
    pub NavLayerCurrent: ImS8,
    pub AutoFitQueue: ImU8,
    pub CannotSkipItemsQueue: ImU8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub SortDirectionsAvailList: ImU8,
}
#[test]
fn bindgen_test_layout_ImGuiTableColumn() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiTableColumn>(),
        104usize,
        concat!("Size of: ", stringify!(ImGuiTableColumn))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTableColumn>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiTableColumn))
    );
    fn test_field_Flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableColumn>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableColumn),
                "::",
                stringify!(Flags)
            )
        );
    }
    test_field_Flags();
    fn test_field_WidthGiven() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableColumn>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WidthGiven) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableColumn),
                "::",
                stringify!(WidthGiven)
            )
        );
    }
    test_field_WidthGiven();
    fn test_field_MinX() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableColumn>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MinX) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableColumn),
                "::",
                stringify!(MinX)
            )
        );
    }
    test_field_MinX();
    fn test_field_MaxX() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableColumn>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MaxX) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableColumn),
                "::",
                stringify!(MaxX)
            )
        );
    }
    test_field_MaxX();
    fn test_field_WidthRequest() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableColumn>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WidthRequest) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableColumn),
                "::",
                stringify!(WidthRequest)
            )
        );
    }
    test_field_WidthRequest();
    fn test_field_WidthAuto() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableColumn>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WidthAuto) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableColumn),
                "::",
                stringify!(WidthAuto)
            )
        );
    }
    test_field_WidthAuto();
    fn test_field_StretchWeight() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableColumn>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).StretchWeight) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableColumn),
                "::",
                stringify!(StretchWeight)
            )
        );
    }
    test_field_StretchWeight();
    fn test_field_InitStretchWeightOrWidth() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableColumn>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).InitStretchWeightOrWidth) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableColumn),
                "::",
                stringify!(InitStretchWeightOrWidth)
            )
        );
    }
    test_field_InitStretchWeightOrWidth();
    fn test_field_ClipRect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableColumn>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ClipRect) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableColumn),
                "::",
                stringify!(ClipRect)
            )
        );
    }
    test_field_ClipRect();
    fn test_field_UserID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableColumn>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).UserID) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableColumn),
                "::",
                stringify!(UserID)
            )
        );
    }
    test_field_UserID();
    fn test_field_WorkMinX() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableColumn>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WorkMinX) as usize - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableColumn),
                "::",
                stringify!(WorkMinX)
            )
        );
    }
    test_field_WorkMinX();
    fn test_field_WorkMaxX() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableColumn>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WorkMaxX) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableColumn),
                "::",
                stringify!(WorkMaxX)
            )
        );
    }
    test_field_WorkMaxX();
    fn test_field_ItemWidth() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableColumn>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ItemWidth) as usize - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableColumn),
                "::",
                stringify!(ItemWidth)
            )
        );
    }
    test_field_ItemWidth();
    fn test_field_ContentMaxXFrozen() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableColumn>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ContentMaxXFrozen) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableColumn),
                "::",
                stringify!(ContentMaxXFrozen)
            )
        );
    }
    test_field_ContentMaxXFrozen();
    fn test_field_ContentMaxXUnfrozen() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableColumn>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ContentMaxXUnfrozen) as usize - ptr as usize
            },
            68usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableColumn),
                "::",
                stringify!(ContentMaxXUnfrozen)
            )
        );
    }
    test_field_ContentMaxXUnfrozen();
    fn test_field_ContentMaxXHeadersUsed() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableColumn>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ContentMaxXHeadersUsed) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableColumn),
                "::",
                stringify!(ContentMaxXHeadersUsed)
            )
        );
    }
    test_field_ContentMaxXHeadersUsed();
    fn test_field_ContentMaxXHeadersIdeal() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableColumn>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ContentMaxXHeadersIdeal) as usize - ptr as usize
            },
            76usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableColumn),
                "::",
                stringify!(ContentMaxXHeadersIdeal)
            )
        );
    }
    test_field_ContentMaxXHeadersIdeal();
    fn test_field_NameOffset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableColumn>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NameOffset) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableColumn),
                "::",
                stringify!(NameOffset)
            )
        );
    }
    test_field_NameOffset();
    fn test_field_DisplayOrder() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableColumn>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DisplayOrder) as usize - ptr as usize
            },
            82usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableColumn),
                "::",
                stringify!(DisplayOrder)
            )
        );
    }
    test_field_DisplayOrder();
    fn test_field_IndexWithinEnabledSet() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableColumn>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IndexWithinEnabledSet) as usize - ptr as usize
            },
            83usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableColumn),
                "::",
                stringify!(IndexWithinEnabledSet)
            )
        );
    }
    test_field_IndexWithinEnabledSet();
    fn test_field_PrevEnabledColumn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableColumn>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).PrevEnabledColumn) as usize - ptr as usize
            },
            84usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableColumn),
                "::",
                stringify!(PrevEnabledColumn)
            )
        );
    }
    test_field_PrevEnabledColumn();
    fn test_field_NextEnabledColumn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableColumn>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NextEnabledColumn) as usize - ptr as usize
            },
            85usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableColumn),
                "::",
                stringify!(NextEnabledColumn)
            )
        );
    }
    test_field_NextEnabledColumn();
    fn test_field_SortOrder() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableColumn>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SortOrder) as usize - ptr as usize
            },
            86usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableColumn),
                "::",
                stringify!(SortOrder)
            )
        );
    }
    test_field_SortOrder();
    fn test_field_DrawChannelCurrent() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableColumn>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DrawChannelCurrent) as usize - ptr as usize
            },
            87usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableColumn),
                "::",
                stringify!(DrawChannelCurrent)
            )
        );
    }
    test_field_DrawChannelCurrent();
    fn test_field_DrawChannelFrozen() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableColumn>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DrawChannelFrozen) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableColumn),
                "::",
                stringify!(DrawChannelFrozen)
            )
        );
    }
    test_field_DrawChannelFrozen();
    fn test_field_DrawChannelUnfrozen() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableColumn>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DrawChannelUnfrozen) as usize - ptr as usize
            },
            89usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableColumn),
                "::",
                stringify!(DrawChannelUnfrozen)
            )
        );
    }
    test_field_DrawChannelUnfrozen();
    fn test_field_IsEnabled() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableColumn>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsEnabled) as usize - ptr as usize
            },
            90usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableColumn),
                "::",
                stringify!(IsEnabled)
            )
        );
    }
    test_field_IsEnabled();
    fn test_field_IsUserEnabled() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableColumn>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsUserEnabled) as usize - ptr as usize
            },
            91usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableColumn),
                "::",
                stringify!(IsUserEnabled)
            )
        );
    }
    test_field_IsUserEnabled();
    fn test_field_IsUserEnabledNextFrame() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableColumn>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsUserEnabledNextFrame) as usize - ptr as usize
            },
            92usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableColumn),
                "::",
                stringify!(IsUserEnabledNextFrame)
            )
        );
    }
    test_field_IsUserEnabledNextFrame();
    fn test_field_IsVisibleX() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableColumn>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsVisibleX) as usize - ptr as usize
            },
            93usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableColumn),
                "::",
                stringify!(IsVisibleX)
            )
        );
    }
    test_field_IsVisibleX();
    fn test_field_IsVisibleY() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableColumn>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsVisibleY) as usize - ptr as usize
            },
            94usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableColumn),
                "::",
                stringify!(IsVisibleY)
            )
        );
    }
    test_field_IsVisibleY();
    fn test_field_IsRequestOutput() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableColumn>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsRequestOutput) as usize - ptr as usize
            },
            95usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableColumn),
                "::",
                stringify!(IsRequestOutput)
            )
        );
    }
    test_field_IsRequestOutput();
    fn test_field_IsSkipItems() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableColumn>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsSkipItems) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableColumn),
                "::",
                stringify!(IsSkipItems)
            )
        );
    }
    test_field_IsSkipItems();
    fn test_field_IsPreserveWidthAuto() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableColumn>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsPreserveWidthAuto) as usize - ptr as usize
            },
            97usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableColumn),
                "::",
                stringify!(IsPreserveWidthAuto)
            )
        );
    }
    test_field_IsPreserveWidthAuto();
    fn test_field_NavLayerCurrent() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableColumn>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).NavLayerCurrent) as usize - ptr as usize
            },
            98usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableColumn),
                "::",
                stringify!(NavLayerCurrent)
            )
        );
    }
    test_field_NavLayerCurrent();
    fn test_field_AutoFitQueue() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableColumn>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AutoFitQueue) as usize - ptr as usize
            },
            99usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableColumn),
                "::",
                stringify!(AutoFitQueue)
            )
        );
    }
    test_field_AutoFitQueue();
    fn test_field_CannotSkipItemsQueue() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableColumn>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CannotSkipItemsQueue) as usize - ptr as usize
            },
            100usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableColumn),
                "::",
                stringify!(CannotSkipItemsQueue)
            )
        );
    }
    test_field_CannotSkipItemsQueue();
    fn test_field_SortDirectionsAvailList() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableColumn>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SortDirectionsAvailList) as usize - ptr as usize
            },
            102usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableColumn),
                "::",
                stringify!(SortDirectionsAvailList)
            )
        );
    }
    test_field_SortDirectionsAvailList();
}
impl ImGuiTableColumn {
    #[inline]
    pub fn SortDirection(&self) -> ImU8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_SortDirection(&mut self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn SortDirectionsAvailCount(&self) -> ImU8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_SortDirectionsAvailCount(&mut self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn SortDirectionsAvailMask(&self) -> ImU8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_SortDirectionsAvailMask(&mut self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        SortDirection: ImU8,
        SortDirectionsAvailCount: ImU8,
        SortDirectionsAvailMask: ImU8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let SortDirection: u8 = unsafe { ::std::mem::transmute(SortDirection) };
            SortDirection as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let SortDirectionsAvailCount: u8 =
                unsafe { ::std::mem::transmute(SortDirectionsAvailCount) };
            SortDirectionsAvailCount as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let SortDirectionsAvailMask: u8 =
                unsafe { ::std::mem::transmute(SortDirectionsAvailMask) };
            SortDirectionsAvailMask as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableCellData {
    pub BgColor: ImU32,
    pub Column: ImGuiTableColumnIdx,
}
#[test]
fn bindgen_test_layout_ImGuiTableCellData() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiTableCellData>(),
        8usize,
        concat!("Size of: ", stringify!(ImGuiTableCellData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTableCellData>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiTableCellData))
    );
    fn test_field_BgColor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableCellData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BgColor) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableCellData),
                "::",
                stringify!(BgColor)
            )
        );
    }
    test_field_BgColor();
    fn test_field_Column() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableCellData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Column) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableCellData),
                "::",
                stringify!(Column)
            )
        );
    }
    test_field_Column();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableInstanceData {
    pub LastOuterHeight: f32,
    pub LastFirstRowHeight: f32,
}
#[test]
fn bindgen_test_layout_ImGuiTableInstanceData() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiTableInstanceData>(),
        8usize,
        concat!("Size of: ", stringify!(ImGuiTableInstanceData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTableInstanceData>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiTableInstanceData))
    );
    fn test_field_LastOuterHeight() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableInstanceData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LastOuterHeight) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableInstanceData),
                "::",
                stringify!(LastOuterHeight)
            )
        );
    }
    test_field_LastOuterHeight();
    fn test_field_LastFirstRowHeight() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableInstanceData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LastFirstRowHeight) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableInstanceData),
                "::",
                stringify!(LastFirstRowHeight)
            )
        );
    }
    test_field_LastFirstRowHeight();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImSpan_ImGuiTableColumn {
    pub Data: *mut ImGuiTableColumn,
    pub DataEnd: *mut ImGuiTableColumn,
}
#[test]
fn bindgen_test_layout_ImSpan_ImGuiTableColumn() {
    assert_eq!(
        ::std::mem::size_of::<ImSpan_ImGuiTableColumn>(),
        16usize,
        concat!("Size of: ", stringify!(ImSpan_ImGuiTableColumn))
    );
    assert_eq!(
        ::std::mem::align_of::<ImSpan_ImGuiTableColumn>(),
        8usize,
        concat!("Alignment of ", stringify!(ImSpan_ImGuiTableColumn))
    );
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImSpan_ImGuiTableColumn>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImSpan_ImGuiTableColumn),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
    fn test_field_DataEnd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImSpan_ImGuiTableColumn>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DataEnd) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImSpan_ImGuiTableColumn),
                "::",
                stringify!(DataEnd)
            )
        );
    }
    test_field_DataEnd();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImSpan_ImGuiTableColumnIdx {
    pub Data: *mut ImGuiTableColumnIdx,
    pub DataEnd: *mut ImGuiTableColumnIdx,
}
#[test]
fn bindgen_test_layout_ImSpan_ImGuiTableColumnIdx() {
    assert_eq!(
        ::std::mem::size_of::<ImSpan_ImGuiTableColumnIdx>(),
        16usize,
        concat!("Size of: ", stringify!(ImSpan_ImGuiTableColumnIdx))
    );
    assert_eq!(
        ::std::mem::align_of::<ImSpan_ImGuiTableColumnIdx>(),
        8usize,
        concat!("Alignment of ", stringify!(ImSpan_ImGuiTableColumnIdx))
    );
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImSpan_ImGuiTableColumnIdx>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImSpan_ImGuiTableColumnIdx),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
    fn test_field_DataEnd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImSpan_ImGuiTableColumnIdx>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DataEnd) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImSpan_ImGuiTableColumnIdx),
                "::",
                stringify!(DataEnd)
            )
        );
    }
    test_field_DataEnd();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImSpan_ImGuiTableCellData {
    pub Data: *mut ImGuiTableCellData,
    pub DataEnd: *mut ImGuiTableCellData,
}
#[test]
fn bindgen_test_layout_ImSpan_ImGuiTableCellData() {
    assert_eq!(
        ::std::mem::size_of::<ImSpan_ImGuiTableCellData>(),
        16usize,
        concat!("Size of: ", stringify!(ImSpan_ImGuiTableCellData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImSpan_ImGuiTableCellData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImSpan_ImGuiTableCellData))
    );
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImSpan_ImGuiTableCellData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImSpan_ImGuiTableCellData),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
    fn test_field_DataEnd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImSpan_ImGuiTableCellData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DataEnd) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImSpan_ImGuiTableCellData),
                "::",
                stringify!(DataEnd)
            )
        );
    }
    test_field_DataEnd();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiTableInstanceData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiTableInstanceData,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiTableInstanceData() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiTableInstanceData>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiTableInstanceData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiTableInstanceData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiTableInstanceData))
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiTableInstanceData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiTableInstanceData),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiTableInstanceData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiTableInstanceData),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImVector_ImGuiTableInstanceData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiTableInstanceData),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiTableColumnSortSpecs {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiTableColumnSortSpecs,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiTableColumnSortSpecs() {
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiTableColumnSortSpecs>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiTableColumnSortSpecs))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiTableColumnSortSpecs>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ImVector_ImGuiTableColumnSortSpecs)
        )
    );
    fn test_field_Size() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<ImVector_ImGuiTableColumnSortSpecs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiTableColumnSortSpecs),
                "::",
                stringify!(Size)
            )
        );
    }
    test_field_Size();
    fn test_field_Capacity() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<ImVector_ImGuiTableColumnSortSpecs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiTableColumnSortSpecs),
                "::",
                stringify!(Capacity)
            )
        );
    }
    test_field_Capacity();
    fn test_field_Data() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<ImVector_ImGuiTableColumnSortSpecs>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImVector_ImGuiTableColumnSortSpecs),
                "::",
                stringify!(Data)
            )
        );
    }
    test_field_Data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTable {
    pub ID: ImGuiID,
    pub Flags: ImGuiTableFlags,
    pub RawData: *mut ::std::os::raw::c_void,
    pub TempData: *mut ImGuiTableTempData,
    pub Columns: ImSpan_ImGuiTableColumn,
    pub DisplayOrderToIndex: ImSpan_ImGuiTableColumnIdx,
    pub RowCellData: ImSpan_ImGuiTableCellData,
    pub EnabledMaskByDisplayOrder: ImU64,
    pub EnabledMaskByIndex: ImU64,
    pub VisibleMaskByIndex: ImU64,
    pub RequestOutputMaskByIndex: ImU64,
    pub SettingsLoadedFlags: ImGuiTableFlags,
    pub SettingsOffset: ::std::os::raw::c_int,
    pub LastFrameActive: ::std::os::raw::c_int,
    pub ColumnsCount: ::std::os::raw::c_int,
    pub CurrentRow: ::std::os::raw::c_int,
    pub CurrentColumn: ::std::os::raw::c_int,
    pub InstanceCurrent: ImS16,
    pub InstanceInteracted: ImS16,
    pub RowPosY1: f32,
    pub RowPosY2: f32,
    pub RowMinHeight: f32,
    pub RowTextBaseline: f32,
    pub RowIndentOffsetX: f32,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub RowBgColorCounter: ::std::os::raw::c_int,
    pub RowBgColor: [ImU32; 2usize],
    pub BorderColorStrong: ImU32,
    pub BorderColorLight: ImU32,
    pub BorderX1: f32,
    pub BorderX2: f32,
    pub HostIndentX: f32,
    pub MinColumnWidth: f32,
    pub OuterPaddingX: f32,
    pub CellPaddingX: f32,
    pub CellPaddingY: f32,
    pub CellSpacingX1: f32,
    pub CellSpacingX2: f32,
    pub InnerWidth: f32,
    pub ColumnsGivenWidth: f32,
    pub ColumnsAutoFitWidth: f32,
    pub ColumnsStretchSumWeights: f32,
    pub ResizedColumnNextWidth: f32,
    pub ResizeLockMinContentsX2: f32,
    pub RefScale: f32,
    pub OuterRect: ImRect,
    pub InnerRect: ImRect,
    pub WorkRect: ImRect,
    pub InnerClipRect: ImRect,
    pub BgClipRect: ImRect,
    pub Bg0ClipRectForDrawCmd: ImRect,
    pub Bg2ClipRectForDrawCmd: ImRect,
    pub HostClipRect: ImRect,
    pub HostBackupInnerClipRect: ImRect,
    pub OuterWindow: *mut ImGuiWindow,
    pub InnerWindow: *mut ImGuiWindow,
    pub ColumnsNames: ImGuiTextBuffer,
    pub DrawSplitter: *mut ImDrawListSplitter,
    pub InstanceDataFirst: ImGuiTableInstanceData,
    pub InstanceDataExtra: ImVector_ImGuiTableInstanceData,
    pub SortSpecsSingle: ImGuiTableColumnSortSpecs,
    pub SortSpecsMulti: ImVector_ImGuiTableColumnSortSpecs,
    pub SortSpecs: ImGuiTableSortSpecs,
    pub SortSpecsCount: ImGuiTableColumnIdx,
    pub ColumnsEnabledCount: ImGuiTableColumnIdx,
    pub ColumnsEnabledFixedCount: ImGuiTableColumnIdx,
    pub DeclColumnsCount: ImGuiTableColumnIdx,
    pub HoveredColumnBody: ImGuiTableColumnIdx,
    pub HoveredColumnBorder: ImGuiTableColumnIdx,
    pub AutoFitSingleColumn: ImGuiTableColumnIdx,
    pub ResizedColumn: ImGuiTableColumnIdx,
    pub LastResizedColumn: ImGuiTableColumnIdx,
    pub HeldHeaderColumn: ImGuiTableColumnIdx,
    pub ReorderColumn: ImGuiTableColumnIdx,
    pub ReorderColumnDir: ImGuiTableColumnIdx,
    pub LeftMostEnabledColumn: ImGuiTableColumnIdx,
    pub RightMostEnabledColumn: ImGuiTableColumnIdx,
    pub LeftMostStretchedColumn: ImGuiTableColumnIdx,
    pub RightMostStretchedColumn: ImGuiTableColumnIdx,
    pub ContextPopupColumn: ImGuiTableColumnIdx,
    pub FreezeRowsRequest: ImGuiTableColumnIdx,
    pub FreezeRowsCount: ImGuiTableColumnIdx,
    pub FreezeColumnsRequest: ImGuiTableColumnIdx,
    pub FreezeColumnsCount: ImGuiTableColumnIdx,
    pub RowCellDataCurrent: ImGuiTableColumnIdx,
    pub DummyDrawChannel: ImGuiTableDrawChannelIdx,
    pub Bg2DrawChannelCurrent: ImGuiTableDrawChannelIdx,
    pub Bg2DrawChannelUnfrozen: ImGuiTableDrawChannelIdx,
    pub IsLayoutLocked: bool,
    pub IsInsideRow: bool,
    pub IsInitializing: bool,
    pub IsSortSpecsDirty: bool,
    pub IsUsingHeaders: bool,
    pub IsContextPopupOpen: bool,
    pub IsSettingsRequestLoad: bool,
    pub IsSettingsDirty: bool,
    pub IsDefaultDisplayOrder: bool,
    pub IsResetAllRequest: bool,
    pub IsResetDisplayOrderRequest: bool,
    pub IsUnfrozenRows: bool,
    pub IsDefaultSizingPolicy: bool,
    pub MemoryCompacted: bool,
    pub HostSkipItems: bool,
}
#[test]
fn bindgen_test_layout_ImGuiTable() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiTable>(),
        536usize,
        concat!("Size of: ", stringify!(ImGuiTable))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTable>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiTable))
    );
    fn test_field_ID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ID) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(ID)
            )
        );
    }
    test_field_ID();
    fn test_field_Flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(Flags)
            )
        );
    }
    test_field_Flags();
    fn test_field_RawData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RawData) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(RawData)
            )
        );
    }
    test_field_RawData();
    fn test_field_TempData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TempData) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(TempData)
            )
        );
    }
    test_field_TempData();
    fn test_field_Columns() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Columns) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(Columns)
            )
        );
    }
    test_field_Columns();
    fn test_field_DisplayOrderToIndex() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DisplayOrderToIndex) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(DisplayOrderToIndex)
            )
        );
    }
    test_field_DisplayOrderToIndex();
    fn test_field_RowCellData() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RowCellData) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(RowCellData)
            )
        );
    }
    test_field_RowCellData();
    fn test_field_EnabledMaskByDisplayOrder() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).EnabledMaskByDisplayOrder) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(EnabledMaskByDisplayOrder)
            )
        );
    }
    test_field_EnabledMaskByDisplayOrder();
    fn test_field_EnabledMaskByIndex() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).EnabledMaskByIndex) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(EnabledMaskByIndex)
            )
        );
    }
    test_field_EnabledMaskByIndex();
    fn test_field_VisibleMaskByIndex() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).VisibleMaskByIndex) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(VisibleMaskByIndex)
            )
        );
    }
    test_field_VisibleMaskByIndex();
    fn test_field_RequestOutputMaskByIndex() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RequestOutputMaskByIndex) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(RequestOutputMaskByIndex)
            )
        );
    }
    test_field_RequestOutputMaskByIndex();
    fn test_field_SettingsLoadedFlags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SettingsLoadedFlags) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(SettingsLoadedFlags)
            )
        );
    }
    test_field_SettingsLoadedFlags();
    fn test_field_SettingsOffset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SettingsOffset) as usize - ptr as usize
            },
            108usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(SettingsOffset)
            )
        );
    }
    test_field_SettingsOffset();
    fn test_field_LastFrameActive() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LastFrameActive) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(LastFrameActive)
            )
        );
    }
    test_field_LastFrameActive();
    fn test_field_ColumnsCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ColumnsCount) as usize - ptr as usize
            },
            116usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(ColumnsCount)
            )
        );
    }
    test_field_ColumnsCount();
    fn test_field_CurrentRow() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CurrentRow) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(CurrentRow)
            )
        );
    }
    test_field_CurrentRow();
    fn test_field_CurrentColumn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CurrentColumn) as usize - ptr as usize
            },
            124usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(CurrentColumn)
            )
        );
    }
    test_field_CurrentColumn();
    fn test_field_InstanceCurrent() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).InstanceCurrent) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(InstanceCurrent)
            )
        );
    }
    test_field_InstanceCurrent();
    fn test_field_InstanceInteracted() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).InstanceInteracted) as usize - ptr as usize
            },
            130usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(InstanceInteracted)
            )
        );
    }
    test_field_InstanceInteracted();
    fn test_field_RowPosY1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RowPosY1) as usize - ptr as usize
            },
            132usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(RowPosY1)
            )
        );
    }
    test_field_RowPosY1();
    fn test_field_RowPosY2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RowPosY2) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(RowPosY2)
            )
        );
    }
    test_field_RowPosY2();
    fn test_field_RowMinHeight() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RowMinHeight) as usize - ptr as usize
            },
            140usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(RowMinHeight)
            )
        );
    }
    test_field_RowMinHeight();
    fn test_field_RowTextBaseline() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RowTextBaseline) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(RowTextBaseline)
            )
        );
    }
    test_field_RowTextBaseline();
    fn test_field_RowIndentOffsetX() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RowIndentOffsetX) as usize - ptr as usize
            },
            148usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(RowIndentOffsetX)
            )
        );
    }
    test_field_RowIndentOffsetX();
    fn test_field_RowBgColorCounter() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RowBgColorCounter) as usize - ptr as usize
            },
            156usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(RowBgColorCounter)
            )
        );
    }
    test_field_RowBgColorCounter();
    fn test_field_RowBgColor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RowBgColor) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(RowBgColor)
            )
        );
    }
    test_field_RowBgColor();
    fn test_field_BorderColorStrong() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BorderColorStrong) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(BorderColorStrong)
            )
        );
    }
    test_field_BorderColorStrong();
    fn test_field_BorderColorLight() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BorderColorLight) as usize - ptr as usize
            },
            172usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(BorderColorLight)
            )
        );
    }
    test_field_BorderColorLight();
    fn test_field_BorderX1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BorderX1) as usize - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(BorderX1)
            )
        );
    }
    test_field_BorderX1();
    fn test_field_BorderX2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BorderX2) as usize - ptr as usize
            },
            180usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(BorderX2)
            )
        );
    }
    test_field_BorderX2();
    fn test_field_HostIndentX() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HostIndentX) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(HostIndentX)
            )
        );
    }
    test_field_HostIndentX();
    fn test_field_MinColumnWidth() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MinColumnWidth) as usize - ptr as usize
            },
            188usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(MinColumnWidth)
            )
        );
    }
    test_field_MinColumnWidth();
    fn test_field_OuterPaddingX() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).OuterPaddingX) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(OuterPaddingX)
            )
        );
    }
    test_field_OuterPaddingX();
    fn test_field_CellPaddingX() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CellPaddingX) as usize - ptr as usize
            },
            196usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(CellPaddingX)
            )
        );
    }
    test_field_CellPaddingX();
    fn test_field_CellPaddingY() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CellPaddingY) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(CellPaddingY)
            )
        );
    }
    test_field_CellPaddingY();
    fn test_field_CellSpacingX1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CellSpacingX1) as usize - ptr as usize
            },
            204usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(CellSpacingX1)
            )
        );
    }
    test_field_CellSpacingX1();
    fn test_field_CellSpacingX2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).CellSpacingX2) as usize - ptr as usize
            },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(CellSpacingX2)
            )
        );
    }
    test_field_CellSpacingX2();
    fn test_field_InnerWidth() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).InnerWidth) as usize - ptr as usize
            },
            212usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(InnerWidth)
            )
        );
    }
    test_field_InnerWidth();
    fn test_field_ColumnsGivenWidth() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ColumnsGivenWidth) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(ColumnsGivenWidth)
            )
        );
    }
    test_field_ColumnsGivenWidth();
    fn test_field_ColumnsAutoFitWidth() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ColumnsAutoFitWidth) as usize - ptr as usize
            },
            220usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(ColumnsAutoFitWidth)
            )
        );
    }
    test_field_ColumnsAutoFitWidth();
    fn test_field_ColumnsStretchSumWeights() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ColumnsStretchSumWeights) as usize - ptr as usize
            },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(ColumnsStretchSumWeights)
            )
        );
    }
    test_field_ColumnsStretchSumWeights();
    fn test_field_ResizedColumnNextWidth() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ResizedColumnNextWidth) as usize - ptr as usize
            },
            228usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(ResizedColumnNextWidth)
            )
        );
    }
    test_field_ResizedColumnNextWidth();
    fn test_field_ResizeLockMinContentsX2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ResizeLockMinContentsX2) as usize - ptr as usize
            },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(ResizeLockMinContentsX2)
            )
        );
    }
    test_field_ResizeLockMinContentsX2();
    fn test_field_RefScale() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RefScale) as usize - ptr as usize
            },
            236usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(RefScale)
            )
        );
    }
    test_field_RefScale();
    fn test_field_OuterRect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).OuterRect) as usize - ptr as usize
            },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(OuterRect)
            )
        );
    }
    test_field_OuterRect();
    fn test_field_InnerRect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).InnerRect) as usize - ptr as usize
            },
            256usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(InnerRect)
            )
        );
    }
    test_field_InnerRect();
    fn test_field_WorkRect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WorkRect) as usize - ptr as usize
            },
            272usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(WorkRect)
            )
        );
    }
    test_field_WorkRect();
    fn test_field_InnerClipRect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).InnerClipRect) as usize - ptr as usize
            },
            288usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(InnerClipRect)
            )
        );
    }
    test_field_InnerClipRect();
    fn test_field_BgClipRect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).BgClipRect) as usize - ptr as usize
            },
            304usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(BgClipRect)
            )
        );
    }
    test_field_BgClipRect();
    fn test_field_Bg0ClipRectForDrawCmd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Bg0ClipRectForDrawCmd) as usize - ptr as usize
            },
            320usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(Bg0ClipRectForDrawCmd)
            )
        );
    }
    test_field_Bg0ClipRectForDrawCmd();
    fn test_field_Bg2ClipRectForDrawCmd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Bg2ClipRectForDrawCmd) as usize - ptr as usize
            },
            336usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(Bg2ClipRectForDrawCmd)
            )
        );
    }
    test_field_Bg2ClipRectForDrawCmd();
    fn test_field_HostClipRect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HostClipRect) as usize - ptr as usize
            },
            352usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(HostClipRect)
            )
        );
    }
    test_field_HostClipRect();
    fn test_field_HostBackupInnerClipRect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HostBackupInnerClipRect) as usize - ptr as usize
            },
            368usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(HostBackupInnerClipRect)
            )
        );
    }
    test_field_HostBackupInnerClipRect();
    fn test_field_OuterWindow() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).OuterWindow) as usize - ptr as usize
            },
            384usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(OuterWindow)
            )
        );
    }
    test_field_OuterWindow();
    fn test_field_InnerWindow() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).InnerWindow) as usize - ptr as usize
            },
            392usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(InnerWindow)
            )
        );
    }
    test_field_InnerWindow();
    fn test_field_ColumnsNames() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ColumnsNames) as usize - ptr as usize
            },
            400usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(ColumnsNames)
            )
        );
    }
    test_field_ColumnsNames();
    fn test_field_DrawSplitter() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DrawSplitter) as usize - ptr as usize
            },
            416usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(DrawSplitter)
            )
        );
    }
    test_field_DrawSplitter();
    fn test_field_InstanceDataFirst() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).InstanceDataFirst) as usize - ptr as usize
            },
            424usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(InstanceDataFirst)
            )
        );
    }
    test_field_InstanceDataFirst();
    fn test_field_InstanceDataExtra() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).InstanceDataExtra) as usize - ptr as usize
            },
            432usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(InstanceDataExtra)
            )
        );
    }
    test_field_InstanceDataExtra();
    fn test_field_SortSpecsSingle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SortSpecsSingle) as usize - ptr as usize
            },
            448usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(SortSpecsSingle)
            )
        );
    }
    test_field_SortSpecsSingle();
    fn test_field_SortSpecsMulti() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SortSpecsMulti) as usize - ptr as usize
            },
            464usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(SortSpecsMulti)
            )
        );
    }
    test_field_SortSpecsMulti();
    fn test_field_SortSpecs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SortSpecs) as usize - ptr as usize
            },
            480usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(SortSpecs)
            )
        );
    }
    test_field_SortSpecs();
    fn test_field_SortSpecsCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SortSpecsCount) as usize - ptr as usize
            },
            496usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(SortSpecsCount)
            )
        );
    }
    test_field_SortSpecsCount();
    fn test_field_ColumnsEnabledCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ColumnsEnabledCount) as usize - ptr as usize
            },
            497usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(ColumnsEnabledCount)
            )
        );
    }
    test_field_ColumnsEnabledCount();
    fn test_field_ColumnsEnabledFixedCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ColumnsEnabledFixedCount) as usize - ptr as usize
            },
            498usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(ColumnsEnabledFixedCount)
            )
        );
    }
    test_field_ColumnsEnabledFixedCount();
    fn test_field_DeclColumnsCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DeclColumnsCount) as usize - ptr as usize
            },
            499usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(DeclColumnsCount)
            )
        );
    }
    test_field_DeclColumnsCount();
    fn test_field_HoveredColumnBody() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HoveredColumnBody) as usize - ptr as usize
            },
            500usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(HoveredColumnBody)
            )
        );
    }
    test_field_HoveredColumnBody();
    fn test_field_HoveredColumnBorder() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HoveredColumnBorder) as usize - ptr as usize
            },
            501usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(HoveredColumnBorder)
            )
        );
    }
    test_field_HoveredColumnBorder();
    fn test_field_AutoFitSingleColumn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).AutoFitSingleColumn) as usize - ptr as usize
            },
            502usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(AutoFitSingleColumn)
            )
        );
    }
    test_field_AutoFitSingleColumn();
    fn test_field_ResizedColumn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ResizedColumn) as usize - ptr as usize
            },
            503usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(ResizedColumn)
            )
        );
    }
    test_field_ResizedColumn();
    fn test_field_LastResizedColumn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LastResizedColumn) as usize - ptr as usize
            },
            504usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(LastResizedColumn)
            )
        );
    }
    test_field_LastResizedColumn();
    fn test_field_HeldHeaderColumn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HeldHeaderColumn) as usize - ptr as usize
            },
            505usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(HeldHeaderColumn)
            )
        );
    }
    test_field_HeldHeaderColumn();
    fn test_field_ReorderColumn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReorderColumn) as usize - ptr as usize
            },
            506usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(ReorderColumn)
            )
        );
    }
    test_field_ReorderColumn();
    fn test_field_ReorderColumnDir() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ReorderColumnDir) as usize - ptr as usize
            },
            507usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(ReorderColumnDir)
            )
        );
    }
    test_field_ReorderColumnDir();
    fn test_field_LeftMostEnabledColumn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LeftMostEnabledColumn) as usize - ptr as usize
            },
            508usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(LeftMostEnabledColumn)
            )
        );
    }
    test_field_LeftMostEnabledColumn();
    fn test_field_RightMostEnabledColumn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RightMostEnabledColumn) as usize - ptr as usize
            },
            509usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(RightMostEnabledColumn)
            )
        );
    }
    test_field_RightMostEnabledColumn();
    fn test_field_LeftMostStretchedColumn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LeftMostStretchedColumn) as usize - ptr as usize
            },
            510usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(LeftMostStretchedColumn)
            )
        );
    }
    test_field_LeftMostStretchedColumn();
    fn test_field_RightMostStretchedColumn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RightMostStretchedColumn) as usize - ptr as usize
            },
            511usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(RightMostStretchedColumn)
            )
        );
    }
    test_field_RightMostStretchedColumn();
    fn test_field_ContextPopupColumn() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ContextPopupColumn) as usize - ptr as usize
            },
            512usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(ContextPopupColumn)
            )
        );
    }
    test_field_ContextPopupColumn();
    fn test_field_FreezeRowsRequest() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FreezeRowsRequest) as usize - ptr as usize
            },
            513usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(FreezeRowsRequest)
            )
        );
    }
    test_field_FreezeRowsRequest();
    fn test_field_FreezeRowsCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FreezeRowsCount) as usize - ptr as usize
            },
            514usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(FreezeRowsCount)
            )
        );
    }
    test_field_FreezeRowsCount();
    fn test_field_FreezeColumnsRequest() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FreezeColumnsRequest) as usize - ptr as usize
            },
            515usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(FreezeColumnsRequest)
            )
        );
    }
    test_field_FreezeColumnsRequest();
    fn test_field_FreezeColumnsCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FreezeColumnsCount) as usize - ptr as usize
            },
            516usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(FreezeColumnsCount)
            )
        );
    }
    test_field_FreezeColumnsCount();
    fn test_field_RowCellDataCurrent() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RowCellDataCurrent) as usize - ptr as usize
            },
            517usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(RowCellDataCurrent)
            )
        );
    }
    test_field_RowCellDataCurrent();
    fn test_field_DummyDrawChannel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DummyDrawChannel) as usize - ptr as usize
            },
            518usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(DummyDrawChannel)
            )
        );
    }
    test_field_DummyDrawChannel();
    fn test_field_Bg2DrawChannelCurrent() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Bg2DrawChannelCurrent) as usize - ptr as usize
            },
            519usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(Bg2DrawChannelCurrent)
            )
        );
    }
    test_field_Bg2DrawChannelCurrent();
    fn test_field_Bg2DrawChannelUnfrozen() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Bg2DrawChannelUnfrozen) as usize - ptr as usize
            },
            520usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(Bg2DrawChannelUnfrozen)
            )
        );
    }
    test_field_Bg2DrawChannelUnfrozen();
    fn test_field_IsLayoutLocked() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsLayoutLocked) as usize - ptr as usize
            },
            521usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(IsLayoutLocked)
            )
        );
    }
    test_field_IsLayoutLocked();
    fn test_field_IsInsideRow() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsInsideRow) as usize - ptr as usize
            },
            522usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(IsInsideRow)
            )
        );
    }
    test_field_IsInsideRow();
    fn test_field_IsInitializing() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsInitializing) as usize - ptr as usize
            },
            523usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(IsInitializing)
            )
        );
    }
    test_field_IsInitializing();
    fn test_field_IsSortSpecsDirty() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsSortSpecsDirty) as usize - ptr as usize
            },
            524usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(IsSortSpecsDirty)
            )
        );
    }
    test_field_IsSortSpecsDirty();
    fn test_field_IsUsingHeaders() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsUsingHeaders) as usize - ptr as usize
            },
            525usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(IsUsingHeaders)
            )
        );
    }
    test_field_IsUsingHeaders();
    fn test_field_IsContextPopupOpen() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsContextPopupOpen) as usize - ptr as usize
            },
            526usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(IsContextPopupOpen)
            )
        );
    }
    test_field_IsContextPopupOpen();
    fn test_field_IsSettingsRequestLoad() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsSettingsRequestLoad) as usize - ptr as usize
            },
            527usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(IsSettingsRequestLoad)
            )
        );
    }
    test_field_IsSettingsRequestLoad();
    fn test_field_IsSettingsDirty() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsSettingsDirty) as usize - ptr as usize
            },
            528usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(IsSettingsDirty)
            )
        );
    }
    test_field_IsSettingsDirty();
    fn test_field_IsDefaultDisplayOrder() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsDefaultDisplayOrder) as usize - ptr as usize
            },
            529usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(IsDefaultDisplayOrder)
            )
        );
    }
    test_field_IsDefaultDisplayOrder();
    fn test_field_IsResetAllRequest() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsResetAllRequest) as usize - ptr as usize
            },
            530usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(IsResetAllRequest)
            )
        );
    }
    test_field_IsResetAllRequest();
    fn test_field_IsResetDisplayOrderRequest() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsResetDisplayOrderRequest) as usize - ptr as usize
            },
            531usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(IsResetDisplayOrderRequest)
            )
        );
    }
    test_field_IsResetDisplayOrderRequest();
    fn test_field_IsUnfrozenRows() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsUnfrozenRows) as usize - ptr as usize
            },
            532usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(IsUnfrozenRows)
            )
        );
    }
    test_field_IsUnfrozenRows();
    fn test_field_IsDefaultSizingPolicy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).IsDefaultSizingPolicy) as usize - ptr as usize
            },
            533usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(IsDefaultSizingPolicy)
            )
        );
    }
    test_field_IsDefaultSizingPolicy();
    fn test_field_MemoryCompacted() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).MemoryCompacted) as usize - ptr as usize
            },
            534usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(MemoryCompacted)
            )
        );
    }
    test_field_MemoryCompacted();
    fn test_field_HostSkipItems() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTable>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HostSkipItems) as usize - ptr as usize
            },
            535usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTable),
                "::",
                stringify!(HostSkipItems)
            )
        );
    }
    test_field_HostSkipItems();
}
impl ImGuiTable {
    #[inline]
    pub fn RowFlags(&self) -> ImGuiTableRowFlags {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_RowFlags(&mut self, val: ImGuiTableRowFlags) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn LastRowFlags(&self) -> ImGuiTableRowFlags {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_LastRowFlags(&mut self, val: ImGuiTableRowFlags) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        RowFlags: ImGuiTableRowFlags,
        LastRowFlags: ImGuiTableRowFlags,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 16u8, {
            let RowFlags: u32 = unsafe { ::std::mem::transmute(RowFlags) };
            RowFlags as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let LastRowFlags: u32 = unsafe { ::std::mem::transmute(LastRowFlags) };
            LastRowFlags as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableTempData {
    pub TableIndex: ::std::os::raw::c_int,
    pub LastTimeActive: f32,
    pub UserOuterSize: ImVec2,
    pub DrawSplitter: ImDrawListSplitter,
    pub HostBackupWorkRect: ImRect,
    pub HostBackupParentWorkRect: ImRect,
    pub HostBackupPrevLineSize: ImVec2,
    pub HostBackupCurrLineSize: ImVec2,
    pub HostBackupCursorMaxPos: ImVec2,
    pub HostBackupColumnsOffset: ImVec1,
    pub HostBackupItemWidth: f32,
    pub HostBackupItemWidthStackSize: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ImGuiTableTempData() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiTableTempData>(),
        112usize,
        concat!("Size of: ", stringify!(ImGuiTableTempData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTableTempData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImGuiTableTempData))
    );
    fn test_field_TableIndex() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).TableIndex) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableTempData),
                "::",
                stringify!(TableIndex)
            )
        );
    }
    test_field_TableIndex();
    fn test_field_LastTimeActive() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).LastTimeActive) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableTempData),
                "::",
                stringify!(LastTimeActive)
            )
        );
    }
    test_field_LastTimeActive();
    fn test_field_UserOuterSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).UserOuterSize) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableTempData),
                "::",
                stringify!(UserOuterSize)
            )
        );
    }
    test_field_UserOuterSize();
    fn test_field_DrawSplitter() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DrawSplitter) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableTempData),
                "::",
                stringify!(DrawSplitter)
            )
        );
    }
    test_field_DrawSplitter();
    fn test_field_HostBackupWorkRect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HostBackupWorkRect) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableTempData),
                "::",
                stringify!(HostBackupWorkRect)
            )
        );
    }
    test_field_HostBackupWorkRect();
    fn test_field_HostBackupParentWorkRect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HostBackupParentWorkRect) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableTempData),
                "::",
                stringify!(HostBackupParentWorkRect)
            )
        );
    }
    test_field_HostBackupParentWorkRect();
    fn test_field_HostBackupPrevLineSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HostBackupPrevLineSize) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableTempData),
                "::",
                stringify!(HostBackupPrevLineSize)
            )
        );
    }
    test_field_HostBackupPrevLineSize();
    fn test_field_HostBackupCurrLineSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HostBackupCurrLineSize) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableTempData),
                "::",
                stringify!(HostBackupCurrLineSize)
            )
        );
    }
    test_field_HostBackupCurrLineSize();
    fn test_field_HostBackupCursorMaxPos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HostBackupCursorMaxPos) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableTempData),
                "::",
                stringify!(HostBackupCursorMaxPos)
            )
        );
    }
    test_field_HostBackupCursorMaxPos();
    fn test_field_HostBackupColumnsOffset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HostBackupColumnsOffset) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableTempData),
                "::",
                stringify!(HostBackupColumnsOffset)
            )
        );
    }
    test_field_HostBackupColumnsOffset();
    fn test_field_HostBackupItemWidth() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HostBackupItemWidth) as usize - ptr as usize
            },
            100usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableTempData),
                "::",
                stringify!(HostBackupItemWidth)
            )
        );
    }
    test_field_HostBackupItemWidth();
    fn test_field_HostBackupItemWidthStackSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableTempData>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).HostBackupItemWidthStackSize) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableTempData),
                "::",
                stringify!(HostBackupItemWidthStackSize)
            )
        );
    }
    test_field_HostBackupItemWidthStackSize();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableColumnSettings {
    pub WidthOrWeight: f32,
    pub UserID: ImGuiID,
    pub Index: ImGuiTableColumnIdx,
    pub DisplayOrder: ImGuiTableColumnIdx,
    pub SortOrder: ImGuiTableColumnIdx,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[test]
fn bindgen_test_layout_ImGuiTableColumnSettings() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiTableColumnSettings>(),
        12usize,
        concat!("Size of: ", stringify!(ImGuiTableColumnSettings))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTableColumnSettings>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiTableColumnSettings))
    );
    fn test_field_WidthOrWeight() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableColumnSettings>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WidthOrWeight) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableColumnSettings),
                "::",
                stringify!(WidthOrWeight)
            )
        );
    }
    test_field_WidthOrWeight();
    fn test_field_UserID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableColumnSettings>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).UserID) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableColumnSettings),
                "::",
                stringify!(UserID)
            )
        );
    }
    test_field_UserID();
    fn test_field_Index() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableColumnSettings>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).Index) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableColumnSettings),
                "::",
                stringify!(Index)
            )
        );
    }
    test_field_Index();
    fn test_field_DisplayOrder() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableColumnSettings>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).DisplayOrder) as usize - ptr as usize
            },
            9usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableColumnSettings),
                "::",
                stringify!(DisplayOrder)
            )
        );
    }
    test_field_DisplayOrder();
    fn test_field_SortOrder() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableColumnSettings>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SortOrder) as usize - ptr as usize
            },
            10usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableColumnSettings),
                "::",
                stringify!(SortOrder)
            )
        );
    }
    test_field_SortOrder();
}
impl ImGuiTableColumnSettings {
    #[inline]
    pub fn SortDirection(&self) -> ImU8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_SortDirection(&mut self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn IsEnabled(&self) -> ImU8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_IsEnabled(&mut self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn IsStretch(&self) -> ImU8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_IsStretch(&mut self, val: ImU8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        SortDirection: ImU8,
        IsEnabled: ImU8,
        IsStretch: ImU8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let SortDirection: u8 = unsafe { ::std::mem::transmute(SortDirection) };
            SortDirection as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let IsEnabled: u8 = unsafe { ::std::mem::transmute(IsEnabled) };
            IsEnabled as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let IsStretch: u8 = unsafe { ::std::mem::transmute(IsStretch) };
            IsStretch as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImGuiTableSettings {
    pub ID: ImGuiID,
    pub SaveFlags: ImGuiTableFlags,
    pub RefScale: f32,
    pub ColumnsCount: ImGuiTableColumnIdx,
    pub ColumnsCountMax: ImGuiTableColumnIdx,
    pub WantApply: bool,
}
#[test]
fn bindgen_test_layout_ImGuiTableSettings() {
    assert_eq!(
        ::std::mem::size_of::<ImGuiTableSettings>(),
        16usize,
        concat!("Size of: ", stringify!(ImGuiTableSettings))
    );
    assert_eq!(
        ::std::mem::align_of::<ImGuiTableSettings>(),
        4usize,
        concat!("Alignment of ", stringify!(ImGuiTableSettings))
    );
    fn test_field_ID() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableSettings>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ID) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableSettings),
                "::",
                stringify!(ID)
            )
        );
    }
    test_field_ID();
    fn test_field_SaveFlags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableSettings>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).SaveFlags) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableSettings),
                "::",
                stringify!(SaveFlags)
            )
        );
    }
    test_field_SaveFlags();
    fn test_field_RefScale() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableSettings>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).RefScale) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableSettings),
                "::",
                stringify!(RefScale)
            )
        );
    }
    test_field_RefScale();
    fn test_field_ColumnsCount() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableSettings>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ColumnsCount) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableSettings),
                "::",
                stringify!(ColumnsCount)
            )
        );
    }
    test_field_ColumnsCount();
    fn test_field_ColumnsCountMax() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableSettings>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ColumnsCountMax) as usize - ptr as usize
            },
            13usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableSettings),
                "::",
                stringify!(ColumnsCountMax)
            )
        );
    }
    test_field_ColumnsCountMax();
    fn test_field_WantApply() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImGuiTableSettings>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).WantApply) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(ImGuiTableSettings),
                "::",
                stringify!(WantApply)
            )
        );
    }
    test_field_WantApply();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImFontBuilderIO {
    pub FontBuilder_Build:
        ::std::option::Option<unsafe extern "C" fn(atlas: *mut ImFontAtlas) -> bool>,
}
#[test]
fn bindgen_test_layout_ImFontBuilderIO() {
    assert_eq!(
        ::std::mem::size_of::<ImFontBuilderIO>(),
        8usize,
        concat!("Size of: ", stringify!(ImFontBuilderIO))
    );
    assert_eq!(
        ::std::mem::align_of::<ImFontBuilderIO>(),
        8usize,
        concat!("Alignment of ", stringify!(ImFontBuilderIO))
    );
    fn test_field_FontBuilder_Build() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<ImFontBuilderIO>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).FontBuilder_Build) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(ImFontBuilderIO),
                "::",
                stringify!(FontBuilder_Build)
            )
        );
    }
    test_field_FontBuilder_Build();
}
extern "C" {
    pub fn ImVec2_ImVec2_Nil() -> *mut ImVec2;
}
extern "C" {
    pub fn ImVec2_destroy(self_: *mut ImVec2);
}
extern "C" {
    pub fn ImVec2_ImVec2_Float(_x: f32, _y: f32) -> *mut ImVec2;
}
extern "C" {
    pub fn ImVec4_ImVec4_Nil() -> *mut ImVec4;
}
extern "C" {
    pub fn ImVec4_destroy(self_: *mut ImVec4);
}
extern "C" {
    pub fn ImVec4_ImVec4_Float(_x: f32, _y: f32, _z: f32, _w: f32) -> *mut ImVec4;
}
extern "C" {
    pub fn igCreateContext(shared_font_atlas: *mut ImFontAtlas) -> *mut ImGuiContext;
}
extern "C" {
    pub fn igDestroyContext(ctx: *mut ImGuiContext);
}
extern "C" {
    pub fn igGetCurrentContext() -> *mut ImGuiContext;
}
extern "C" {
    pub fn igSetCurrentContext(ctx: *mut ImGuiContext);
}
extern "C" {
    pub fn igGetIO() -> *mut ImGuiIO;
}
extern "C" {
    pub fn igGetStyle() -> *mut ImGuiStyle;
}
extern "C" {
    pub fn igNewFrame();
}
extern "C" {
    pub fn igEndFrame();
}
extern "C" {
    pub fn igRender();
}
extern "C" {
    pub fn igGetDrawData() -> *mut ImDrawData;
}
extern "C" {
    pub fn igShowDemoWindow(p_open: *mut bool);
}
extern "C" {
    pub fn igShowMetricsWindow(p_open: *mut bool);
}
extern "C" {
    pub fn igShowDebugLogWindow(p_open: *mut bool);
}
extern "C" {
    pub fn igShowStackToolWindow(p_open: *mut bool);
}
extern "C" {
    pub fn igShowAboutWindow(p_open: *mut bool);
}
extern "C" {
    pub fn igShowStyleEditor(ref_: *mut ImGuiStyle);
}
extern "C" {
    pub fn igShowStyleSelector(label: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn igShowFontSelector(label: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn igShowUserGuide();
}
extern "C" {
    pub fn igGetVersion() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn igStyleColorsDark(dst: *mut ImGuiStyle);
}
extern "C" {
    pub fn igStyleColorsLight(dst: *mut ImGuiStyle);
}
extern "C" {
    pub fn igStyleColorsClassic(dst: *mut ImGuiStyle);
}
extern "C" {
    pub fn igBegin(
        name: *const ::std::os::raw::c_char,
        p_open: *mut bool,
        flags: ImGuiWindowFlags,
    ) -> bool;
}
extern "C" {
    pub fn igEnd();
}
extern "C" {
    pub fn igBeginChild_Str(
        str_id: *const ::std::os::raw::c_char,
        size: ImVec2,
        border: bool,
        flags: ImGuiWindowFlags,
    ) -> bool;
}
extern "C" {
    pub fn igBeginChild_ID(
        id: ImGuiID,
        size: ImVec2,
        border: bool,
        flags: ImGuiWindowFlags,
    ) -> bool;
}
extern "C" {
    pub fn igEndChild();
}
extern "C" {
    pub fn igIsWindowAppearing() -> bool;
}
extern "C" {
    pub fn igIsWindowCollapsed() -> bool;
}
extern "C" {
    pub fn igIsWindowFocused(flags: ImGuiFocusedFlags) -> bool;
}
extern "C" {
    pub fn igIsWindowHovered(flags: ImGuiHoveredFlags) -> bool;
}
extern "C" {
    pub fn igGetWindowDrawList() -> *mut ImDrawList;
}
extern "C" {
    pub fn igGetWindowDpiScale() -> f32;
}
extern "C" {
    pub fn igGetWindowPos(pOut: *mut ImVec2);
}
extern "C" {
    pub fn igGetWindowSize(pOut: *mut ImVec2);
}
extern "C" {
    pub fn igGetWindowWidth() -> f32;
}
extern "C" {
    pub fn igGetWindowHeight() -> f32;
}
extern "C" {
    pub fn igGetWindowViewport() -> *mut ImGuiViewport;
}
extern "C" {
    pub fn igSetNextWindowPos(pos: ImVec2, cond: ImGuiCond, pivot: ImVec2);
}
extern "C" {
    pub fn igSetNextWindowSize(size: ImVec2, cond: ImGuiCond);
}
extern "C" {
    pub fn igSetNextWindowSizeConstraints(
        size_min: ImVec2,
        size_max: ImVec2,
        custom_callback: ImGuiSizeCallback,
        custom_callback_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn igSetNextWindowContentSize(size: ImVec2);
}
extern "C" {
    pub fn igSetNextWindowCollapsed(collapsed: bool, cond: ImGuiCond);
}
extern "C" {
    pub fn igSetNextWindowFocus();
}
extern "C" {
    pub fn igSetNextWindowBgAlpha(alpha: f32);
}
extern "C" {
    pub fn igSetNextWindowViewport(viewport_id: ImGuiID);
}
extern "C" {
    pub fn igSetWindowPos_Vec2(pos: ImVec2, cond: ImGuiCond);
}
extern "C" {
    pub fn igSetWindowSize_Vec2(size: ImVec2, cond: ImGuiCond);
}
extern "C" {
    pub fn igSetWindowCollapsed_Bool(collapsed: bool, cond: ImGuiCond);
}
extern "C" {
    pub fn igSetWindowFocus_Nil();
}
extern "C" {
    pub fn igSetWindowFontScale(scale: f32);
}
extern "C" {
    pub fn igSetWindowPos_Str(name: *const ::std::os::raw::c_char, pos: ImVec2, cond: ImGuiCond);
}
extern "C" {
    pub fn igSetWindowSize_Str(name: *const ::std::os::raw::c_char, size: ImVec2, cond: ImGuiCond);
}
extern "C" {
    pub fn igSetWindowCollapsed_Str(
        name: *const ::std::os::raw::c_char,
        collapsed: bool,
        cond: ImGuiCond,
    );
}
extern "C" {
    pub fn igSetWindowFocus_Str(name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn igGetContentRegionAvail(pOut: *mut ImVec2);
}
extern "C" {
    pub fn igGetContentRegionMax(pOut: *mut ImVec2);
}
extern "C" {
    pub fn igGetWindowContentRegionMin(pOut: *mut ImVec2);
}
extern "C" {
    pub fn igGetWindowContentRegionMax(pOut: *mut ImVec2);
}
extern "C" {
    pub fn igGetScrollX() -> f32;
}
extern "C" {
    pub fn igGetScrollY() -> f32;
}
extern "C" {
    pub fn igSetScrollX_Float(scroll_x: f32);
}
extern "C" {
    pub fn igSetScrollY_Float(scroll_y: f32);
}
extern "C" {
    pub fn igGetScrollMaxX() -> f32;
}
extern "C" {
    pub fn igGetScrollMaxY() -> f32;
}
extern "C" {
    pub fn igSetScrollHereX(center_x_ratio: f32);
}
extern "C" {
    pub fn igSetScrollHereY(center_y_ratio: f32);
}
extern "C" {
    pub fn igSetScrollFromPosX_Float(local_x: f32, center_x_ratio: f32);
}
extern "C" {
    pub fn igSetScrollFromPosY_Float(local_y: f32, center_y_ratio: f32);
}
extern "C" {
    pub fn igPushFont(font: *mut ImFont);
}
extern "C" {
    pub fn igPopFont();
}
extern "C" {
    pub fn igPushStyleColor_U32(idx: ImGuiCol, col: ImU32);
}
extern "C" {
    pub fn igPushStyleColor_Vec4(idx: ImGuiCol, col: ImVec4);
}
extern "C" {
    pub fn igPopStyleColor(count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn igPushStyleVar_Float(idx: ImGuiStyleVar, val: f32);
}
extern "C" {
    pub fn igPushStyleVar_Vec2(idx: ImGuiStyleVar, val: ImVec2);
}
extern "C" {
    pub fn igPopStyleVar(count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn igPushAllowKeyboardFocus(allow_keyboard_focus: bool);
}
extern "C" {
    pub fn igPopAllowKeyboardFocus();
}
extern "C" {
    pub fn igPushButtonRepeat(repeat: bool);
}
extern "C" {
    pub fn igPopButtonRepeat();
}
extern "C" {
    pub fn igPushItemWidth(item_width: f32);
}
extern "C" {
    pub fn igPopItemWidth();
}
extern "C" {
    pub fn igSetNextItemWidth(item_width: f32);
}
extern "C" {
    pub fn igCalcItemWidth() -> f32;
}
extern "C" {
    pub fn igPushTextWrapPos(wrap_local_pos_x: f32);
}
extern "C" {
    pub fn igPopTextWrapPos();
}
extern "C" {
    pub fn igGetFont() -> *mut ImFont;
}
extern "C" {
    pub fn igGetFontSize() -> f32;
}
extern "C" {
    pub fn igGetFontTexUvWhitePixel(pOut: *mut ImVec2);
}
extern "C" {
    pub fn igGetColorU32_Col(idx: ImGuiCol, alpha_mul: f32) -> ImU32;
}
extern "C" {
    pub fn igGetColorU32_Vec4(col: ImVec4) -> ImU32;
}
extern "C" {
    pub fn igGetColorU32_U32(col: ImU32) -> ImU32;
}
extern "C" {
    pub fn igGetStyleColorVec4(idx: ImGuiCol) -> *const ImVec4;
}
extern "C" {
    pub fn igSeparator();
}
extern "C" {
    pub fn igSameLine(offset_from_start_x: f32, spacing: f32);
}
extern "C" {
    pub fn igNewLine();
}
extern "C" {
    pub fn igSpacing();
}
extern "C" {
    pub fn igDummy(size: ImVec2);
}
extern "C" {
    pub fn igIndent(indent_w: f32);
}
extern "C" {
    pub fn igUnindent(indent_w: f32);
}
extern "C" {
    pub fn igBeginGroup();
}
extern "C" {
    pub fn igEndGroup();
}
extern "C" {
    pub fn igGetCursorPos(pOut: *mut ImVec2);
}
extern "C" {
    pub fn igGetCursorPosX() -> f32;
}
extern "C" {
    pub fn igGetCursorPosY() -> f32;
}
extern "C" {
    pub fn igSetCursorPos(local_pos: ImVec2);
}
extern "C" {
    pub fn igSetCursorPosX(local_x: f32);
}
extern "C" {
    pub fn igSetCursorPosY(local_y: f32);
}
extern "C" {
    pub fn igGetCursorStartPos(pOut: *mut ImVec2);
}
extern "C" {
    pub fn igGetCursorScreenPos(pOut: *mut ImVec2);
}
extern "C" {
    pub fn igSetCursorScreenPos(pos: ImVec2);
}
extern "C" {
    pub fn igAlignTextToFramePadding();
}
extern "C" {
    pub fn igGetTextLineHeight() -> f32;
}
extern "C" {
    pub fn igGetTextLineHeightWithSpacing() -> f32;
}
extern "C" {
    pub fn igGetFrameHeight() -> f32;
}
extern "C" {
    pub fn igGetFrameHeightWithSpacing() -> f32;
}
extern "C" {
    pub fn igPushID_Str(str_id: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn igPushID_StrStr(
        str_id_begin: *const ::std::os::raw::c_char,
        str_id_end: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn igPushID_Ptr(ptr_id: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn igPushID_Int(int_id: ::std::os::raw::c_int);
}
extern "C" {
    pub fn igPopID();
}
extern "C" {
    pub fn igGetID_Str(str_id: *const ::std::os::raw::c_char) -> ImGuiID;
}
extern "C" {
    pub fn igGetID_StrStr(
        str_id_begin: *const ::std::os::raw::c_char,
        str_id_end: *const ::std::os::raw::c_char,
    ) -> ImGuiID;
}
extern "C" {
    pub fn igGetID_Ptr(ptr_id: *const ::std::os::raw::c_void) -> ImGuiID;
}
extern "C" {
    pub fn igTextUnformatted(
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn igText(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn igTextV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
extern "C" {
    pub fn igTextColored(col: ImVec4, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn igTextColoredV(col: ImVec4, fmt: *const ::std::os::raw::c_char, args: va_list);
}
extern "C" {
    pub fn igTextDisabled(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn igTextDisabledV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
extern "C" {
    pub fn igTextWrapped(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn igTextWrappedV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
extern "C" {
    pub fn igLabelText(
        label: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn igLabelTextV(
        label: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    );
}
extern "C" {
    pub fn igBulletText(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn igBulletTextV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
extern "C" {
    pub fn igButton(label: *const ::std::os::raw::c_char, size: ImVec2) -> bool;
}
extern "C" {
    pub fn igSmallButton(label: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn igInvisibleButton(
        str_id: *const ::std::os::raw::c_char,
        size: ImVec2,
        flags: ImGuiButtonFlags,
    ) -> bool;
}
extern "C" {
    pub fn igArrowButton(str_id: *const ::std::os::raw::c_char, dir: ImGuiDir) -> bool;
}
extern "C" {
    pub fn igImage(
        user_texture_id: ImTextureID,
        size: ImVec2,
        uv0: ImVec2,
        uv1: ImVec2,
        tint_col: ImVec4,
        border_col: ImVec4,
    );
}
extern "C" {
    pub fn igImageButton(
        user_texture_id: ImTextureID,
        size: ImVec2,
        uv0: ImVec2,
        uv1: ImVec2,
        frame_padding: ::std::os::raw::c_int,
        bg_col: ImVec4,
        tint_col: ImVec4,
    ) -> bool;
}
extern "C" {
    pub fn igCheckbox(label: *const ::std::os::raw::c_char, v: *mut bool) -> bool;
}
extern "C" {
    pub fn igCheckboxFlags_IntPtr(
        label: *const ::std::os::raw::c_char,
        flags: *mut ::std::os::raw::c_int,
        flags_value: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn igCheckboxFlags_UintPtr(
        label: *const ::std::os::raw::c_char,
        flags: *mut ::std::os::raw::c_uint,
        flags_value: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn igRadioButton_Bool(label: *const ::std::os::raw::c_char, active: bool) -> bool;
}
extern "C" {
    pub fn igRadioButton_IntPtr(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_button: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn igProgressBar(fraction: f32, size_arg: ImVec2, overlay: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn igBullet();
}
extern "C" {
    pub fn igBeginCombo(
        label: *const ::std::os::raw::c_char,
        preview_value: *const ::std::os::raw::c_char,
        flags: ImGuiComboFlags,
    ) -> bool;
}
extern "C" {
    pub fn igEndCombo();
}
extern "C" {
    pub fn igCombo_Str_arr(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        items: *const *const ::std::os::raw::c_char,
        items_count: ::std::os::raw::c_int,
        popup_max_height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn igCombo_Str(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        items_separated_by_zeros: *const ::std::os::raw::c_char,
        popup_max_height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn igCombo_FnBoolPtr(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        items_getter: ::std::option::Option<
            unsafe extern "C" fn(
                data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
                out_text: *mut *const ::std::os::raw::c_char,
            ) -> bool,
        >,
        data: *mut ::std::os::raw::c_void,
        items_count: ::std::os::raw::c_int,
        popup_max_height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn igDragFloat(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igDragFloat2(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igDragFloat3(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igDragFloat4(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igDragFloatRange2(
        label: *const ::std::os::raw::c_char,
        v_current_min: *mut f32,
        v_current_max: *mut f32,
        v_speed: f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        format_max: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igDragInt(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igDragInt2(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igDragInt3(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igDragInt4(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igDragIntRange2(
        label: *const ::std::os::raw::c_char,
        v_current_min: *mut ::std::os::raw::c_int,
        v_current_max: *mut ::std::os::raw::c_int,
        v_speed: f32,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        format_max: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igDragScalar(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        v_speed: f32,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igDragScalarN(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        components: ::std::os::raw::c_int,
        v_speed: f32,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igSliderFloat(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igSliderFloat2(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igSliderFloat3(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igSliderFloat4(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igSliderAngle(
        label: *const ::std::os::raw::c_char,
        v_rad: *mut f32,
        v_degrees_min: f32,
        v_degrees_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igSliderInt(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igSliderInt2(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igSliderInt3(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igSliderInt4(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igSliderScalar(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igSliderScalarN(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        components: ::std::os::raw::c_int,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igVSliderFloat(
        label: *const ::std::os::raw::c_char,
        size: ImVec2,
        v: *mut f32,
        v_min: f32,
        v_max: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igVSliderInt(
        label: *const ::std::os::raw::c_char,
        size: ImVec2,
        v: *mut ::std::os::raw::c_int,
        v_min: ::std::os::raw::c_int,
        v_max: ::std::os::raw::c_int,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igVSliderScalar(
        label: *const ::std::os::raw::c_char,
        size: ImVec2,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igInputText(
        label: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: size_t,
        flags: ImGuiInputTextFlags,
        callback: ImGuiInputTextCallback,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn igInputTextMultiline(
        label: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: size_t,
        size: ImVec2,
        flags: ImGuiInputTextFlags,
        callback: ImGuiInputTextCallback,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn igInputTextWithHint(
        label: *const ::std::os::raw::c_char,
        hint: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: size_t,
        flags: ImGuiInputTextFlags,
        callback: ImGuiInputTextCallback,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn igInputFloat(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        step: f32,
        step_fast: f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    pub fn igInputFloat2(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    pub fn igInputFloat3(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    pub fn igInputFloat4(
        label: *const ::std::os::raw::c_char,
        v: *mut f32,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    pub fn igInputInt(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        step: ::std::os::raw::c_int,
        step_fast: ::std::os::raw::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    pub fn igInputInt2(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    pub fn igInputInt3(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    pub fn igInputInt4(
        label: *const ::std::os::raw::c_char,
        v: *mut ::std::os::raw::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    pub fn igInputDouble(
        label: *const ::std::os::raw::c_char,
        v: *mut f64,
        step: f64,
        step_fast: f64,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    pub fn igInputScalar(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        p_step: *const ::std::os::raw::c_void,
        p_step_fast: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    pub fn igInputScalarN(
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        components: ::std::os::raw::c_int,
        p_step: *const ::std::os::raw::c_void,
        p_step_fast: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    pub fn igColorEdit3(
        label: *const ::std::os::raw::c_char,
        col: *mut f32,
        flags: ImGuiColorEditFlags,
    ) -> bool;
}
extern "C" {
    pub fn igColorEdit4(
        label: *const ::std::os::raw::c_char,
        col: *mut f32,
        flags: ImGuiColorEditFlags,
    ) -> bool;
}
extern "C" {
    pub fn igColorPicker3(
        label: *const ::std::os::raw::c_char,
        col: *mut f32,
        flags: ImGuiColorEditFlags,
    ) -> bool;
}
extern "C" {
    pub fn igColorPicker4(
        label: *const ::std::os::raw::c_char,
        col: *mut f32,
        flags: ImGuiColorEditFlags,
        ref_col: *const f32,
    ) -> bool;
}
extern "C" {
    pub fn igColorButton(
        desc_id: *const ::std::os::raw::c_char,
        col: ImVec4,
        flags: ImGuiColorEditFlags,
        size: ImVec2,
    ) -> bool;
}
extern "C" {
    pub fn igSetColorEditOptions(flags: ImGuiColorEditFlags);
}
extern "C" {
    pub fn igTreeNode_Str(label: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn igTreeNode_StrStr(
        str_id: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
extern "C" {
    pub fn igTreeNode_Ptr(
        ptr_id: *const ::std::os::raw::c_void,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
extern "C" {
    pub fn igTreeNodeV_Str(
        str_id: *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    ) -> bool;
}
extern "C" {
    pub fn igTreeNodeV_Ptr(
        ptr_id: *const ::std::os::raw::c_void,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    ) -> bool;
}
extern "C" {
    pub fn igTreeNodeEx_Str(
        label: *const ::std::os::raw::c_char,
        flags: ImGuiTreeNodeFlags,
    ) -> bool;
}
extern "C" {
    pub fn igTreeNodeEx_StrStr(
        str_id: *const ::std::os::raw::c_char,
        flags: ImGuiTreeNodeFlags,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
extern "C" {
    pub fn igTreeNodeEx_Ptr(
        ptr_id: *const ::std::os::raw::c_void,
        flags: ImGuiTreeNodeFlags,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> bool;
}
extern "C" {
    pub fn igTreeNodeExV_Str(
        str_id: *const ::std::os::raw::c_char,
        flags: ImGuiTreeNodeFlags,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    ) -> bool;
}
extern "C" {
    pub fn igTreeNodeExV_Ptr(
        ptr_id: *const ::std::os::raw::c_void,
        flags: ImGuiTreeNodeFlags,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    ) -> bool;
}
extern "C" {
    pub fn igTreePush_Str(str_id: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn igTreePush_Ptr(ptr_id: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn igTreePop();
}
extern "C" {
    pub fn igGetTreeNodeToLabelSpacing() -> f32;
}
extern "C" {
    pub fn igCollapsingHeader_TreeNodeFlags(
        label: *const ::std::os::raw::c_char,
        flags: ImGuiTreeNodeFlags,
    ) -> bool;
}
extern "C" {
    pub fn igCollapsingHeader_BoolPtr(
        label: *const ::std::os::raw::c_char,
        p_visible: *mut bool,
        flags: ImGuiTreeNodeFlags,
    ) -> bool;
}
extern "C" {
    pub fn igSetNextItemOpen(is_open: bool, cond: ImGuiCond);
}
extern "C" {
    pub fn igSelectable_Bool(
        label: *const ::std::os::raw::c_char,
        selected: bool,
        flags: ImGuiSelectableFlags,
        size: ImVec2,
    ) -> bool;
}
extern "C" {
    pub fn igSelectable_BoolPtr(
        label: *const ::std::os::raw::c_char,
        p_selected: *mut bool,
        flags: ImGuiSelectableFlags,
        size: ImVec2,
    ) -> bool;
}
extern "C" {
    pub fn igBeginListBox(label: *const ::std::os::raw::c_char, size: ImVec2) -> bool;
}
extern "C" {
    pub fn igEndListBox();
}
extern "C" {
    pub fn igListBox_Str_arr(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        items: *const *const ::std::os::raw::c_char,
        items_count: ::std::os::raw::c_int,
        height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn igListBox_FnBoolPtr(
        label: *const ::std::os::raw::c_char,
        current_item: *mut ::std::os::raw::c_int,
        items_getter: ::std::option::Option<
            unsafe extern "C" fn(
                data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
                out_text: *mut *const ::std::os::raw::c_char,
            ) -> bool,
        >,
        data: *mut ::std::os::raw::c_void,
        items_count: ::std::os::raw::c_int,
        height_in_items: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn igPlotLines_FloatPtr(
        label: *const ::std::os::raw::c_char,
        values: *const f32,
        values_count: ::std::os::raw::c_int,
        values_offset: ::std::os::raw::c_int,
        overlay_text: *const ::std::os::raw::c_char,
        scale_min: f32,
        scale_max: f32,
        graph_size: ImVec2,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn igPlotLines_FnFloatPtr(
        label: *const ::std::os::raw::c_char,
        values_getter: ::std::option::Option<
            unsafe extern "C" fn(
                data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
            ) -> f32,
        >,
        data: *mut ::std::os::raw::c_void,
        values_count: ::std::os::raw::c_int,
        values_offset: ::std::os::raw::c_int,
        overlay_text: *const ::std::os::raw::c_char,
        scale_min: f32,
        scale_max: f32,
        graph_size: ImVec2,
    );
}
extern "C" {
    pub fn igPlotHistogram_FloatPtr(
        label: *const ::std::os::raw::c_char,
        values: *const f32,
        values_count: ::std::os::raw::c_int,
        values_offset: ::std::os::raw::c_int,
        overlay_text: *const ::std::os::raw::c_char,
        scale_min: f32,
        scale_max: f32,
        graph_size: ImVec2,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn igPlotHistogram_FnFloatPtr(
        label: *const ::std::os::raw::c_char,
        values_getter: ::std::option::Option<
            unsafe extern "C" fn(
                data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
            ) -> f32,
        >,
        data: *mut ::std::os::raw::c_void,
        values_count: ::std::os::raw::c_int,
        values_offset: ::std::os::raw::c_int,
        overlay_text: *const ::std::os::raw::c_char,
        scale_min: f32,
        scale_max: f32,
        graph_size: ImVec2,
    );
}
extern "C" {
    pub fn igValue_Bool(prefix: *const ::std::os::raw::c_char, b: bool);
}
extern "C" {
    pub fn igValue_Int(prefix: *const ::std::os::raw::c_char, v: ::std::os::raw::c_int);
}
extern "C" {
    pub fn igValue_Uint(prefix: *const ::std::os::raw::c_char, v: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn igValue_Float(
        prefix: *const ::std::os::raw::c_char,
        v: f32,
        float_format: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn igBeginMenuBar() -> bool;
}
extern "C" {
    pub fn igEndMenuBar();
}
extern "C" {
    pub fn igBeginMainMenuBar() -> bool;
}
extern "C" {
    pub fn igEndMainMenuBar();
}
extern "C" {
    pub fn igBeginMenu(label: *const ::std::os::raw::c_char, enabled: bool) -> bool;
}
extern "C" {
    pub fn igEndMenu();
}
extern "C" {
    pub fn igMenuItem_Bool(
        label: *const ::std::os::raw::c_char,
        shortcut: *const ::std::os::raw::c_char,
        selected: bool,
        enabled: bool,
    ) -> bool;
}
extern "C" {
    pub fn igMenuItem_BoolPtr(
        label: *const ::std::os::raw::c_char,
        shortcut: *const ::std::os::raw::c_char,
        p_selected: *mut bool,
        enabled: bool,
    ) -> bool;
}
extern "C" {
    pub fn igBeginTooltip();
}
extern "C" {
    pub fn igEndTooltip();
}
extern "C" {
    pub fn igSetTooltip(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn igSetTooltipV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
extern "C" {
    pub fn igBeginPopup(str_id: *const ::std::os::raw::c_char, flags: ImGuiWindowFlags) -> bool;
}
extern "C" {
    pub fn igBeginPopupModal(
        name: *const ::std::os::raw::c_char,
        p_open: *mut bool,
        flags: ImGuiWindowFlags,
    ) -> bool;
}
extern "C" {
    pub fn igEndPopup();
}
extern "C" {
    pub fn igOpenPopup_Str(str_id: *const ::std::os::raw::c_char, popup_flags: ImGuiPopupFlags);
}
extern "C" {
    pub fn igOpenPopup_ID(id: ImGuiID, popup_flags: ImGuiPopupFlags);
}
extern "C" {
    pub fn igOpenPopupOnItemClick(
        str_id: *const ::std::os::raw::c_char,
        popup_flags: ImGuiPopupFlags,
    );
}
extern "C" {
    pub fn igCloseCurrentPopup();
}
extern "C" {
    pub fn igBeginPopupContextItem(
        str_id: *const ::std::os::raw::c_char,
        popup_flags: ImGuiPopupFlags,
    ) -> bool;
}
extern "C" {
    pub fn igBeginPopupContextWindow(
        str_id: *const ::std::os::raw::c_char,
        popup_flags: ImGuiPopupFlags,
    ) -> bool;
}
extern "C" {
    pub fn igBeginPopupContextVoid(
        str_id: *const ::std::os::raw::c_char,
        popup_flags: ImGuiPopupFlags,
    ) -> bool;
}
extern "C" {
    pub fn igIsPopupOpen_Str(str_id: *const ::std::os::raw::c_char, flags: ImGuiPopupFlags)
        -> bool;
}
extern "C" {
    pub fn igBeginTable(
        str_id: *const ::std::os::raw::c_char,
        column: ::std::os::raw::c_int,
        flags: ImGuiTableFlags,
        outer_size: ImVec2,
        inner_width: f32,
    ) -> bool;
}
extern "C" {
    pub fn igEndTable();
}
extern "C" {
    pub fn igTableNextRow(row_flags: ImGuiTableRowFlags, min_row_height: f32);
}
extern "C" {
    pub fn igTableNextColumn() -> bool;
}
extern "C" {
    pub fn igTableSetColumnIndex(column_n: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn igTableSetupColumn(
        label: *const ::std::os::raw::c_char,
        flags: ImGuiTableColumnFlags,
        init_width_or_weight: f32,
        user_id: ImGuiID,
    );
}
extern "C" {
    pub fn igTableSetupScrollFreeze(cols: ::std::os::raw::c_int, rows: ::std::os::raw::c_int);
}
extern "C" {
    pub fn igTableHeadersRow();
}
extern "C" {
    pub fn igTableHeader(label: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn igTableGetSortSpecs() -> *mut ImGuiTableSortSpecs;
}
extern "C" {
    pub fn igTableGetColumnCount() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igTableGetColumnIndex() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igTableGetRowIndex() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igTableGetColumnName_Int(
        column_n: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn igTableGetColumnFlags(column_n: ::std::os::raw::c_int) -> ImGuiTableColumnFlags;
}
extern "C" {
    pub fn igTableSetColumnEnabled(column_n: ::std::os::raw::c_int, v: bool);
}
extern "C" {
    pub fn igTableSetBgColor(
        target: ImGuiTableBgTarget,
        color: ImU32,
        column_n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn igColumns(count: ::std::os::raw::c_int, id: *const ::std::os::raw::c_char, border: bool);
}
extern "C" {
    pub fn igNextColumn();
}
extern "C" {
    pub fn igGetColumnIndex() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igGetColumnWidth(column_index: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn igSetColumnWidth(column_index: ::std::os::raw::c_int, width: f32);
}
extern "C" {
    pub fn igGetColumnOffset(column_index: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn igSetColumnOffset(column_index: ::std::os::raw::c_int, offset_x: f32);
}
extern "C" {
    pub fn igGetColumnsCount() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igBeginTabBar(str_id: *const ::std::os::raw::c_char, flags: ImGuiTabBarFlags) -> bool;
}
extern "C" {
    pub fn igEndTabBar();
}
extern "C" {
    pub fn igBeginTabItem(
        label: *const ::std::os::raw::c_char,
        p_open: *mut bool,
        flags: ImGuiTabItemFlags,
    ) -> bool;
}
extern "C" {
    pub fn igEndTabItem();
}
extern "C" {
    pub fn igTabItemButton(label: *const ::std::os::raw::c_char, flags: ImGuiTabItemFlags) -> bool;
}
extern "C" {
    pub fn igSetTabItemClosed(tab_or_docked_window_label: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn igDockSpace(
        id: ImGuiID,
        size: ImVec2,
        flags: ImGuiDockNodeFlags,
        window_class: *const ImGuiWindowClass,
    ) -> ImGuiID;
}
extern "C" {
    pub fn igDockSpaceOverViewport(
        viewport: *const ImGuiViewport,
        flags: ImGuiDockNodeFlags,
        window_class: *const ImGuiWindowClass,
    ) -> ImGuiID;
}
extern "C" {
    pub fn igSetNextWindowDockID(dock_id: ImGuiID, cond: ImGuiCond);
}
extern "C" {
    pub fn igSetNextWindowClass(window_class: *const ImGuiWindowClass);
}
extern "C" {
    pub fn igGetWindowDockID() -> ImGuiID;
}
extern "C" {
    pub fn igIsWindowDocked() -> bool;
}
extern "C" {
    pub fn igLogToTTY(auto_open_depth: ::std::os::raw::c_int);
}
extern "C" {
    pub fn igLogToFile(
        auto_open_depth: ::std::os::raw::c_int,
        filename: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn igLogToClipboard(auto_open_depth: ::std::os::raw::c_int);
}
extern "C" {
    pub fn igLogFinish();
}
extern "C" {
    pub fn igLogButtons();
}
extern "C" {
    pub fn igLogTextV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
extern "C" {
    pub fn igBeginDragDropSource(flags: ImGuiDragDropFlags) -> bool;
}
extern "C" {
    pub fn igSetDragDropPayload(
        type_: *const ::std::os::raw::c_char,
        data: *const ::std::os::raw::c_void,
        sz: size_t,
        cond: ImGuiCond,
    ) -> bool;
}
extern "C" {
    pub fn igEndDragDropSource();
}
extern "C" {
    pub fn igBeginDragDropTarget() -> bool;
}
extern "C" {
    pub fn igAcceptDragDropPayload(
        type_: *const ::std::os::raw::c_char,
        flags: ImGuiDragDropFlags,
    ) -> *const ImGuiPayload;
}
extern "C" {
    pub fn igEndDragDropTarget();
}
extern "C" {
    pub fn igGetDragDropPayload() -> *const ImGuiPayload;
}
extern "C" {
    pub fn igBeginDisabled(disabled: bool);
}
extern "C" {
    pub fn igEndDisabled();
}
extern "C" {
    pub fn igPushClipRect(
        clip_rect_min: ImVec2,
        clip_rect_max: ImVec2,
        intersect_with_current_clip_rect: bool,
    );
}
extern "C" {
    pub fn igPopClipRect();
}
extern "C" {
    pub fn igSetItemDefaultFocus();
}
extern "C" {
    pub fn igSetKeyboardFocusHere(offset: ::std::os::raw::c_int);
}
extern "C" {
    pub fn igIsItemHovered(flags: ImGuiHoveredFlags) -> bool;
}
extern "C" {
    pub fn igIsItemActive() -> bool;
}
extern "C" {
    pub fn igIsItemFocused() -> bool;
}
extern "C" {
    pub fn igIsItemClicked(mouse_button: ImGuiMouseButton) -> bool;
}
extern "C" {
    pub fn igIsItemVisible() -> bool;
}
extern "C" {
    pub fn igIsItemEdited() -> bool;
}
extern "C" {
    pub fn igIsItemActivated() -> bool;
}
extern "C" {
    pub fn igIsItemDeactivated() -> bool;
}
extern "C" {
    pub fn igIsItemDeactivatedAfterEdit() -> bool;
}
extern "C" {
    pub fn igIsItemToggledOpen() -> bool;
}
extern "C" {
    pub fn igIsAnyItemHovered() -> bool;
}
extern "C" {
    pub fn igIsAnyItemActive() -> bool;
}
extern "C" {
    pub fn igIsAnyItemFocused() -> bool;
}
extern "C" {
    pub fn igGetItemRectMin(pOut: *mut ImVec2);
}
extern "C" {
    pub fn igGetItemRectMax(pOut: *mut ImVec2);
}
extern "C" {
    pub fn igGetItemRectSize(pOut: *mut ImVec2);
}
extern "C" {
    pub fn igSetItemAllowOverlap();
}
extern "C" {
    pub fn igGetMainViewport() -> *mut ImGuiViewport;
}
extern "C" {
    pub fn igGetBackgroundDrawList_Nil() -> *mut ImDrawList;
}
extern "C" {
    pub fn igGetForegroundDrawList_Nil() -> *mut ImDrawList;
}
extern "C" {
    pub fn igGetBackgroundDrawList_ViewportPtr(viewport: *mut ImGuiViewport) -> *mut ImDrawList;
}
extern "C" {
    pub fn igGetForegroundDrawList_ViewportPtr(viewport: *mut ImGuiViewport) -> *mut ImDrawList;
}
extern "C" {
    pub fn igIsRectVisible_Nil(size: ImVec2) -> bool;
}
extern "C" {
    pub fn igIsRectVisible_Vec2(rect_min: ImVec2, rect_max: ImVec2) -> bool;
}
extern "C" {
    pub fn igGetTime() -> f64;
}
extern "C" {
    pub fn igGetFrameCount() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igGetDrawListSharedData() -> *mut ImDrawListSharedData;
}
extern "C" {
    pub fn igGetStyleColorName(idx: ImGuiCol) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn igSetStateStorage(storage: *mut ImGuiStorage);
}
extern "C" {
    pub fn igGetStateStorage() -> *mut ImGuiStorage;
}
extern "C" {
    pub fn igBeginChildFrame(id: ImGuiID, size: ImVec2, flags: ImGuiWindowFlags) -> bool;
}
extern "C" {
    pub fn igEndChildFrame();
}
extern "C" {
    pub fn igCalcTextSize(
        pOut: *mut ImVec2,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        hide_text_after_double_hash: bool,
        wrap_width: f32,
    );
}
extern "C" {
    pub fn igColorConvertU32ToFloat4(pOut: *mut ImVec4, in_: ImU32);
}
extern "C" {
    pub fn igColorConvertFloat4ToU32(in_: ImVec4) -> ImU32;
}
extern "C" {
    pub fn igColorConvertRGBtoHSV(
        r: f32,
        g: f32,
        b: f32,
        out_h: *mut f32,
        out_s: *mut f32,
        out_v: *mut f32,
    );
}
extern "C" {
    pub fn igColorConvertHSVtoRGB(
        h: f32,
        s: f32,
        v: f32,
        out_r: *mut f32,
        out_g: *mut f32,
        out_b: *mut f32,
    );
}
extern "C" {
    pub fn igIsKeyDown(key: ImGuiKey) -> bool;
}
extern "C" {
    pub fn igIsKeyPressed(key: ImGuiKey, repeat: bool) -> bool;
}
extern "C" {
    pub fn igIsKeyReleased(key: ImGuiKey) -> bool;
}
extern "C" {
    pub fn igGetKeyPressedAmount(
        key: ImGuiKey,
        repeat_delay: f32,
        rate: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igGetKeyName(key: ImGuiKey) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn igSetNextFrameWantCaptureKeyboard(want_capture_keyboard: bool);
}
extern "C" {
    pub fn igIsMouseDown(button: ImGuiMouseButton) -> bool;
}
extern "C" {
    pub fn igIsMouseClicked(button: ImGuiMouseButton, repeat: bool) -> bool;
}
extern "C" {
    pub fn igIsMouseReleased(button: ImGuiMouseButton) -> bool;
}
extern "C" {
    pub fn igIsMouseDoubleClicked(button: ImGuiMouseButton) -> bool;
}
extern "C" {
    pub fn igGetMouseClickedCount(button: ImGuiMouseButton) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igIsMouseHoveringRect(r_min: ImVec2, r_max: ImVec2, clip: bool) -> bool;
}
extern "C" {
    pub fn igIsMousePosValid(mouse_pos: *const ImVec2) -> bool;
}
extern "C" {
    pub fn igIsAnyMouseDown() -> bool;
}
extern "C" {
    pub fn igGetMousePos(pOut: *mut ImVec2);
}
extern "C" {
    pub fn igGetMousePosOnOpeningCurrentPopup(pOut: *mut ImVec2);
}
extern "C" {
    pub fn igIsMouseDragging(button: ImGuiMouseButton, lock_threshold: f32) -> bool;
}
extern "C" {
    pub fn igGetMouseDragDelta(pOut: *mut ImVec2, button: ImGuiMouseButton, lock_threshold: f32);
}
extern "C" {
    pub fn igResetMouseDragDelta(button: ImGuiMouseButton);
}
extern "C" {
    pub fn igGetMouseCursor() -> ImGuiMouseCursor;
}
extern "C" {
    pub fn igSetMouseCursor(cursor_type: ImGuiMouseCursor);
}
extern "C" {
    pub fn igSetNextFrameWantCaptureMouse(want_capture_mouse: bool);
}
extern "C" {
    pub fn igGetClipboardText() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn igSetClipboardText(text: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn igLoadIniSettingsFromDisk(ini_filename: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn igLoadIniSettingsFromMemory(ini_data: *const ::std::os::raw::c_char, ini_size: size_t);
}
extern "C" {
    pub fn igSaveIniSettingsToDisk(ini_filename: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn igSaveIniSettingsToMemory(out_ini_size: *mut size_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn igDebugTextEncoding(text: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn igDebugCheckVersionAndDataLayout(
        version_str: *const ::std::os::raw::c_char,
        sz_io: size_t,
        sz_style: size_t,
        sz_vec2: size_t,
        sz_vec4: size_t,
        sz_drawvert: size_t,
        sz_drawidx: size_t,
    ) -> bool;
}
extern "C" {
    pub fn igSetAllocatorFunctions(
        alloc_func: ImGuiMemAllocFunc,
        free_func: ImGuiMemFreeFunc,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn igGetAllocatorFunctions(
        p_alloc_func: *mut ImGuiMemAllocFunc,
        p_free_func: *mut ImGuiMemFreeFunc,
        p_user_data: *mut *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn igMemAlloc(size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn igMemFree(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn igGetPlatformIO() -> *mut ImGuiPlatformIO;
}
extern "C" {
    pub fn igUpdatePlatformWindows();
}
extern "C" {
    pub fn igRenderPlatformWindowsDefault(
        platform_render_arg: *mut ::std::os::raw::c_void,
        renderer_render_arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn igDestroyPlatformWindows();
}
extern "C" {
    pub fn igFindViewportByID(id: ImGuiID) -> *mut ImGuiViewport;
}
extern "C" {
    pub fn igFindViewportByPlatformHandle(
        platform_handle: *mut ::std::os::raw::c_void,
    ) -> *mut ImGuiViewport;
}
extern "C" {
    pub fn ImGuiStyle_ImGuiStyle() -> *mut ImGuiStyle;
}
extern "C" {
    pub fn ImGuiStyle_destroy(self_: *mut ImGuiStyle);
}
extern "C" {
    pub fn ImGuiStyle_ScaleAllSizes(self_: *mut ImGuiStyle, scale_factor: f32);
}
extern "C" {
    pub fn ImGuiIO_AddKeyEvent(self_: *mut ImGuiIO, key: ImGuiKey, down: bool);
}
extern "C" {
    pub fn ImGuiIO_AddKeyAnalogEvent(self_: *mut ImGuiIO, key: ImGuiKey, down: bool, v: f32);
}
extern "C" {
    pub fn ImGuiIO_AddMousePosEvent(self_: *mut ImGuiIO, x: f32, y: f32);
}
extern "C" {
    pub fn ImGuiIO_AddMouseButtonEvent(
        self_: *mut ImGuiIO,
        button: ::std::os::raw::c_int,
        down: bool,
    );
}
extern "C" {
    pub fn ImGuiIO_AddMouseWheelEvent(self_: *mut ImGuiIO, wh_x: f32, wh_y: f32);
}
extern "C" {
    pub fn ImGuiIO_AddMouseViewportEvent(self_: *mut ImGuiIO, id: ImGuiID);
}
extern "C" {
    pub fn ImGuiIO_AddFocusEvent(self_: *mut ImGuiIO, focused: bool);
}
extern "C" {
    pub fn ImGuiIO_AddInputCharacter(self_: *mut ImGuiIO, c: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn ImGuiIO_AddInputCharacterUTF16(self_: *mut ImGuiIO, c: ImWchar16);
}
extern "C" {
    pub fn ImGuiIO_AddInputCharactersUTF8(self_: *mut ImGuiIO, str_: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn ImGuiIO_SetKeyEventNativeData(
        self_: *mut ImGuiIO,
        key: ImGuiKey,
        native_keycode: ::std::os::raw::c_int,
        native_scancode: ::std::os::raw::c_int,
        native_legacy_index: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImGuiIO_SetAppAcceptingEvents(self_: *mut ImGuiIO, accepting_events: bool);
}
extern "C" {
    pub fn ImGuiIO_ClearInputCharacters(self_: *mut ImGuiIO);
}
extern "C" {
    pub fn ImGuiIO_ClearInputKeys(self_: *mut ImGuiIO);
}
extern "C" {
    pub fn ImGuiIO_ImGuiIO() -> *mut ImGuiIO;
}
extern "C" {
    pub fn ImGuiIO_destroy(self_: *mut ImGuiIO);
}
extern "C" {
    pub fn ImGuiInputTextCallbackData_ImGuiInputTextCallbackData() -> *mut ImGuiInputTextCallbackData;
}
extern "C" {
    pub fn ImGuiInputTextCallbackData_destroy(self_: *mut ImGuiInputTextCallbackData);
}
extern "C" {
    pub fn ImGuiInputTextCallbackData_DeleteChars(
        self_: *mut ImGuiInputTextCallbackData,
        pos: ::std::os::raw::c_int,
        bytes_count: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImGuiInputTextCallbackData_InsertChars(
        self_: *mut ImGuiInputTextCallbackData,
        pos: ::std::os::raw::c_int,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ImGuiInputTextCallbackData_SelectAll(self_: *mut ImGuiInputTextCallbackData);
}
extern "C" {
    pub fn ImGuiInputTextCallbackData_ClearSelection(self_: *mut ImGuiInputTextCallbackData);
}
extern "C" {
    pub fn ImGuiInputTextCallbackData_HasSelection(self_: *mut ImGuiInputTextCallbackData) -> bool;
}
extern "C" {
    pub fn ImGuiWindowClass_ImGuiWindowClass() -> *mut ImGuiWindowClass;
}
extern "C" {
    pub fn ImGuiWindowClass_destroy(self_: *mut ImGuiWindowClass);
}
extern "C" {
    pub fn ImGuiPayload_ImGuiPayload() -> *mut ImGuiPayload;
}
extern "C" {
    pub fn ImGuiPayload_destroy(self_: *mut ImGuiPayload);
}
extern "C" {
    pub fn ImGuiPayload_Clear(self_: *mut ImGuiPayload);
}
extern "C" {
    pub fn ImGuiPayload_IsDataType(
        self_: *mut ImGuiPayload,
        type_: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn ImGuiPayload_IsPreview(self_: *mut ImGuiPayload) -> bool;
}
extern "C" {
    pub fn ImGuiPayload_IsDelivery(self_: *mut ImGuiPayload) -> bool;
}
extern "C" {
    pub fn ImGuiTableColumnSortSpecs_ImGuiTableColumnSortSpecs() -> *mut ImGuiTableColumnSortSpecs;
}
extern "C" {
    pub fn ImGuiTableColumnSortSpecs_destroy(self_: *mut ImGuiTableColumnSortSpecs);
}
extern "C" {
    pub fn ImGuiTableSortSpecs_ImGuiTableSortSpecs() -> *mut ImGuiTableSortSpecs;
}
extern "C" {
    pub fn ImGuiTableSortSpecs_destroy(self_: *mut ImGuiTableSortSpecs);
}
extern "C" {
    pub fn ImGuiOnceUponAFrame_ImGuiOnceUponAFrame() -> *mut ImGuiOnceUponAFrame;
}
extern "C" {
    pub fn ImGuiOnceUponAFrame_destroy(self_: *mut ImGuiOnceUponAFrame);
}
extern "C" {
    pub fn ImGuiTextFilter_ImGuiTextFilter(
        default_filter: *const ::std::os::raw::c_char,
    ) -> *mut ImGuiTextFilter;
}
extern "C" {
    pub fn ImGuiTextFilter_destroy(self_: *mut ImGuiTextFilter);
}
extern "C" {
    pub fn ImGuiTextFilter_Draw(
        self_: *mut ImGuiTextFilter,
        label: *const ::std::os::raw::c_char,
        width: f32,
    ) -> bool;
}
extern "C" {
    pub fn ImGuiTextFilter_PassFilter(
        self_: *mut ImGuiTextFilter,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn ImGuiTextFilter_Build(self_: *mut ImGuiTextFilter);
}
extern "C" {
    pub fn ImGuiTextFilter_Clear(self_: *mut ImGuiTextFilter);
}
extern "C" {
    pub fn ImGuiTextFilter_IsActive(self_: *mut ImGuiTextFilter) -> bool;
}
extern "C" {
    pub fn ImGuiTextRange_ImGuiTextRange_Nil() -> *mut ImGuiTextRange;
}
extern "C" {
    pub fn ImGuiTextRange_destroy(self_: *mut ImGuiTextRange);
}
extern "C" {
    pub fn ImGuiTextRange_ImGuiTextRange_Str(
        _b: *const ::std::os::raw::c_char,
        _e: *const ::std::os::raw::c_char,
    ) -> *mut ImGuiTextRange;
}
extern "C" {
    pub fn ImGuiTextRange_empty(self_: *mut ImGuiTextRange) -> bool;
}
extern "C" {
    pub fn ImGuiTextRange_split(
        self_: *mut ImGuiTextRange,
        separator: ::std::os::raw::c_char,
        out: *mut ImVector_ImGuiTextRange,
    );
}
extern "C" {
    pub fn ImGuiTextBuffer_ImGuiTextBuffer() -> *mut ImGuiTextBuffer;
}
extern "C" {
    pub fn ImGuiTextBuffer_destroy(self_: *mut ImGuiTextBuffer);
}
extern "C" {
    pub fn ImGuiTextBuffer_begin(self_: *mut ImGuiTextBuffer) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ImGuiTextBuffer_end(self_: *mut ImGuiTextBuffer) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ImGuiTextBuffer_size(self_: *mut ImGuiTextBuffer) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImGuiTextBuffer_empty(self_: *mut ImGuiTextBuffer) -> bool;
}
extern "C" {
    pub fn ImGuiTextBuffer_clear(self_: *mut ImGuiTextBuffer);
}
extern "C" {
    pub fn ImGuiTextBuffer_reserve(self_: *mut ImGuiTextBuffer, capacity: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ImGuiTextBuffer_c_str(self_: *mut ImGuiTextBuffer) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ImGuiTextBuffer_append(
        self_: *mut ImGuiTextBuffer,
        str_: *const ::std::os::raw::c_char,
        str_end: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ImGuiTextBuffer_appendfv(
        self_: *mut ImGuiTextBuffer,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    );
}
extern "C" {
    pub fn ImGuiStoragePair_ImGuiStoragePair_Int(
        _key: ImGuiID,
        _val_i: ::std::os::raw::c_int,
    ) -> *mut ImGuiStoragePair;
}
extern "C" {
    pub fn ImGuiStoragePair_destroy(self_: *mut ImGuiStoragePair);
}
extern "C" {
    pub fn ImGuiStoragePair_ImGuiStoragePair_Float(
        _key: ImGuiID,
        _val_f: f32,
    ) -> *mut ImGuiStoragePair;
}
extern "C" {
    pub fn ImGuiStoragePair_ImGuiStoragePair_Ptr(
        _key: ImGuiID,
        _val_p: *mut ::std::os::raw::c_void,
    ) -> *mut ImGuiStoragePair;
}
extern "C" {
    pub fn ImGuiStorage_Clear(self_: *mut ImGuiStorage);
}
extern "C" {
    pub fn ImGuiStorage_GetInt(
        self_: *mut ImGuiStorage,
        key: ImGuiID,
        default_val: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImGuiStorage_SetInt(self_: *mut ImGuiStorage, key: ImGuiID, val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ImGuiStorage_GetBool(self_: *mut ImGuiStorage, key: ImGuiID, default_val: bool) -> bool;
}
extern "C" {
    pub fn ImGuiStorage_SetBool(self_: *mut ImGuiStorage, key: ImGuiID, val: bool);
}
extern "C" {
    pub fn ImGuiStorage_GetFloat(self_: *mut ImGuiStorage, key: ImGuiID, default_val: f32) -> f32;
}
extern "C" {
    pub fn ImGuiStorage_SetFloat(self_: *mut ImGuiStorage, key: ImGuiID, val: f32);
}
extern "C" {
    pub fn ImGuiStorage_GetVoidPtr(
        self_: *mut ImGuiStorage,
        key: ImGuiID,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ImGuiStorage_SetVoidPtr(
        self_: *mut ImGuiStorage,
        key: ImGuiID,
        val: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn ImGuiStorage_GetIntRef(
        self_: *mut ImGuiStorage,
        key: ImGuiID,
        default_val: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImGuiStorage_GetBoolRef(
        self_: *mut ImGuiStorage,
        key: ImGuiID,
        default_val: bool,
    ) -> *mut bool;
}
extern "C" {
    pub fn ImGuiStorage_GetFloatRef(
        self_: *mut ImGuiStorage,
        key: ImGuiID,
        default_val: f32,
    ) -> *mut f32;
}
extern "C" {
    pub fn ImGuiStorage_GetVoidPtrRef(
        self_: *mut ImGuiStorage,
        key: ImGuiID,
        default_val: *mut ::std::os::raw::c_void,
    ) -> *mut *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ImGuiStorage_SetAllInt(self_: *mut ImGuiStorage, val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ImGuiStorage_BuildSortByKey(self_: *mut ImGuiStorage);
}
extern "C" {
    pub fn ImGuiListClipper_ImGuiListClipper() -> *mut ImGuiListClipper;
}
extern "C" {
    pub fn ImGuiListClipper_destroy(self_: *mut ImGuiListClipper);
}
extern "C" {
    pub fn ImGuiListClipper_Begin(
        self_: *mut ImGuiListClipper,
        items_count: ::std::os::raw::c_int,
        items_height: f32,
    );
}
extern "C" {
    pub fn ImGuiListClipper_End(self_: *mut ImGuiListClipper);
}
extern "C" {
    pub fn ImGuiListClipper_Step(self_: *mut ImGuiListClipper) -> bool;
}
extern "C" {
    pub fn ImGuiListClipper_ForceDisplayRangeByIndices(
        self_: *mut ImGuiListClipper,
        item_min: ::std::os::raw::c_int,
        item_max: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImColor_ImColor_Nil() -> *mut ImColor;
}
extern "C" {
    pub fn ImColor_destroy(self_: *mut ImColor);
}
extern "C" {
    pub fn ImColor_ImColor_Float(r: f32, g: f32, b: f32, a: f32) -> *mut ImColor;
}
extern "C" {
    pub fn ImColor_ImColor_Vec4(col: ImVec4) -> *mut ImColor;
}
extern "C" {
    pub fn ImColor_ImColor_Int(
        r: ::std::os::raw::c_int,
        g: ::std::os::raw::c_int,
        b: ::std::os::raw::c_int,
        a: ::std::os::raw::c_int,
    ) -> *mut ImColor;
}
extern "C" {
    pub fn ImColor_ImColor_U32(rgba: ImU32) -> *mut ImColor;
}
extern "C" {
    pub fn ImColor_SetHSV(self_: *mut ImColor, h: f32, s: f32, v: f32, a: f32);
}
extern "C" {
    pub fn ImColor_HSV(pOut: *mut ImColor, h: f32, s: f32, v: f32, a: f32);
}
extern "C" {
    pub fn ImDrawCmd_ImDrawCmd() -> *mut ImDrawCmd;
}
extern "C" {
    pub fn ImDrawCmd_destroy(self_: *mut ImDrawCmd);
}
extern "C" {
    pub fn ImDrawCmd_GetTexID(self_: *mut ImDrawCmd) -> ImTextureID;
}
extern "C" {
    pub fn ImDrawListSplitter_ImDrawListSplitter() -> *mut ImDrawListSplitter;
}
extern "C" {
    pub fn ImDrawListSplitter_destroy(self_: *mut ImDrawListSplitter);
}
extern "C" {
    pub fn ImDrawListSplitter_Clear(self_: *mut ImDrawListSplitter);
}
extern "C" {
    pub fn ImDrawListSplitter_ClearFreeMemory(self_: *mut ImDrawListSplitter);
}
extern "C" {
    pub fn ImDrawListSplitter_Split(
        self_: *mut ImDrawListSplitter,
        draw_list: *mut ImDrawList,
        count: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImDrawListSplitter_Merge(self_: *mut ImDrawListSplitter, draw_list: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawListSplitter_SetCurrentChannel(
        self_: *mut ImDrawListSplitter,
        draw_list: *mut ImDrawList,
        channel_idx: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImDrawList_ImDrawList(shared_data: *const ImDrawListSharedData) -> *mut ImDrawList;
}
extern "C" {
    pub fn ImDrawList_destroy(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList_PushClipRect(
        self_: *mut ImDrawList,
        clip_rect_min: ImVec2,
        clip_rect_max: ImVec2,
        intersect_with_current_clip_rect: bool,
    );
}
extern "C" {
    pub fn ImDrawList_PushClipRectFullScreen(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList_PopClipRect(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList_PushTextureID(self_: *mut ImDrawList, texture_id: ImTextureID);
}
extern "C" {
    pub fn ImDrawList_PopTextureID(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList_GetClipRectMin(pOut: *mut ImVec2, self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList_GetClipRectMax(pOut: *mut ImVec2, self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList_AddLine(
        self_: *mut ImDrawList,
        p1: ImVec2,
        p2: ImVec2,
        col: ImU32,
        thickness: f32,
    );
}
extern "C" {
    pub fn ImDrawList_AddRect(
        self_: *mut ImDrawList,
        p_min: ImVec2,
        p_max: ImVec2,
        col: ImU32,
        rounding: f32,
        flags: ImDrawFlags,
        thickness: f32,
    );
}
extern "C" {
    pub fn ImDrawList_AddRectFilled(
        self_: *mut ImDrawList,
        p_min: ImVec2,
        p_max: ImVec2,
        col: ImU32,
        rounding: f32,
        flags: ImDrawFlags,
    );
}
extern "C" {
    pub fn ImDrawList_AddRectFilledMultiColor(
        self_: *mut ImDrawList,
        p_min: ImVec2,
        p_max: ImVec2,
        col_upr_left: ImU32,
        col_upr_right: ImU32,
        col_bot_right: ImU32,
        col_bot_left: ImU32,
    );
}
extern "C" {
    pub fn ImDrawList_AddQuad(
        self_: *mut ImDrawList,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        p4: ImVec2,
        col: ImU32,
        thickness: f32,
    );
}
extern "C" {
    pub fn ImDrawList_AddQuadFilled(
        self_: *mut ImDrawList,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        p4: ImVec2,
        col: ImU32,
    );
}
extern "C" {
    pub fn ImDrawList_AddTriangle(
        self_: *mut ImDrawList,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        col: ImU32,
        thickness: f32,
    );
}
extern "C" {
    pub fn ImDrawList_AddTriangleFilled(
        self_: *mut ImDrawList,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        col: ImU32,
    );
}
extern "C" {
    pub fn ImDrawList_AddCircle(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
        thickness: f32,
    );
}
extern "C" {
    pub fn ImDrawList_AddCircleFilled(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImDrawList_AddNgon(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
        thickness: f32,
    );
}
extern "C" {
    pub fn ImDrawList_AddNgonFilled(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: f32,
        col: ImU32,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImDrawList_AddText_Vec2(
        self_: *mut ImDrawList,
        pos: ImVec2,
        col: ImU32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ImDrawList_AddText_FontPtr(
        self_: *mut ImDrawList,
        font: *const ImFont,
        font_size: f32,
        pos: ImVec2,
        col: ImU32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
        cpu_fine_clip_rect: *const ImVec4,
    );
}
extern "C" {
    pub fn ImDrawList_AddPolyline(
        self_: *mut ImDrawList,
        points: *const ImVec2,
        num_points: ::std::os::raw::c_int,
        col: ImU32,
        flags: ImDrawFlags,
        thickness: f32,
    );
}
extern "C" {
    pub fn ImDrawList_AddConvexPolyFilled(
        self_: *mut ImDrawList,
        points: *const ImVec2,
        num_points: ::std::os::raw::c_int,
        col: ImU32,
    );
}
extern "C" {
    pub fn ImDrawList_AddBezierCubic(
        self_: *mut ImDrawList,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        p4: ImVec2,
        col: ImU32,
        thickness: f32,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImDrawList_AddBezierQuadratic(
        self_: *mut ImDrawList,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        col: ImU32,
        thickness: f32,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImDrawList_AddImage(
        self_: *mut ImDrawList,
        user_texture_id: ImTextureID,
        p_min: ImVec2,
        p_max: ImVec2,
        uv_min: ImVec2,
        uv_max: ImVec2,
        col: ImU32,
    );
}
extern "C" {
    pub fn ImDrawList_AddImageQuad(
        self_: *mut ImDrawList,
        user_texture_id: ImTextureID,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        p4: ImVec2,
        uv1: ImVec2,
        uv2: ImVec2,
        uv3: ImVec2,
        uv4: ImVec2,
        col: ImU32,
    );
}
extern "C" {
    pub fn ImDrawList_AddImageRounded(
        self_: *mut ImDrawList,
        user_texture_id: ImTextureID,
        p_min: ImVec2,
        p_max: ImVec2,
        uv_min: ImVec2,
        uv_max: ImVec2,
        col: ImU32,
        rounding: f32,
        flags: ImDrawFlags,
    );
}
extern "C" {
    pub fn ImDrawList_PathClear(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList_PathLineTo(self_: *mut ImDrawList, pos: ImVec2);
}
extern "C" {
    pub fn ImDrawList_PathLineToMergeDuplicate(self_: *mut ImDrawList, pos: ImVec2);
}
extern "C" {
    pub fn ImDrawList_PathFillConvex(self_: *mut ImDrawList, col: ImU32);
}
extern "C" {
    pub fn ImDrawList_PathStroke(
        self_: *mut ImDrawList,
        col: ImU32,
        flags: ImDrawFlags,
        thickness: f32,
    );
}
extern "C" {
    pub fn ImDrawList_PathArcTo(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: f32,
        a_min: f32,
        a_max: f32,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImDrawList_PathArcToFast(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: f32,
        a_min_of_12: ::std::os::raw::c_int,
        a_max_of_12: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImDrawList_PathBezierCubicCurveTo(
        self_: *mut ImDrawList,
        p2: ImVec2,
        p3: ImVec2,
        p4: ImVec2,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImDrawList_PathBezierQuadraticCurveTo(
        self_: *mut ImDrawList,
        p2: ImVec2,
        p3: ImVec2,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImDrawList_PathRect(
        self_: *mut ImDrawList,
        rect_min: ImVec2,
        rect_max: ImVec2,
        rounding: f32,
        flags: ImDrawFlags,
    );
}
extern "C" {
    pub fn ImDrawList_AddCallback(
        self_: *mut ImDrawList,
        callback: ImDrawCallback,
        callback_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn ImDrawList_AddDrawCmd(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList_CloneOutput(self_: *mut ImDrawList) -> *mut ImDrawList;
}
extern "C" {
    pub fn ImDrawList_ChannelsSplit(self_: *mut ImDrawList, count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ImDrawList_ChannelsMerge(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList_ChannelsSetCurrent(self_: *mut ImDrawList, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ImDrawList_PrimReserve(
        self_: *mut ImDrawList,
        idx_count: ::std::os::raw::c_int,
        vtx_count: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImDrawList_PrimUnreserve(
        self_: *mut ImDrawList,
        idx_count: ::std::os::raw::c_int,
        vtx_count: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImDrawList_PrimRect(self_: *mut ImDrawList, a: ImVec2, b: ImVec2, col: ImU32);
}
extern "C" {
    pub fn ImDrawList_PrimRectUV(
        self_: *mut ImDrawList,
        a: ImVec2,
        b: ImVec2,
        uv_a: ImVec2,
        uv_b: ImVec2,
        col: ImU32,
    );
}
extern "C" {
    pub fn ImDrawList_PrimQuadUV(
        self_: *mut ImDrawList,
        a: ImVec2,
        b: ImVec2,
        c: ImVec2,
        d: ImVec2,
        uv_a: ImVec2,
        uv_b: ImVec2,
        uv_c: ImVec2,
        uv_d: ImVec2,
        col: ImU32,
    );
}
extern "C" {
    pub fn ImDrawList_PrimWriteVtx(self_: *mut ImDrawList, pos: ImVec2, uv: ImVec2, col: ImU32);
}
extern "C" {
    pub fn ImDrawList_PrimWriteIdx(self_: *mut ImDrawList, idx: ImDrawIdx);
}
extern "C" {
    pub fn ImDrawList_PrimVtx(self_: *mut ImDrawList, pos: ImVec2, uv: ImVec2, col: ImU32);
}
extern "C" {
    pub fn ImDrawList__ResetForNewFrame(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList__ClearFreeMemory(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList__PopUnusedDrawCmd(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList__TryMergeDrawCmds(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList__OnChangedClipRect(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList__OnChangedTextureID(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList__OnChangedVtxOffset(self_: *mut ImDrawList);
}
extern "C" {
    pub fn ImDrawList__CalcCircleAutoSegmentCount(
        self_: *mut ImDrawList,
        radius: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImDrawList__PathArcToFastEx(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: f32,
        a_min_sample: ::std::os::raw::c_int,
        a_max_sample: ::std::os::raw::c_int,
        a_step: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImDrawList__PathArcToN(
        self_: *mut ImDrawList,
        center: ImVec2,
        radius: f32,
        a_min: f32,
        a_max: f32,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImDrawData_ImDrawData() -> *mut ImDrawData;
}
extern "C" {
    pub fn ImDrawData_destroy(self_: *mut ImDrawData);
}
extern "C" {
    pub fn ImDrawData_Clear(self_: *mut ImDrawData);
}
extern "C" {
    pub fn ImDrawData_DeIndexAllBuffers(self_: *mut ImDrawData);
}
extern "C" {
    pub fn ImDrawData_ScaleClipRects(self_: *mut ImDrawData, fb_scale: ImVec2);
}
extern "C" {
    pub fn ImFontConfig_ImFontConfig() -> *mut ImFontConfig;
}
extern "C" {
    pub fn ImFontConfig_destroy(self_: *mut ImFontConfig);
}
extern "C" {
    pub fn ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder() -> *mut ImFontGlyphRangesBuilder;
}
extern "C" {
    pub fn ImFontGlyphRangesBuilder_destroy(self_: *mut ImFontGlyphRangesBuilder);
}
extern "C" {
    pub fn ImFontGlyphRangesBuilder_Clear(self_: *mut ImFontGlyphRangesBuilder);
}
extern "C" {
    pub fn ImFontGlyphRangesBuilder_GetBit(self_: *mut ImFontGlyphRangesBuilder, n: size_t)
        -> bool;
}
extern "C" {
    pub fn ImFontGlyphRangesBuilder_SetBit(self_: *mut ImFontGlyphRangesBuilder, n: size_t);
}
extern "C" {
    pub fn ImFontGlyphRangesBuilder_AddChar(self_: *mut ImFontGlyphRangesBuilder, c: ImWchar);
}
extern "C" {
    pub fn ImFontGlyphRangesBuilder_AddText(
        self_: *mut ImFontGlyphRangesBuilder,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ImFontGlyphRangesBuilder_AddRanges(
        self_: *mut ImFontGlyphRangesBuilder,
        ranges: *const ImWchar,
    );
}
extern "C" {
    pub fn ImFontGlyphRangesBuilder_BuildRanges(
        self_: *mut ImFontGlyphRangesBuilder,
        out_ranges: *mut ImVector_ImWchar,
    );
}
extern "C" {
    pub fn ImFontAtlasCustomRect_ImFontAtlasCustomRect() -> *mut ImFontAtlasCustomRect;
}
extern "C" {
    pub fn ImFontAtlasCustomRect_destroy(self_: *mut ImFontAtlasCustomRect);
}
extern "C" {
    pub fn ImFontAtlasCustomRect_IsPacked(self_: *mut ImFontAtlasCustomRect) -> bool;
}
extern "C" {
    pub fn ImFontAtlas_ImFontAtlas() -> *mut ImFontAtlas;
}
extern "C" {
    pub fn ImFontAtlas_destroy(self_: *mut ImFontAtlas);
}
extern "C" {
    pub fn ImFontAtlas_AddFont(
        self_: *mut ImFontAtlas,
        font_cfg: *const ImFontConfig,
    ) -> *mut ImFont;
}
extern "C" {
    pub fn ImFontAtlas_AddFontDefault(
        self_: *mut ImFontAtlas,
        font_cfg: *const ImFontConfig,
    ) -> *mut ImFont;
}
extern "C" {
    pub fn ImFontAtlas_AddFontFromFileTTF(
        self_: *mut ImFontAtlas,
        filename: *const ::std::os::raw::c_char,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont;
}
extern "C" {
    pub fn ImFontAtlas_AddFontFromMemoryTTF(
        self_: *mut ImFontAtlas,
        font_data: *mut ::std::os::raw::c_void,
        font_size: ::std::os::raw::c_int,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont;
}
extern "C" {
    pub fn ImFontAtlas_AddFontFromMemoryCompressedTTF(
        self_: *mut ImFontAtlas,
        compressed_font_data: *const ::std::os::raw::c_void,
        compressed_font_size: ::std::os::raw::c_int,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont;
}
extern "C" {
    pub fn ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(
        self_: *mut ImFontAtlas,
        compressed_font_data_base85: *const ::std::os::raw::c_char,
        size_pixels: f32,
        font_cfg: *const ImFontConfig,
        glyph_ranges: *const ImWchar,
    ) -> *mut ImFont;
}
extern "C" {
    pub fn ImFontAtlas_ClearInputData(self_: *mut ImFontAtlas);
}
extern "C" {
    pub fn ImFontAtlas_ClearTexData(self_: *mut ImFontAtlas);
}
extern "C" {
    pub fn ImFontAtlas_ClearFonts(self_: *mut ImFontAtlas);
}
extern "C" {
    pub fn ImFontAtlas_Clear(self_: *mut ImFontAtlas);
}
extern "C" {
    pub fn ImFontAtlas_Build(self_: *mut ImFontAtlas) -> bool;
}
extern "C" {
    pub fn ImFontAtlas_GetTexDataAsAlpha8(
        self_: *mut ImFontAtlas,
        out_pixels: *mut *mut ::std::os::raw::c_uchar,
        out_width: *mut ::std::os::raw::c_int,
        out_height: *mut ::std::os::raw::c_int,
        out_bytes_per_pixel: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImFontAtlas_GetTexDataAsRGBA32(
        self_: *mut ImFontAtlas,
        out_pixels: *mut *mut ::std::os::raw::c_uchar,
        out_width: *mut ::std::os::raw::c_int,
        out_height: *mut ::std::os::raw::c_int,
        out_bytes_per_pixel: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImFontAtlas_IsBuilt(self_: *mut ImFontAtlas) -> bool;
}
extern "C" {
    pub fn ImFontAtlas_SetTexID(self_: *mut ImFontAtlas, id: ImTextureID);
}
extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesDefault(self_: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesKorean(self_: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesJapanese(self_: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesChineseFull(self_: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(
        self_: *mut ImFontAtlas,
    ) -> *const ImWchar;
}
extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesCyrillic(self_: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesThai(self_: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    pub fn ImFontAtlas_GetGlyphRangesVietnamese(self_: *mut ImFontAtlas) -> *const ImWchar;
}
extern "C" {
    pub fn ImFontAtlas_AddCustomRectRegular(
        self_: *mut ImFontAtlas,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImFontAtlas_AddCustomRectFontGlyph(
        self_: *mut ImFontAtlas,
        font: *mut ImFont,
        id: ImWchar,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        advance_x: f32,
        offset: ImVec2,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImFontAtlas_GetCustomRectByIndex(
        self_: *mut ImFontAtlas,
        index: ::std::os::raw::c_int,
    ) -> *mut ImFontAtlasCustomRect;
}
extern "C" {
    pub fn ImFontAtlas_CalcCustomRectUV(
        self_: *mut ImFontAtlas,
        rect: *const ImFontAtlasCustomRect,
        out_uv_min: *mut ImVec2,
        out_uv_max: *mut ImVec2,
    );
}
extern "C" {
    pub fn ImFontAtlas_GetMouseCursorTexData(
        self_: *mut ImFontAtlas,
        cursor: ImGuiMouseCursor,
        out_offset: *mut ImVec2,
        out_size: *mut ImVec2,
        out_uv_border: *mut ImVec2,
        out_uv_fill: *mut ImVec2,
    ) -> bool;
}
extern "C" {
    pub fn ImFont_ImFont() -> *mut ImFont;
}
extern "C" {
    pub fn ImFont_destroy(self_: *mut ImFont);
}
extern "C" {
    pub fn ImFont_FindGlyph(self_: *mut ImFont, c: ImWchar) -> *const ImFontGlyph;
}
extern "C" {
    pub fn ImFont_FindGlyphNoFallback(self_: *mut ImFont, c: ImWchar) -> *const ImFontGlyph;
}
extern "C" {
    pub fn ImFont_GetCharAdvance(self_: *mut ImFont, c: ImWchar) -> f32;
}
extern "C" {
    pub fn ImFont_IsLoaded(self_: *mut ImFont) -> bool;
}
extern "C" {
    pub fn ImFont_GetDebugName(self_: *mut ImFont) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ImFont_CalcTextSizeA(
        pOut: *mut ImVec2,
        self_: *mut ImFont,
        size: f32,
        max_width: f32,
        wrap_width: f32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        remaining: *mut *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ImFont_CalcWordWrapPositionA(
        self_: *mut ImFont,
        scale: f32,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ImFont_RenderChar(
        self_: *mut ImFont,
        draw_list: *mut ImDrawList,
        size: f32,
        pos: ImVec2,
        col: ImU32,
        c: ImWchar,
    );
}
extern "C" {
    pub fn ImFont_RenderText(
        self_: *mut ImFont,
        draw_list: *mut ImDrawList,
        size: f32,
        pos: ImVec2,
        col: ImU32,
        clip_rect: ImVec4,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
        cpu_fine_clip: bool,
    );
}
extern "C" {
    pub fn ImFont_BuildLookupTable(self_: *mut ImFont);
}
extern "C" {
    pub fn ImFont_ClearOutputData(self_: *mut ImFont);
}
extern "C" {
    pub fn ImFont_GrowIndex(self_: *mut ImFont, new_size: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ImFont_AddGlyph(
        self_: *mut ImFont,
        src_cfg: *const ImFontConfig,
        c: ImWchar,
        x0: f32,
        y0: f32,
        x1: f32,
        y1: f32,
        u0: f32,
        v0: f32,
        u1: f32,
        v1: f32,
        advance_x: f32,
    );
}
extern "C" {
    pub fn ImFont_AddRemapChar(self_: *mut ImFont, dst: ImWchar, src: ImWchar, overwrite_dst: bool);
}
extern "C" {
    pub fn ImFont_SetGlyphVisible(self_: *mut ImFont, c: ImWchar, visible: bool);
}
extern "C" {
    pub fn ImFont_IsGlyphRangeUnused(
        self_: *mut ImFont,
        c_begin: ::std::os::raw::c_uint,
        c_last: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    pub fn ImGuiViewport_ImGuiViewport() -> *mut ImGuiViewport;
}
extern "C" {
    pub fn ImGuiViewport_destroy(self_: *mut ImGuiViewport);
}
extern "C" {
    pub fn ImGuiViewport_GetCenter(pOut: *mut ImVec2, self_: *mut ImGuiViewport);
}
extern "C" {
    pub fn ImGuiViewport_GetWorkCenter(pOut: *mut ImVec2, self_: *mut ImGuiViewport);
}
extern "C" {
    pub fn ImGuiPlatformIO_ImGuiPlatformIO() -> *mut ImGuiPlatformIO;
}
extern "C" {
    pub fn ImGuiPlatformIO_destroy(self_: *mut ImGuiPlatformIO);
}
extern "C" {
    pub fn ImGuiPlatformMonitor_ImGuiPlatformMonitor() -> *mut ImGuiPlatformMonitor;
}
extern "C" {
    pub fn ImGuiPlatformMonitor_destroy(self_: *mut ImGuiPlatformMonitor);
}
extern "C" {
    pub fn ImGuiPlatformImeData_ImGuiPlatformImeData() -> *mut ImGuiPlatformImeData;
}
extern "C" {
    pub fn ImGuiPlatformImeData_destroy(self_: *mut ImGuiPlatformImeData);
}
extern "C" {
    pub fn igGetKeyIndex(key: ImGuiKey) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igImHashData(
        data: *const ::std::os::raw::c_void,
        data_size: size_t,
        seed: ImU32,
    ) -> ImGuiID;
}
extern "C" {
    pub fn igImHashStr(
        data: *const ::std::os::raw::c_char,
        data_size: size_t,
        seed: ImU32,
    ) -> ImGuiID;
}
extern "C" {
    pub fn igImQsort(
        base: *mut ::std::os::raw::c_void,
        count: size_t,
        size_of_element: size_t,
        compare_func: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn igImAlphaBlendColors(col_a: ImU32, col_b: ImU32) -> ImU32;
}
extern "C" {
    pub fn igImIsPowerOfTwo_Int(v: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn igImIsPowerOfTwo_U64(v: ImU64) -> bool;
}
extern "C" {
    pub fn igImUpperPowerOfTwo(v: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igImStricmp(
        str1: *const ::std::os::raw::c_char,
        str2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igImStrnicmp(
        str1: *const ::std::os::raw::c_char,
        str2: *const ::std::os::raw::c_char,
        count: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igImStrncpy(
        dst: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        count: size_t,
    );
}
extern "C" {
    pub fn igImStrdup(str_: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn igImStrdupcpy(
        dst: *mut ::std::os::raw::c_char,
        p_dst_size: *mut size_t,
        str_: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn igImStrchrRange(
        str_begin: *const ::std::os::raw::c_char,
        str_end: *const ::std::os::raw::c_char,
        c: ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn igImStrlenW(str_: *const ImWchar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igImStreolRange(
        str_: *const ::std::os::raw::c_char,
        str_end: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn igImStrbolW(buf_mid_line: *const ImWchar, buf_begin: *const ImWchar) -> *const ImWchar;
}
extern "C" {
    pub fn igImStristr(
        haystack: *const ::std::os::raw::c_char,
        haystack_end: *const ::std::os::raw::c_char,
        needle: *const ::std::os::raw::c_char,
        needle_end: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn igImStrTrimBlanks(str_: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn igImStrSkipBlank(str_: *const ::std::os::raw::c_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn igImCharIsBlankA(c: ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn igImCharIsBlankW(c: ::std::os::raw::c_uint) -> bool;
}
extern "C" {
    pub fn igImFormatString(
        buf: *mut ::std::os::raw::c_char,
        buf_size: size_t,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igImFormatStringV(
        buf: *mut ::std::os::raw::c_char,
        buf_size: size_t,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igImFormatStringToTempBuffer(
        out_buf: *mut *const ::std::os::raw::c_char,
        out_buf_end: *mut *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn igImFormatStringToTempBufferV(
        out_buf: *mut *const ::std::os::raw::c_char,
        out_buf_end: *mut *const ::std::os::raw::c_char,
        fmt: *const ::std::os::raw::c_char,
        args: va_list,
    );
}
extern "C" {
    pub fn igImParseFormatFindStart(
        format: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn igImParseFormatFindEnd(
        format: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn igImParseFormatTrimDecorations(
        format: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: size_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn igImParseFormatSanitizeForPrinting(
        fmt_in: *const ::std::os::raw::c_char,
        fmt_out: *mut ::std::os::raw::c_char,
        fmt_out_size: size_t,
    );
}
extern "C" {
    pub fn igImParseFormatSanitizeForScanning(
        fmt_in: *const ::std::os::raw::c_char,
        fmt_out: *mut ::std::os::raw::c_char,
        fmt_out_size: size_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn igImParseFormatPrecision(
        format: *const ::std::os::raw::c_char,
        default_value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igImTextCharToUtf8(
        out_buf: *mut ::std::os::raw::c_char,
        c: ::std::os::raw::c_uint,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn igImTextStrToUtf8(
        out_buf: *mut ::std::os::raw::c_char,
        out_buf_size: ::std::os::raw::c_int,
        in_text: *const ImWchar,
        in_text_end: *const ImWchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igImTextCharFromUtf8(
        out_char: *mut ::std::os::raw::c_uint,
        in_text: *const ::std::os::raw::c_char,
        in_text_end: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igImTextStrFromUtf8(
        out_buf: *mut ImWchar,
        out_buf_size: ::std::os::raw::c_int,
        in_text: *const ::std::os::raw::c_char,
        in_text_end: *const ::std::os::raw::c_char,
        in_remaining: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igImTextCountCharsFromUtf8(
        in_text: *const ::std::os::raw::c_char,
        in_text_end: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igImTextCountUtf8BytesFromChar(
        in_text: *const ::std::os::raw::c_char,
        in_text_end: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igImTextCountUtf8BytesFromStr(
        in_text: *const ImWchar,
        in_text_end: *const ImWchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igImFileOpen(
        filename: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
    ) -> ImFileHandle;
}
extern "C" {
    pub fn igImFileClose(file: ImFileHandle) -> bool;
}
extern "C" {
    pub fn igImFileGetSize(file: ImFileHandle) -> ImU64;
}
extern "C" {
    pub fn igImFileRead(
        data: *mut ::std::os::raw::c_void,
        size: ImU64,
        count: ImU64,
        file: ImFileHandle,
    ) -> ImU64;
}
extern "C" {
    pub fn igImFileWrite(
        data: *const ::std::os::raw::c_void,
        size: ImU64,
        count: ImU64,
        file: ImFileHandle,
    ) -> ImU64;
}
extern "C" {
    pub fn igImFileLoadToMemory(
        filename: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
        out_file_size: *mut size_t,
        padding_bytes: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn igImPow_Float(x: f32, y: f32) -> f32;
}
extern "C" {
    pub fn igImPow_double(x: f64, y: f64) -> f64;
}
extern "C" {
    pub fn igImLog_Float(x: f32) -> f32;
}
extern "C" {
    pub fn igImLog_double(x: f64) -> f64;
}
extern "C" {
    pub fn igImAbs_Int(x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igImAbs_Float(x: f32) -> f32;
}
extern "C" {
    pub fn igImAbs_double(x: f64) -> f64;
}
extern "C" {
    pub fn igImSign_Float(x: f32) -> f32;
}
extern "C" {
    pub fn igImSign_double(x: f64) -> f64;
}
extern "C" {
    pub fn igImRsqrt_Float(x: f32) -> f32;
}
extern "C" {
    pub fn igImRsqrt_double(x: f64) -> f64;
}
extern "C" {
    pub fn igImMin(pOut: *mut ImVec2, lhs: ImVec2, rhs: ImVec2);
}
extern "C" {
    pub fn igImMax(pOut: *mut ImVec2, lhs: ImVec2, rhs: ImVec2);
}
extern "C" {
    pub fn igImClamp(pOut: *mut ImVec2, v: ImVec2, mn: ImVec2, mx: ImVec2);
}
extern "C" {
    pub fn igImLerp_Vec2Float(pOut: *mut ImVec2, a: ImVec2, b: ImVec2, t: f32);
}
extern "C" {
    pub fn igImLerp_Vec2Vec2(pOut: *mut ImVec2, a: ImVec2, b: ImVec2, t: ImVec2);
}
extern "C" {
    pub fn igImLerp_Vec4(pOut: *mut ImVec4, a: ImVec4, b: ImVec4, t: f32);
}
extern "C" {
    pub fn igImSaturate(f: f32) -> f32;
}
extern "C" {
    pub fn igImLengthSqr_Vec2(lhs: ImVec2) -> f32;
}
extern "C" {
    pub fn igImLengthSqr_Vec4(lhs: ImVec4) -> f32;
}
extern "C" {
    pub fn igImInvLength(lhs: ImVec2, fail_value: f32) -> f32;
}
extern "C" {
    pub fn igImFloor_Float(f: f32) -> f32;
}
extern "C" {
    pub fn igImFloorSigned_Float(f: f32) -> f32;
}
extern "C" {
    pub fn igImFloor_Vec2(pOut: *mut ImVec2, v: ImVec2);
}
extern "C" {
    pub fn igImFloorSigned_Vec2(pOut: *mut ImVec2, v: ImVec2);
}
extern "C" {
    pub fn igImModPositive(
        a: ::std::os::raw::c_int,
        b: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igImDot(a: ImVec2, b: ImVec2) -> f32;
}
extern "C" {
    pub fn igImRotate(pOut: *mut ImVec2, v: ImVec2, cos_a: f32, sin_a: f32);
}
extern "C" {
    pub fn igImLinearSweep(current: f32, target: f32, speed: f32) -> f32;
}
extern "C" {
    pub fn igImMul(pOut: *mut ImVec2, lhs: ImVec2, rhs: ImVec2);
}
extern "C" {
    pub fn igImIsFloatAboveGuaranteedIntegerPrecision(f: f32) -> bool;
}
extern "C" {
    pub fn igImBezierCubicCalc(
        pOut: *mut ImVec2,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        p4: ImVec2,
        t: f32,
    );
}
extern "C" {
    pub fn igImBezierCubicClosestPoint(
        pOut: *mut ImVec2,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        p4: ImVec2,
        p: ImVec2,
        num_segments: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn igImBezierCubicClosestPointCasteljau(
        pOut: *mut ImVec2,
        p1: ImVec2,
        p2: ImVec2,
        p3: ImVec2,
        p4: ImVec2,
        p: ImVec2,
        tess_tol: f32,
    );
}
extern "C" {
    pub fn igImBezierQuadraticCalc(pOut: *mut ImVec2, p1: ImVec2, p2: ImVec2, p3: ImVec2, t: f32);
}
extern "C" {
    pub fn igImLineClosestPoint(pOut: *mut ImVec2, a: ImVec2, b: ImVec2, p: ImVec2);
}
extern "C" {
    pub fn igImTriangleContainsPoint(a: ImVec2, b: ImVec2, c: ImVec2, p: ImVec2) -> bool;
}
extern "C" {
    pub fn igImTriangleClosestPoint(pOut: *mut ImVec2, a: ImVec2, b: ImVec2, c: ImVec2, p: ImVec2);
}
extern "C" {
    pub fn igImTriangleBarycentricCoords(
        a: ImVec2,
        b: ImVec2,
        c: ImVec2,
        p: ImVec2,
        out_u: *mut f32,
        out_v: *mut f32,
        out_w: *mut f32,
    );
}
extern "C" {
    pub fn igImTriangleArea(a: ImVec2, b: ImVec2, c: ImVec2) -> f32;
}
extern "C" {
    pub fn igImGetDirQuadrantFromDelta(dx: f32, dy: f32) -> ImGuiDir;
}
extern "C" {
    pub fn ImVec1_ImVec1_Nil() -> *mut ImVec1;
}
extern "C" {
    pub fn ImVec1_destroy(self_: *mut ImVec1);
}
extern "C" {
    pub fn ImVec1_ImVec1_Float(_x: f32) -> *mut ImVec1;
}
extern "C" {
    pub fn ImVec2ih_ImVec2ih_Nil() -> *mut ImVec2ih;
}
extern "C" {
    pub fn ImVec2ih_destroy(self_: *mut ImVec2ih);
}
extern "C" {
    pub fn ImVec2ih_ImVec2ih_short(
        _x: ::std::os::raw::c_short,
        _y: ::std::os::raw::c_short,
    ) -> *mut ImVec2ih;
}
extern "C" {
    pub fn ImVec2ih_ImVec2ih_Vec2(rhs: ImVec2) -> *mut ImVec2ih;
}
extern "C" {
    pub fn ImRect_ImRect_Nil() -> *mut ImRect;
}
extern "C" {
    pub fn ImRect_destroy(self_: *mut ImRect);
}
extern "C" {
    pub fn ImRect_ImRect_Vec2(min: ImVec2, max: ImVec2) -> *mut ImRect;
}
extern "C" {
    pub fn ImRect_ImRect_Vec4(v: ImVec4) -> *mut ImRect;
}
extern "C" {
    pub fn ImRect_ImRect_Float(x1: f32, y1: f32, x2: f32, y2: f32) -> *mut ImRect;
}
extern "C" {
    pub fn ImRect_GetCenter(pOut: *mut ImVec2, self_: *mut ImRect);
}
extern "C" {
    pub fn ImRect_GetSize(pOut: *mut ImVec2, self_: *mut ImRect);
}
extern "C" {
    pub fn ImRect_GetWidth(self_: *mut ImRect) -> f32;
}
extern "C" {
    pub fn ImRect_GetHeight(self_: *mut ImRect) -> f32;
}
extern "C" {
    pub fn ImRect_GetArea(self_: *mut ImRect) -> f32;
}
extern "C" {
    pub fn ImRect_GetTL(pOut: *mut ImVec2, self_: *mut ImRect);
}
extern "C" {
    pub fn ImRect_GetTR(pOut: *mut ImVec2, self_: *mut ImRect);
}
extern "C" {
    pub fn ImRect_GetBL(pOut: *mut ImVec2, self_: *mut ImRect);
}
extern "C" {
    pub fn ImRect_GetBR(pOut: *mut ImVec2, self_: *mut ImRect);
}
extern "C" {
    pub fn ImRect_Contains_Vec2(self_: *mut ImRect, p: ImVec2) -> bool;
}
extern "C" {
    pub fn ImRect_Contains_Rect(self_: *mut ImRect, r: ImRect) -> bool;
}
extern "C" {
    pub fn ImRect_Overlaps(self_: *mut ImRect, r: ImRect) -> bool;
}
extern "C" {
    pub fn ImRect_Add_Vec2(self_: *mut ImRect, p: ImVec2);
}
extern "C" {
    pub fn ImRect_Add_Rect(self_: *mut ImRect, r: ImRect);
}
extern "C" {
    pub fn ImRect_Expand_Float(self_: *mut ImRect, amount: f32);
}
extern "C" {
    pub fn ImRect_Expand_Vec2(self_: *mut ImRect, amount: ImVec2);
}
extern "C" {
    pub fn ImRect_Translate(self_: *mut ImRect, d: ImVec2);
}
extern "C" {
    pub fn ImRect_TranslateX(self_: *mut ImRect, dx: f32);
}
extern "C" {
    pub fn ImRect_TranslateY(self_: *mut ImRect, dy: f32);
}
extern "C" {
    pub fn ImRect_ClipWith(self_: *mut ImRect, r: ImRect);
}
extern "C" {
    pub fn ImRect_ClipWithFull(self_: *mut ImRect, r: ImRect);
}
extern "C" {
    pub fn ImRect_Floor(self_: *mut ImRect);
}
extern "C" {
    pub fn ImRect_IsInverted(self_: *mut ImRect) -> bool;
}
extern "C" {
    pub fn ImRect_ToVec4(pOut: *mut ImVec4, self_: *mut ImRect);
}
extern "C" {
    pub fn igImBitArrayTestBit(arr: *const ImU32, n: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn igImBitArrayClearBit(arr: *mut ImU32, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn igImBitArraySetBit(arr: *mut ImU32, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn igImBitArraySetBitRange(
        arr: *mut ImU32,
        n: ::std::os::raw::c_int,
        n2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImBitVector_Create(self_: *mut ImBitVector, sz: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ImBitVector_Clear(self_: *mut ImBitVector);
}
extern "C" {
    pub fn ImBitVector_TestBit(self_: *mut ImBitVector, n: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn ImBitVector_SetBit(self_: *mut ImBitVector, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ImBitVector_ClearBit(self_: *mut ImBitVector, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ImDrawListSharedData_ImDrawListSharedData() -> *mut ImDrawListSharedData;
}
extern "C" {
    pub fn ImDrawListSharedData_destroy(self_: *mut ImDrawListSharedData);
}
extern "C" {
    pub fn ImDrawListSharedData_SetCircleTessellationMaxError(
        self_: *mut ImDrawListSharedData,
        max_error: f32,
    );
}
extern "C" {
    pub fn ImDrawDataBuilder_Clear(self_: *mut ImDrawDataBuilder);
}
extern "C" {
    pub fn ImDrawDataBuilder_ClearFreeMemory(self_: *mut ImDrawDataBuilder);
}
extern "C" {
    pub fn ImDrawDataBuilder_GetDrawListCount(
        self_: *mut ImDrawDataBuilder,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImDrawDataBuilder_FlattenIntoSingleLayer(self_: *mut ImDrawDataBuilder);
}
extern "C" {
    pub fn ImGuiStyleMod_ImGuiStyleMod_Int(
        idx: ImGuiStyleVar,
        v: ::std::os::raw::c_int,
    ) -> *mut ImGuiStyleMod;
}
extern "C" {
    pub fn ImGuiStyleMod_destroy(self_: *mut ImGuiStyleMod);
}
extern "C" {
    pub fn ImGuiStyleMod_ImGuiStyleMod_Float(idx: ImGuiStyleVar, v: f32) -> *mut ImGuiStyleMod;
}
extern "C" {
    pub fn ImGuiStyleMod_ImGuiStyleMod_Vec2(idx: ImGuiStyleVar, v: ImVec2) -> *mut ImGuiStyleMod;
}
extern "C" {
    pub fn ImGuiComboPreviewData_ImGuiComboPreviewData() -> *mut ImGuiComboPreviewData;
}
extern "C" {
    pub fn ImGuiComboPreviewData_destroy(self_: *mut ImGuiComboPreviewData);
}
extern "C" {
    pub fn ImGuiMenuColumns_ImGuiMenuColumns() -> *mut ImGuiMenuColumns;
}
extern "C" {
    pub fn ImGuiMenuColumns_destroy(self_: *mut ImGuiMenuColumns);
}
extern "C" {
    pub fn ImGuiMenuColumns_Update(
        self_: *mut ImGuiMenuColumns,
        spacing: f32,
        window_reappearing: bool,
    );
}
extern "C" {
    pub fn ImGuiMenuColumns_DeclColumns(
        self_: *mut ImGuiMenuColumns,
        w_icon: f32,
        w_label: f32,
        w_shortcut: f32,
        w_mark: f32,
    ) -> f32;
}
extern "C" {
    pub fn ImGuiMenuColumns_CalcNextTotalWidth(self_: *mut ImGuiMenuColumns, update_offsets: bool);
}
extern "C" {
    pub fn ImGuiInputTextState_ImGuiInputTextState() -> *mut ImGuiInputTextState;
}
extern "C" {
    pub fn ImGuiInputTextState_destroy(self_: *mut ImGuiInputTextState);
}
extern "C" {
    pub fn ImGuiInputTextState_ClearText(self_: *mut ImGuiInputTextState);
}
extern "C" {
    pub fn ImGuiInputTextState_ClearFreeMemory(self_: *mut ImGuiInputTextState);
}
extern "C" {
    pub fn ImGuiInputTextState_GetUndoAvailCount(
        self_: *mut ImGuiInputTextState,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImGuiInputTextState_GetRedoAvailCount(
        self_: *mut ImGuiInputTextState,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImGuiInputTextState_OnKeyPressed(
        self_: *mut ImGuiInputTextState,
        key: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImGuiInputTextState_CursorAnimReset(self_: *mut ImGuiInputTextState);
}
extern "C" {
    pub fn ImGuiInputTextState_CursorClamp(self_: *mut ImGuiInputTextState);
}
extern "C" {
    pub fn ImGuiInputTextState_HasSelection(self_: *mut ImGuiInputTextState) -> bool;
}
extern "C" {
    pub fn ImGuiInputTextState_ClearSelection(self_: *mut ImGuiInputTextState);
}
extern "C" {
    pub fn ImGuiInputTextState_GetCursorPos(
        self_: *mut ImGuiInputTextState,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImGuiInputTextState_GetSelectionStart(
        self_: *mut ImGuiInputTextState,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImGuiInputTextState_GetSelectionEnd(
        self_: *mut ImGuiInputTextState,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImGuiInputTextState_SelectAll(self_: *mut ImGuiInputTextState);
}
extern "C" {
    pub fn ImGuiPopupData_ImGuiPopupData() -> *mut ImGuiPopupData;
}
extern "C" {
    pub fn ImGuiPopupData_destroy(self_: *mut ImGuiPopupData);
}
extern "C" {
    pub fn ImGuiNextWindowData_ImGuiNextWindowData() -> *mut ImGuiNextWindowData;
}
extern "C" {
    pub fn ImGuiNextWindowData_destroy(self_: *mut ImGuiNextWindowData);
}
extern "C" {
    pub fn ImGuiNextWindowData_ClearFlags(self_: *mut ImGuiNextWindowData);
}
extern "C" {
    pub fn ImGuiNextItemData_ImGuiNextItemData() -> *mut ImGuiNextItemData;
}
extern "C" {
    pub fn ImGuiNextItemData_destroy(self_: *mut ImGuiNextItemData);
}
extern "C" {
    pub fn ImGuiNextItemData_ClearFlags(self_: *mut ImGuiNextItemData);
}
extern "C" {
    pub fn ImGuiLastItemData_ImGuiLastItemData() -> *mut ImGuiLastItemData;
}
extern "C" {
    pub fn ImGuiLastItemData_destroy(self_: *mut ImGuiLastItemData);
}
extern "C" {
    pub fn ImGuiStackSizes_ImGuiStackSizes() -> *mut ImGuiStackSizes;
}
extern "C" {
    pub fn ImGuiStackSizes_destroy(self_: *mut ImGuiStackSizes);
}
extern "C" {
    pub fn ImGuiStackSizes_SetToCurrentState(self_: *mut ImGuiStackSizes);
}
extern "C" {
    pub fn ImGuiStackSizes_CompareWithCurrentState(self_: *mut ImGuiStackSizes);
}
extern "C" {
    pub fn ImGuiPtrOrIndex_ImGuiPtrOrIndex_Ptr(
        ptr: *mut ::std::os::raw::c_void,
    ) -> *mut ImGuiPtrOrIndex;
}
extern "C" {
    pub fn ImGuiPtrOrIndex_destroy(self_: *mut ImGuiPtrOrIndex);
}
extern "C" {
    pub fn ImGuiPtrOrIndex_ImGuiPtrOrIndex_Int(
        index: ::std::os::raw::c_int,
    ) -> *mut ImGuiPtrOrIndex;
}
extern "C" {
    pub fn ImGuiInputEvent_ImGuiInputEvent() -> *mut ImGuiInputEvent;
}
extern "C" {
    pub fn ImGuiInputEvent_destroy(self_: *mut ImGuiInputEvent);
}
extern "C" {
    pub fn ImGuiListClipperRange_FromIndices(
        min: ::std::os::raw::c_int,
        max: ::std::os::raw::c_int,
    ) -> ImGuiListClipperRange;
}
extern "C" {
    pub fn ImGuiListClipperRange_FromPositions(
        y1: f32,
        y2: f32,
        off_min: ::std::os::raw::c_int,
        off_max: ::std::os::raw::c_int,
    ) -> ImGuiListClipperRange;
}
extern "C" {
    pub fn ImGuiListClipperData_ImGuiListClipperData() -> *mut ImGuiListClipperData;
}
extern "C" {
    pub fn ImGuiListClipperData_destroy(self_: *mut ImGuiListClipperData);
}
extern "C" {
    pub fn ImGuiListClipperData_Reset(
        self_: *mut ImGuiListClipperData,
        clipper: *mut ImGuiListClipper,
    );
}
extern "C" {
    pub fn ImGuiNavItemData_ImGuiNavItemData() -> *mut ImGuiNavItemData;
}
extern "C" {
    pub fn ImGuiNavItemData_destroy(self_: *mut ImGuiNavItemData);
}
extern "C" {
    pub fn ImGuiNavItemData_Clear(self_: *mut ImGuiNavItemData);
}
extern "C" {
    pub fn ImGuiOldColumnData_ImGuiOldColumnData() -> *mut ImGuiOldColumnData;
}
extern "C" {
    pub fn ImGuiOldColumnData_destroy(self_: *mut ImGuiOldColumnData);
}
extern "C" {
    pub fn ImGuiOldColumns_ImGuiOldColumns() -> *mut ImGuiOldColumns;
}
extern "C" {
    pub fn ImGuiOldColumns_destroy(self_: *mut ImGuiOldColumns);
}
extern "C" {
    pub fn ImGuiDockNode_ImGuiDockNode(id: ImGuiID) -> *mut ImGuiDockNode;
}
extern "C" {
    pub fn ImGuiDockNode_destroy(self_: *mut ImGuiDockNode);
}
extern "C" {
    pub fn ImGuiDockNode_IsRootNode(self_: *mut ImGuiDockNode) -> bool;
}
extern "C" {
    pub fn ImGuiDockNode_IsDockSpace(self_: *mut ImGuiDockNode) -> bool;
}
extern "C" {
    pub fn ImGuiDockNode_IsFloatingNode(self_: *mut ImGuiDockNode) -> bool;
}
extern "C" {
    pub fn ImGuiDockNode_IsCentralNode(self_: *mut ImGuiDockNode) -> bool;
}
extern "C" {
    pub fn ImGuiDockNode_IsHiddenTabBar(self_: *mut ImGuiDockNode) -> bool;
}
extern "C" {
    pub fn ImGuiDockNode_IsNoTabBar(self_: *mut ImGuiDockNode) -> bool;
}
extern "C" {
    pub fn ImGuiDockNode_IsSplitNode(self_: *mut ImGuiDockNode) -> bool;
}
extern "C" {
    pub fn ImGuiDockNode_IsLeafNode(self_: *mut ImGuiDockNode) -> bool;
}
extern "C" {
    pub fn ImGuiDockNode_IsEmpty(self_: *mut ImGuiDockNode) -> bool;
}
extern "C" {
    pub fn ImGuiDockNode_Rect(pOut: *mut ImRect, self_: *mut ImGuiDockNode);
}
extern "C" {
    pub fn ImGuiDockNode_SetLocalFlags(self_: *mut ImGuiDockNode, flags: ImGuiDockNodeFlags);
}
extern "C" {
    pub fn ImGuiDockNode_UpdateMergedFlags(self_: *mut ImGuiDockNode);
}
extern "C" {
    pub fn ImGuiDockContext_ImGuiDockContext() -> *mut ImGuiDockContext;
}
extern "C" {
    pub fn ImGuiDockContext_destroy(self_: *mut ImGuiDockContext);
}
extern "C" {
    pub fn ImGuiViewportP_ImGuiViewportP() -> *mut ImGuiViewportP;
}
extern "C" {
    pub fn ImGuiViewportP_destroy(self_: *mut ImGuiViewportP);
}
extern "C" {
    pub fn ImGuiViewportP_ClearRequestFlags(self_: *mut ImGuiViewportP);
}
extern "C" {
    pub fn ImGuiViewportP_CalcWorkRectPos(
        pOut: *mut ImVec2,
        self_: *mut ImGuiViewportP,
        off_min: ImVec2,
    );
}
extern "C" {
    pub fn ImGuiViewportP_CalcWorkRectSize(
        pOut: *mut ImVec2,
        self_: *mut ImGuiViewportP,
        off_min: ImVec2,
        off_max: ImVec2,
    );
}
extern "C" {
    pub fn ImGuiViewportP_UpdateWorkRect(self_: *mut ImGuiViewportP);
}
extern "C" {
    pub fn ImGuiViewportP_GetMainRect(pOut: *mut ImRect, self_: *mut ImGuiViewportP);
}
extern "C" {
    pub fn ImGuiViewportP_GetWorkRect(pOut: *mut ImRect, self_: *mut ImGuiViewportP);
}
extern "C" {
    pub fn ImGuiViewportP_GetBuildWorkRect(pOut: *mut ImRect, self_: *mut ImGuiViewportP);
}
extern "C" {
    pub fn ImGuiWindowSettings_ImGuiWindowSettings() -> *mut ImGuiWindowSettings;
}
extern "C" {
    pub fn ImGuiWindowSettings_destroy(self_: *mut ImGuiWindowSettings);
}
extern "C" {
    pub fn ImGuiWindowSettings_GetName(
        self_: *mut ImGuiWindowSettings,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ImGuiSettingsHandler_ImGuiSettingsHandler() -> *mut ImGuiSettingsHandler;
}
extern "C" {
    pub fn ImGuiSettingsHandler_destroy(self_: *mut ImGuiSettingsHandler);
}
extern "C" {
    pub fn ImGuiMetricsConfig_ImGuiMetricsConfig() -> *mut ImGuiMetricsConfig;
}
extern "C" {
    pub fn ImGuiMetricsConfig_destroy(self_: *mut ImGuiMetricsConfig);
}
extern "C" {
    pub fn ImGuiStackLevelInfo_ImGuiStackLevelInfo() -> *mut ImGuiStackLevelInfo;
}
extern "C" {
    pub fn ImGuiStackLevelInfo_destroy(self_: *mut ImGuiStackLevelInfo);
}
extern "C" {
    pub fn ImGuiStackTool_ImGuiStackTool() -> *mut ImGuiStackTool;
}
extern "C" {
    pub fn ImGuiStackTool_destroy(self_: *mut ImGuiStackTool);
}
extern "C" {
    pub fn ImGuiContextHook_ImGuiContextHook() -> *mut ImGuiContextHook;
}
extern "C" {
    pub fn ImGuiContextHook_destroy(self_: *mut ImGuiContextHook);
}
extern "C" {
    pub fn ImGuiContext_ImGuiContext(shared_font_atlas: *mut ImFontAtlas) -> *mut ImGuiContext;
}
extern "C" {
    pub fn ImGuiContext_destroy(self_: *mut ImGuiContext);
}
extern "C" {
    pub fn ImGuiWindow_ImGuiWindow(
        context: *mut ImGuiContext,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ImGuiWindow;
}
extern "C" {
    pub fn ImGuiWindow_destroy(self_: *mut ImGuiWindow);
}
extern "C" {
    pub fn ImGuiWindow_GetID_Str(
        self_: *mut ImGuiWindow,
        str_: *const ::std::os::raw::c_char,
        str_end: *const ::std::os::raw::c_char,
    ) -> ImGuiID;
}
extern "C" {
    pub fn ImGuiWindow_GetID_Ptr(
        self_: *mut ImGuiWindow,
        ptr: *const ::std::os::raw::c_void,
    ) -> ImGuiID;
}
extern "C" {
    pub fn ImGuiWindow_GetID_Int(self_: *mut ImGuiWindow, n: ::std::os::raw::c_int) -> ImGuiID;
}
extern "C" {
    pub fn ImGuiWindow_GetIDFromRectangle(self_: *mut ImGuiWindow, r_abs: ImRect) -> ImGuiID;
}
extern "C" {
    pub fn ImGuiWindow_Rect(pOut: *mut ImRect, self_: *mut ImGuiWindow);
}
extern "C" {
    pub fn ImGuiWindow_CalcFontSize(self_: *mut ImGuiWindow) -> f32;
}
extern "C" {
    pub fn ImGuiWindow_TitleBarHeight(self_: *mut ImGuiWindow) -> f32;
}
extern "C" {
    pub fn ImGuiWindow_TitleBarRect(pOut: *mut ImRect, self_: *mut ImGuiWindow);
}
extern "C" {
    pub fn ImGuiWindow_MenuBarHeight(self_: *mut ImGuiWindow) -> f32;
}
extern "C" {
    pub fn ImGuiWindow_MenuBarRect(pOut: *mut ImRect, self_: *mut ImGuiWindow);
}
extern "C" {
    pub fn ImGuiTabItem_ImGuiTabItem() -> *mut ImGuiTabItem;
}
extern "C" {
    pub fn ImGuiTabItem_destroy(self_: *mut ImGuiTabItem);
}
extern "C" {
    pub fn ImGuiTabBar_ImGuiTabBar() -> *mut ImGuiTabBar;
}
extern "C" {
    pub fn ImGuiTabBar_destroy(self_: *mut ImGuiTabBar);
}
extern "C" {
    pub fn ImGuiTabBar_GetTabOrder(
        self_: *mut ImGuiTabBar,
        tab: *const ImGuiTabItem,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImGuiTabBar_GetTabName(
        self_: *mut ImGuiTabBar,
        tab: *const ImGuiTabItem,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ImGuiTableColumn_ImGuiTableColumn() -> *mut ImGuiTableColumn;
}
extern "C" {
    pub fn ImGuiTableColumn_destroy(self_: *mut ImGuiTableColumn);
}
extern "C" {
    pub fn ImGuiTableInstanceData_ImGuiTableInstanceData() -> *mut ImGuiTableInstanceData;
}
extern "C" {
    pub fn ImGuiTableInstanceData_destroy(self_: *mut ImGuiTableInstanceData);
}
extern "C" {
    pub fn ImGuiTable_ImGuiTable() -> *mut ImGuiTable;
}
extern "C" {
    pub fn ImGuiTable_destroy(self_: *mut ImGuiTable);
}
extern "C" {
    pub fn ImGuiTableTempData_ImGuiTableTempData() -> *mut ImGuiTableTempData;
}
extern "C" {
    pub fn ImGuiTableTempData_destroy(self_: *mut ImGuiTableTempData);
}
extern "C" {
    pub fn ImGuiTableColumnSettings_ImGuiTableColumnSettings() -> *mut ImGuiTableColumnSettings;
}
extern "C" {
    pub fn ImGuiTableColumnSettings_destroy(self_: *mut ImGuiTableColumnSettings);
}
extern "C" {
    pub fn ImGuiTableSettings_ImGuiTableSettings() -> *mut ImGuiTableSettings;
}
extern "C" {
    pub fn ImGuiTableSettings_destroy(self_: *mut ImGuiTableSettings);
}
extern "C" {
    pub fn ImGuiTableSettings_GetColumnSettings(
        self_: *mut ImGuiTableSettings,
    ) -> *mut ImGuiTableColumnSettings;
}
extern "C" {
    pub fn igGetCurrentWindowRead() -> *mut ImGuiWindow;
}
extern "C" {
    pub fn igGetCurrentWindow() -> *mut ImGuiWindow;
}
extern "C" {
    pub fn igFindWindowByID(id: ImGuiID) -> *mut ImGuiWindow;
}
extern "C" {
    pub fn igFindWindowByName(name: *const ::std::os::raw::c_char) -> *mut ImGuiWindow;
}
extern "C" {
    pub fn igUpdateWindowParentAndRootLinks(
        window: *mut ImGuiWindow,
        flags: ImGuiWindowFlags,
        parent_window: *mut ImGuiWindow,
    );
}
extern "C" {
    pub fn igCalcWindowNextAutoFitSize(pOut: *mut ImVec2, window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igIsWindowChildOf(
        window: *mut ImGuiWindow,
        potential_parent: *mut ImGuiWindow,
        popup_hierarchy: bool,
        dock_hierarchy: bool,
    ) -> bool;
}
extern "C" {
    pub fn igIsWindowWithinBeginStackOf(
        window: *mut ImGuiWindow,
        potential_parent: *mut ImGuiWindow,
    ) -> bool;
}
extern "C" {
    pub fn igIsWindowAbove(
        potential_above: *mut ImGuiWindow,
        potential_below: *mut ImGuiWindow,
    ) -> bool;
}
extern "C" {
    pub fn igIsWindowNavFocusable(window: *mut ImGuiWindow) -> bool;
}
extern "C" {
    pub fn igSetWindowPos_WindowPtr(window: *mut ImGuiWindow, pos: ImVec2, cond: ImGuiCond);
}
extern "C" {
    pub fn igSetWindowSize_WindowPtr(window: *mut ImGuiWindow, size: ImVec2, cond: ImGuiCond);
}
extern "C" {
    pub fn igSetWindowCollapsed_WindowPtr(
        window: *mut ImGuiWindow,
        collapsed: bool,
        cond: ImGuiCond,
    );
}
extern "C" {
    pub fn igSetWindowHitTestHole(window: *mut ImGuiWindow, pos: ImVec2, size: ImVec2);
}
extern "C" {
    pub fn igWindowRectAbsToRel(pOut: *mut ImRect, window: *mut ImGuiWindow, r: ImRect);
}
extern "C" {
    pub fn igWindowRectRelToAbs(pOut: *mut ImRect, window: *mut ImGuiWindow, r: ImRect);
}
extern "C" {
    pub fn igFocusWindow(window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igFocusTopMostWindowUnderOne(
        under_this_window: *mut ImGuiWindow,
        ignore_window: *mut ImGuiWindow,
    );
}
extern "C" {
    pub fn igBringWindowToFocusFront(window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igBringWindowToDisplayFront(window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igBringWindowToDisplayBack(window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igBringWindowToDisplayBehind(window: *mut ImGuiWindow, above_window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igFindWindowDisplayIndex(window: *mut ImGuiWindow) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igFindBottomMostVisibleWindowWithinBeginStack(
        window: *mut ImGuiWindow,
    ) -> *mut ImGuiWindow;
}
extern "C" {
    pub fn igSetCurrentFont(font: *mut ImFont);
}
extern "C" {
    pub fn igGetDefaultFont() -> *mut ImFont;
}
extern "C" {
    pub fn igGetForegroundDrawList_WindowPtr(window: *mut ImGuiWindow) -> *mut ImDrawList;
}
extern "C" {
    pub fn igInitialize();
}
extern "C" {
    pub fn igShutdown();
}
extern "C" {
    pub fn igUpdateInputEvents(trickle_fast_inputs: bool);
}
extern "C" {
    pub fn igUpdateHoveredWindowAndCaptureFlags();
}
extern "C" {
    pub fn igStartMouseMovingWindow(window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igStartMouseMovingWindowOrNode(
        window: *mut ImGuiWindow,
        node: *mut ImGuiDockNode,
        undock_floating_node: bool,
    );
}
extern "C" {
    pub fn igUpdateMouseMovingWindowNewFrame();
}
extern "C" {
    pub fn igUpdateMouseMovingWindowEndFrame();
}
extern "C" {
    pub fn igAddContextHook(context: *mut ImGuiContext, hook: *const ImGuiContextHook) -> ImGuiID;
}
extern "C" {
    pub fn igRemoveContextHook(context: *mut ImGuiContext, hook_to_remove: ImGuiID);
}
extern "C" {
    pub fn igCallContextHooks(context: *mut ImGuiContext, type_: ImGuiContextHookType);
}
extern "C" {
    pub fn igTranslateWindowsInViewport(
        viewport: *mut ImGuiViewportP,
        old_pos: ImVec2,
        new_pos: ImVec2,
    );
}
extern "C" {
    pub fn igScaleWindowsInViewport(viewport: *mut ImGuiViewportP, scale: f32);
}
extern "C" {
    pub fn igDestroyPlatformWindow(viewport: *mut ImGuiViewportP);
}
extern "C" {
    pub fn igSetWindowViewport(window: *mut ImGuiWindow, viewport: *mut ImGuiViewportP);
}
extern "C" {
    pub fn igSetCurrentViewport(window: *mut ImGuiWindow, viewport: *mut ImGuiViewportP);
}
extern "C" {
    pub fn igGetViewportPlatformMonitor(
        viewport: *mut ImGuiViewport,
    ) -> *const ImGuiPlatformMonitor;
}
extern "C" {
    pub fn igFindHoveredViewportFromPlatformWindowStack(
        mouse_platform_pos: ImVec2,
    ) -> *mut ImGuiViewportP;
}
extern "C" {
    pub fn igMarkIniSettingsDirty_Nil();
}
extern "C" {
    pub fn igMarkIniSettingsDirty_WindowPtr(window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igClearIniSettings();
}
extern "C" {
    pub fn igCreateNewWindowSettings(
        name: *const ::std::os::raw::c_char,
    ) -> *mut ImGuiWindowSettings;
}
extern "C" {
    pub fn igFindWindowSettings(id: ImGuiID) -> *mut ImGuiWindowSettings;
}
extern "C" {
    pub fn igFindOrCreateWindowSettings(
        name: *const ::std::os::raw::c_char,
    ) -> *mut ImGuiWindowSettings;
}
extern "C" {
    pub fn igAddSettingsHandler(handler: *const ImGuiSettingsHandler);
}
extern "C" {
    pub fn igRemoveSettingsHandler(type_name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn igFindSettingsHandler(
        type_name: *const ::std::os::raw::c_char,
    ) -> *mut ImGuiSettingsHandler;
}
extern "C" {
    pub fn igSetNextWindowScroll(scroll: ImVec2);
}
extern "C" {
    pub fn igSetScrollX_WindowPtr(window: *mut ImGuiWindow, scroll_x: f32);
}
extern "C" {
    pub fn igSetScrollY_WindowPtr(window: *mut ImGuiWindow, scroll_y: f32);
}
extern "C" {
    pub fn igSetScrollFromPosX_WindowPtr(
        window: *mut ImGuiWindow,
        local_x: f32,
        center_x_ratio: f32,
    );
}
extern "C" {
    pub fn igSetScrollFromPosY_WindowPtr(
        window: *mut ImGuiWindow,
        local_y: f32,
        center_y_ratio: f32,
    );
}
extern "C" {
    pub fn igScrollToItem(flags: ImGuiScrollFlags);
}
extern "C" {
    pub fn igScrollToRect(window: *mut ImGuiWindow, rect: ImRect, flags: ImGuiScrollFlags);
}
extern "C" {
    pub fn igScrollToRectEx(
        pOut: *mut ImVec2,
        window: *mut ImGuiWindow,
        rect: ImRect,
        flags: ImGuiScrollFlags,
    );
}
extern "C" {
    pub fn igScrollToBringRectIntoView(window: *mut ImGuiWindow, rect: ImRect);
}
extern "C" {
    pub fn igGetItemID() -> ImGuiID;
}
extern "C" {
    pub fn igGetItemStatusFlags() -> ImGuiItemStatusFlags;
}
extern "C" {
    pub fn igGetItemFlags() -> ImGuiItemFlags;
}
extern "C" {
    pub fn igGetActiveID() -> ImGuiID;
}
extern "C" {
    pub fn igGetFocusID() -> ImGuiID;
}
extern "C" {
    pub fn igSetActiveID(id: ImGuiID, window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igSetFocusID(id: ImGuiID, window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igClearActiveID();
}
extern "C" {
    pub fn igGetHoveredID() -> ImGuiID;
}
extern "C" {
    pub fn igSetHoveredID(id: ImGuiID);
}
extern "C" {
    pub fn igKeepAliveID(id: ImGuiID);
}
extern "C" {
    pub fn igMarkItemEdited(id: ImGuiID);
}
extern "C" {
    pub fn igPushOverrideID(id: ImGuiID);
}
extern "C" {
    pub fn igGetIDWithSeed(
        str_id_begin: *const ::std::os::raw::c_char,
        str_id_end: *const ::std::os::raw::c_char,
        seed: ImGuiID,
    ) -> ImGuiID;
}
extern "C" {
    pub fn igItemSize_Vec2(size: ImVec2, text_baseline_y: f32);
}
extern "C" {
    pub fn igItemSize_Rect(bb: ImRect, text_baseline_y: f32);
}
extern "C" {
    pub fn igItemAdd(
        bb: ImRect,
        id: ImGuiID,
        nav_bb: *const ImRect,
        extra_flags: ImGuiItemFlags,
    ) -> bool;
}
extern "C" {
    pub fn igItemHoverable(bb: ImRect, id: ImGuiID) -> bool;
}
extern "C" {
    pub fn igIsClippedEx(bb: ImRect, id: ImGuiID) -> bool;
}
extern "C" {
    pub fn igSetLastItemData(
        item_id: ImGuiID,
        in_flags: ImGuiItemFlags,
        status_flags: ImGuiItemStatusFlags,
        item_rect: ImRect,
    );
}
extern "C" {
    pub fn igCalcItemSize(pOut: *mut ImVec2, size: ImVec2, default_w: f32, default_h: f32);
}
extern "C" {
    pub fn igCalcWrapWidthForPos(pos: ImVec2, wrap_pos_x: f32) -> f32;
}
extern "C" {
    pub fn igPushMultiItemsWidths(components: ::std::os::raw::c_int, width_full: f32);
}
extern "C" {
    pub fn igIsItemToggledSelection() -> bool;
}
extern "C" {
    pub fn igGetContentRegionMaxAbs(pOut: *mut ImVec2);
}
extern "C" {
    pub fn igShrinkWidths(
        items: *mut ImGuiShrinkWidthItem,
        count: ::std::os::raw::c_int,
        width_excess: f32,
    );
}
extern "C" {
    pub fn igPushItemFlag(option: ImGuiItemFlags, enabled: bool);
}
extern "C" {
    pub fn igPopItemFlag();
}
extern "C" {
    pub fn igLogBegin(type_: ImGuiLogType, auto_open_depth: ::std::os::raw::c_int);
}
extern "C" {
    pub fn igLogToBuffer(auto_open_depth: ::std::os::raw::c_int);
}
extern "C" {
    pub fn igLogRenderedText(
        ref_pos: *const ImVec2,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn igLogSetNextTextDecoration(
        prefix: *const ::std::os::raw::c_char,
        suffix: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn igBeginChildEx(
        name: *const ::std::os::raw::c_char,
        id: ImGuiID,
        size_arg: ImVec2,
        border: bool,
        flags: ImGuiWindowFlags,
    ) -> bool;
}
extern "C" {
    pub fn igOpenPopupEx(id: ImGuiID, popup_flags: ImGuiPopupFlags);
}
extern "C" {
    pub fn igClosePopupToLevel(
        remaining: ::std::os::raw::c_int,
        restore_focus_to_window_under_popup: bool,
    );
}
extern "C" {
    pub fn igClosePopupsOverWindow(
        ref_window: *mut ImGuiWindow,
        restore_focus_to_window_under_popup: bool,
    );
}
extern "C" {
    pub fn igClosePopupsExceptModals();
}
extern "C" {
    pub fn igIsPopupOpen_ID(id: ImGuiID, popup_flags: ImGuiPopupFlags) -> bool;
}
extern "C" {
    pub fn igBeginPopupEx(id: ImGuiID, extra_flags: ImGuiWindowFlags) -> bool;
}
extern "C" {
    pub fn igBeginTooltipEx(tooltip_flags: ImGuiTooltipFlags, extra_window_flags: ImGuiWindowFlags);
}
extern "C" {
    pub fn igGetPopupAllowedExtentRect(pOut: *mut ImRect, window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igGetTopMostPopupModal() -> *mut ImGuiWindow;
}
extern "C" {
    pub fn igGetTopMostAndVisiblePopupModal() -> *mut ImGuiWindow;
}
extern "C" {
    pub fn igFindBestWindowPosForPopup(pOut: *mut ImVec2, window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igFindBestWindowPosForPopupEx(
        pOut: *mut ImVec2,
        ref_pos: ImVec2,
        size: ImVec2,
        last_dir: *mut ImGuiDir,
        r_outer: ImRect,
        r_avoid: ImRect,
        policy: ImGuiPopupPositionPolicy,
    );
}
extern "C" {
    pub fn igBeginViewportSideBar(
        name: *const ::std::os::raw::c_char,
        viewport: *mut ImGuiViewport,
        dir: ImGuiDir,
        size: f32,
        window_flags: ImGuiWindowFlags,
    ) -> bool;
}
extern "C" {
    pub fn igBeginMenuEx(
        label: *const ::std::os::raw::c_char,
        icon: *const ::std::os::raw::c_char,
        enabled: bool,
    ) -> bool;
}
extern "C" {
    pub fn igMenuItemEx(
        label: *const ::std::os::raw::c_char,
        icon: *const ::std::os::raw::c_char,
        shortcut: *const ::std::os::raw::c_char,
        selected: bool,
        enabled: bool,
    ) -> bool;
}
extern "C" {
    pub fn igBeginComboPopup(popup_id: ImGuiID, bb: ImRect, flags: ImGuiComboFlags) -> bool;
}
extern "C" {
    pub fn igBeginComboPreview() -> bool;
}
extern "C" {
    pub fn igEndComboPreview();
}
extern "C" {
    pub fn igNavInitWindow(window: *mut ImGuiWindow, force_reinit: bool);
}
extern "C" {
    pub fn igNavInitRequestApplyResult();
}
extern "C" {
    pub fn igNavMoveRequestButNoResultYet() -> bool;
}
extern "C" {
    pub fn igNavMoveRequestSubmit(
        move_dir: ImGuiDir,
        clip_dir: ImGuiDir,
        move_flags: ImGuiNavMoveFlags,
        scroll_flags: ImGuiScrollFlags,
    );
}
extern "C" {
    pub fn igNavMoveRequestForward(
        move_dir: ImGuiDir,
        clip_dir: ImGuiDir,
        move_flags: ImGuiNavMoveFlags,
        scroll_flags: ImGuiScrollFlags,
    );
}
extern "C" {
    pub fn igNavMoveRequestResolveWithLastItem(result: *mut ImGuiNavItemData);
}
extern "C" {
    pub fn igNavMoveRequestCancel();
}
extern "C" {
    pub fn igNavMoveRequestApplyResult();
}
extern "C" {
    pub fn igNavMoveRequestTryWrapping(window: *mut ImGuiWindow, move_flags: ImGuiNavMoveFlags);
}
extern "C" {
    pub fn igGetNavInputName(n: ImGuiNavInput) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn igGetNavInputAmount(n: ImGuiNavInput, mode: ImGuiNavReadMode) -> f32;
}
extern "C" {
    pub fn igGetNavInputAmount2d(
        pOut: *mut ImVec2,
        dir_sources: ImGuiNavDirSourceFlags,
        mode: ImGuiNavReadMode,
        slow_factor: f32,
        fast_factor: f32,
    );
}
extern "C" {
    pub fn igCalcTypematicRepeatAmount(
        t0: f32,
        t1: f32,
        repeat_delay: f32,
        repeat_rate: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igActivateItem(id: ImGuiID);
}
extern "C" {
    pub fn igSetNavWindow(window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igSetNavID(
        id: ImGuiID,
        nav_layer: ImGuiNavLayer,
        focus_scope_id: ImGuiID,
        rect_rel: ImRect,
    );
}
extern "C" {
    pub fn igPushFocusScope(id: ImGuiID);
}
extern "C" {
    pub fn igPopFocusScope();
}
extern "C" {
    pub fn igGetFocusedFocusScope() -> ImGuiID;
}
extern "C" {
    pub fn igGetFocusScope() -> ImGuiID;
}
extern "C" {
    pub fn igIsNamedKey(key: ImGuiKey) -> bool;
}
extern "C" {
    pub fn igIsLegacyKey(key: ImGuiKey) -> bool;
}
extern "C" {
    pub fn igIsGamepadKey(key: ImGuiKey) -> bool;
}
extern "C" {
    pub fn igGetKeyData(key: ImGuiKey) -> *mut ImGuiKeyData;
}
extern "C" {
    pub fn igSetItemUsingMouseWheel();
}
extern "C" {
    pub fn igSetActiveIdUsingNavAndKeys();
}
extern "C" {
    pub fn igIsActiveIdUsingNavDir(dir: ImGuiDir) -> bool;
}
extern "C" {
    pub fn igIsActiveIdUsingNavInput(input: ImGuiNavInput) -> bool;
}
extern "C" {
    pub fn igIsActiveIdUsingKey(key: ImGuiKey) -> bool;
}
extern "C" {
    pub fn igSetActiveIdUsingKey(key: ImGuiKey);
}
extern "C" {
    pub fn igIsMouseDragPastThreshold(button: ImGuiMouseButton, lock_threshold: f32) -> bool;
}
extern "C" {
    pub fn igIsNavInputDown(n: ImGuiNavInput) -> bool;
}
extern "C" {
    pub fn igIsNavInputTest(n: ImGuiNavInput, rm: ImGuiNavReadMode) -> bool;
}
extern "C" {
    pub fn igGetMergedModFlags() -> ImGuiModFlags;
}
extern "C" {
    pub fn igIsKeyPressedMap(key: ImGuiKey, repeat: bool) -> bool;
}
extern "C" {
    pub fn igDockContextInitialize(ctx: *mut ImGuiContext);
}
extern "C" {
    pub fn igDockContextShutdown(ctx: *mut ImGuiContext);
}
extern "C" {
    pub fn igDockContextClearNodes(
        ctx: *mut ImGuiContext,
        root_id: ImGuiID,
        clear_settings_refs: bool,
    );
}
extern "C" {
    pub fn igDockContextRebuildNodes(ctx: *mut ImGuiContext);
}
extern "C" {
    pub fn igDockContextNewFrameUpdateUndocking(ctx: *mut ImGuiContext);
}
extern "C" {
    pub fn igDockContextNewFrameUpdateDocking(ctx: *mut ImGuiContext);
}
extern "C" {
    pub fn igDockContextEndFrame(ctx: *mut ImGuiContext);
}
extern "C" {
    pub fn igDockContextGenNodeID(ctx: *mut ImGuiContext) -> ImGuiID;
}
extern "C" {
    pub fn igDockContextQueueDock(
        ctx: *mut ImGuiContext,
        target: *mut ImGuiWindow,
        target_node: *mut ImGuiDockNode,
        payload: *mut ImGuiWindow,
        split_dir: ImGuiDir,
        split_ratio: f32,
        split_outer: bool,
    );
}
extern "C" {
    pub fn igDockContextQueueUndockWindow(ctx: *mut ImGuiContext, window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igDockContextQueueUndockNode(ctx: *mut ImGuiContext, node: *mut ImGuiDockNode);
}
extern "C" {
    pub fn igDockContextCalcDropPosForDocking(
        target: *mut ImGuiWindow,
        target_node: *mut ImGuiDockNode,
        payload: *mut ImGuiWindow,
        split_dir: ImGuiDir,
        split_outer: bool,
        out_pos: *mut ImVec2,
    ) -> bool;
}
extern "C" {
    pub fn igDockNodeBeginAmendTabBar(node: *mut ImGuiDockNode) -> bool;
}
extern "C" {
    pub fn igDockNodeEndAmendTabBar();
}
extern "C" {
    pub fn igDockNodeGetRootNode(node: *mut ImGuiDockNode) -> *mut ImGuiDockNode;
}
extern "C" {
    pub fn igDockNodeIsInHierarchyOf(node: *mut ImGuiDockNode, parent: *mut ImGuiDockNode) -> bool;
}
extern "C" {
    pub fn igDockNodeGetDepth(node: *const ImGuiDockNode) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igDockNodeGetWindowMenuButtonId(node: *const ImGuiDockNode) -> ImGuiID;
}
extern "C" {
    pub fn igGetWindowDockNode() -> *mut ImGuiDockNode;
}
extern "C" {
    pub fn igGetWindowAlwaysWantOwnTabBar(window: *mut ImGuiWindow) -> bool;
}
extern "C" {
    pub fn igBeginDocked(window: *mut ImGuiWindow, p_open: *mut bool);
}
extern "C" {
    pub fn igBeginDockableDragDropSource(window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igBeginDockableDragDropTarget(window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igSetWindowDock(window: *mut ImGuiWindow, dock_id: ImGuiID, cond: ImGuiCond);
}
extern "C" {
    pub fn igDockBuilderDockWindow(window_name: *const ::std::os::raw::c_char, node_id: ImGuiID);
}
extern "C" {
    pub fn igDockBuilderGetNode(node_id: ImGuiID) -> *mut ImGuiDockNode;
}
extern "C" {
    pub fn igDockBuilderGetCentralNode(node_id: ImGuiID) -> *mut ImGuiDockNode;
}
extern "C" {
    pub fn igDockBuilderAddNode(node_id: ImGuiID, flags: ImGuiDockNodeFlags) -> ImGuiID;
}
extern "C" {
    pub fn igDockBuilderRemoveNode(node_id: ImGuiID);
}
extern "C" {
    pub fn igDockBuilderRemoveNodeDockedWindows(node_id: ImGuiID, clear_settings_refs: bool);
}
extern "C" {
    pub fn igDockBuilderRemoveNodeChildNodes(node_id: ImGuiID);
}
extern "C" {
    pub fn igDockBuilderSetNodePos(node_id: ImGuiID, pos: ImVec2);
}
extern "C" {
    pub fn igDockBuilderSetNodeSize(node_id: ImGuiID, size: ImVec2);
}
extern "C" {
    pub fn igDockBuilderSplitNode(
        node_id: ImGuiID,
        split_dir: ImGuiDir,
        size_ratio_for_node_at_dir: f32,
        out_id_at_dir: *mut ImGuiID,
        out_id_at_opposite_dir: *mut ImGuiID,
    ) -> ImGuiID;
}
extern "C" {
    pub fn igDockBuilderCopyDockSpace(
        src_dockspace_id: ImGuiID,
        dst_dockspace_id: ImGuiID,
        in_window_remap_pairs: *mut ImVector_const_charPtr,
    );
}
extern "C" {
    pub fn igDockBuilderCopyNode(
        src_node_id: ImGuiID,
        dst_node_id: ImGuiID,
        out_node_remap_pairs: *mut ImVector_ImGuiID,
    );
}
extern "C" {
    pub fn igDockBuilderCopyWindowSettings(
        src_name: *const ::std::os::raw::c_char,
        dst_name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn igDockBuilderFinish(node_id: ImGuiID);
}
extern "C" {
    pub fn igIsDragDropActive() -> bool;
}
extern "C" {
    pub fn igBeginDragDropTargetCustom(bb: ImRect, id: ImGuiID) -> bool;
}
extern "C" {
    pub fn igClearDragDrop();
}
extern "C" {
    pub fn igIsDragDropPayloadBeingAccepted() -> bool;
}
extern "C" {
    pub fn igSetWindowClipRectBeforeSetChannel(window: *mut ImGuiWindow, clip_rect: ImRect);
}
extern "C" {
    pub fn igBeginColumns(
        str_id: *const ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
        flags: ImGuiOldColumnFlags,
    );
}
extern "C" {
    pub fn igEndColumns();
}
extern "C" {
    pub fn igPushColumnClipRect(column_index: ::std::os::raw::c_int);
}
extern "C" {
    pub fn igPushColumnsBackground();
}
extern "C" {
    pub fn igPopColumnsBackground();
}
extern "C" {
    pub fn igGetColumnsID(
        str_id: *const ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
    ) -> ImGuiID;
}
extern "C" {
    pub fn igFindOrCreateColumns(window: *mut ImGuiWindow, id: ImGuiID) -> *mut ImGuiOldColumns;
}
extern "C" {
    pub fn igGetColumnOffsetFromNorm(columns: *const ImGuiOldColumns, offset_norm: f32) -> f32;
}
extern "C" {
    pub fn igGetColumnNormFromOffset(columns: *const ImGuiOldColumns, offset: f32) -> f32;
}
extern "C" {
    pub fn igTableOpenContextMenu(column_n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn igTableSetColumnWidth(column_n: ::std::os::raw::c_int, width: f32);
}
extern "C" {
    pub fn igTableSetColumnSortDirection(
        column_n: ::std::os::raw::c_int,
        sort_direction: ImGuiSortDirection,
        append_to_sort_specs: bool,
    );
}
extern "C" {
    pub fn igTableGetHoveredColumn() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igTableGetHeaderRowHeight() -> f32;
}
extern "C" {
    pub fn igTablePushBackgroundChannel();
}
extern "C" {
    pub fn igTablePopBackgroundChannel();
}
extern "C" {
    pub fn igGetCurrentTable() -> *mut ImGuiTable;
}
extern "C" {
    pub fn igTableFindByID(id: ImGuiID) -> *mut ImGuiTable;
}
extern "C" {
    pub fn igBeginTableEx(
        name: *const ::std::os::raw::c_char,
        id: ImGuiID,
        columns_count: ::std::os::raw::c_int,
        flags: ImGuiTableFlags,
        outer_size: ImVec2,
        inner_width: f32,
    ) -> bool;
}
extern "C" {
    pub fn igTableBeginInitMemory(table: *mut ImGuiTable, columns_count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn igTableBeginApplyRequests(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableSetupDrawChannels(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableUpdateLayout(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableUpdateBorders(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableUpdateColumnsWeightFromWidth(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableDrawBorders(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableDrawContextMenu(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableMergeDrawChannels(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableGetInstanceData(
        table: *mut ImGuiTable,
        instance_no: ::std::os::raw::c_int,
    ) -> *mut ImGuiTableInstanceData;
}
extern "C" {
    pub fn igTableSortSpecsSanitize(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableSortSpecsBuild(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableGetColumnNextSortDirection(column: *mut ImGuiTableColumn) -> ImGuiSortDirection;
}
extern "C" {
    pub fn igTableFixColumnSortDirection(table: *mut ImGuiTable, column: *mut ImGuiTableColumn);
}
extern "C" {
    pub fn igTableGetColumnWidthAuto(table: *mut ImGuiTable, column: *mut ImGuiTableColumn) -> f32;
}
extern "C" {
    pub fn igTableBeginRow(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableEndRow(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableBeginCell(table: *mut ImGuiTable, column_n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn igTableEndCell(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableGetCellBgRect(
        pOut: *mut ImRect,
        table: *const ImGuiTable,
        column_n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn igTableGetColumnName_TablePtr(
        table: *const ImGuiTable,
        column_n: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn igTableGetColumnResizeID(
        table: *const ImGuiTable,
        column_n: ::std::os::raw::c_int,
        instance_no: ::std::os::raw::c_int,
    ) -> ImGuiID;
}
extern "C" {
    pub fn igTableGetMaxColumnWidth(
        table: *const ImGuiTable,
        column_n: ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    pub fn igTableSetColumnWidthAutoSingle(table: *mut ImGuiTable, column_n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn igTableSetColumnWidthAutoAll(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableRemove(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableGcCompactTransientBuffers_TablePtr(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableGcCompactTransientBuffers_TableTempDataPtr(table: *mut ImGuiTableTempData);
}
extern "C" {
    pub fn igTableGcCompactSettings();
}
extern "C" {
    pub fn igTableLoadSettings(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableSaveSettings(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableResetSettings(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igTableGetBoundSettings(table: *mut ImGuiTable) -> *mut ImGuiTableSettings;
}
extern "C" {
    pub fn igTableSettingsAddSettingsHandler();
}
extern "C" {
    pub fn igTableSettingsCreate(
        id: ImGuiID,
        columns_count: ::std::os::raw::c_int,
    ) -> *mut ImGuiTableSettings;
}
extern "C" {
    pub fn igTableSettingsFindByID(id: ImGuiID) -> *mut ImGuiTableSettings;
}
extern "C" {
    pub fn igBeginTabBarEx(
        tab_bar: *mut ImGuiTabBar,
        bb: ImRect,
        flags: ImGuiTabBarFlags,
        dock_node: *mut ImGuiDockNode,
    ) -> bool;
}
extern "C" {
    pub fn igTabBarFindTabByID(tab_bar: *mut ImGuiTabBar, tab_id: ImGuiID) -> *mut ImGuiTabItem;
}
extern "C" {
    pub fn igTabBarFindMostRecentlySelectedTabForActiveWindow(
        tab_bar: *mut ImGuiTabBar,
    ) -> *mut ImGuiTabItem;
}
extern "C" {
    pub fn igTabBarAddTab(
        tab_bar: *mut ImGuiTabBar,
        tab_flags: ImGuiTabItemFlags,
        window: *mut ImGuiWindow,
    );
}
extern "C" {
    pub fn igTabBarRemoveTab(tab_bar: *mut ImGuiTabBar, tab_id: ImGuiID);
}
extern "C" {
    pub fn igTabBarCloseTab(tab_bar: *mut ImGuiTabBar, tab: *mut ImGuiTabItem);
}
extern "C" {
    pub fn igTabBarQueueReorder(
        tab_bar: *mut ImGuiTabBar,
        tab: *const ImGuiTabItem,
        offset: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn igTabBarQueueReorderFromMousePos(
        tab_bar: *mut ImGuiTabBar,
        tab: *const ImGuiTabItem,
        mouse_pos: ImVec2,
    );
}
extern "C" {
    pub fn igTabBarProcessReorder(tab_bar: *mut ImGuiTabBar) -> bool;
}
extern "C" {
    pub fn igTabItemEx(
        tab_bar: *mut ImGuiTabBar,
        label: *const ::std::os::raw::c_char,
        p_open: *mut bool,
        flags: ImGuiTabItemFlags,
        docked_window: *mut ImGuiWindow,
    ) -> bool;
}
extern "C" {
    pub fn igTabItemCalcSize(
        pOut: *mut ImVec2,
        label: *const ::std::os::raw::c_char,
        has_close_button: bool,
    );
}
extern "C" {
    pub fn igTabItemBackground(
        draw_list: *mut ImDrawList,
        bb: ImRect,
        flags: ImGuiTabItemFlags,
        col: ImU32,
    );
}
extern "C" {
    pub fn igTabItemLabelAndCloseButton(
        draw_list: *mut ImDrawList,
        bb: ImRect,
        flags: ImGuiTabItemFlags,
        frame_padding: ImVec2,
        label: *const ::std::os::raw::c_char,
        tab_id: ImGuiID,
        close_button_id: ImGuiID,
        is_contents_visible: bool,
        out_just_closed: *mut bool,
        out_text_clipped: *mut bool,
    );
}
extern "C" {
    pub fn igRenderText(
        pos: ImVec2,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        hide_text_after_hash: bool,
    );
}
extern "C" {
    pub fn igRenderTextWrapped(
        pos: ImVec2,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        wrap_width: f32,
    );
}
extern "C" {
    pub fn igRenderTextClipped(
        pos_min: ImVec2,
        pos_max: ImVec2,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        text_size_if_known: *const ImVec2,
        align: ImVec2,
        clip_rect: *const ImRect,
    );
}
extern "C" {
    pub fn igRenderTextClippedEx(
        draw_list: *mut ImDrawList,
        pos_min: ImVec2,
        pos_max: ImVec2,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        text_size_if_known: *const ImVec2,
        align: ImVec2,
        clip_rect: *const ImRect,
    );
}
extern "C" {
    pub fn igRenderTextEllipsis(
        draw_list: *mut ImDrawList,
        pos_min: ImVec2,
        pos_max: ImVec2,
        clip_max_x: f32,
        ellipsis_max_x: f32,
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        text_size_if_known: *const ImVec2,
    );
}
extern "C" {
    pub fn igRenderFrame(
        p_min: ImVec2,
        p_max: ImVec2,
        fill_col: ImU32,
        border: bool,
        rounding: f32,
    );
}
extern "C" {
    pub fn igRenderFrameBorder(p_min: ImVec2, p_max: ImVec2, rounding: f32);
}
extern "C" {
    pub fn igRenderColorRectWithAlphaCheckerboard(
        draw_list: *mut ImDrawList,
        p_min: ImVec2,
        p_max: ImVec2,
        fill_col: ImU32,
        grid_step: f32,
        grid_off: ImVec2,
        rounding: f32,
        flags: ImDrawFlags,
    );
}
extern "C" {
    pub fn igRenderNavHighlight(bb: ImRect, id: ImGuiID, flags: ImGuiNavHighlightFlags);
}
extern "C" {
    pub fn igFindRenderedTextEnd(
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn igRenderMouseCursor(
        pos: ImVec2,
        scale: f32,
        mouse_cursor: ImGuiMouseCursor,
        col_fill: ImU32,
        col_border: ImU32,
        col_shadow: ImU32,
    );
}
extern "C" {
    pub fn igRenderArrow(
        draw_list: *mut ImDrawList,
        pos: ImVec2,
        col: ImU32,
        dir: ImGuiDir,
        scale: f32,
    );
}
extern "C" {
    pub fn igRenderBullet(draw_list: *mut ImDrawList, pos: ImVec2, col: ImU32);
}
extern "C" {
    pub fn igRenderCheckMark(draw_list: *mut ImDrawList, pos: ImVec2, col: ImU32, sz: f32);
}
extern "C" {
    pub fn igRenderArrowPointingAt(
        draw_list: *mut ImDrawList,
        pos: ImVec2,
        half_sz: ImVec2,
        direction: ImGuiDir,
        col: ImU32,
    );
}
extern "C" {
    pub fn igRenderArrowDockMenu(draw_list: *mut ImDrawList, p_min: ImVec2, sz: f32, col: ImU32);
}
extern "C" {
    pub fn igRenderRectFilledRangeH(
        draw_list: *mut ImDrawList,
        rect: ImRect,
        col: ImU32,
        x_start_norm: f32,
        x_end_norm: f32,
        rounding: f32,
    );
}
extern "C" {
    pub fn igRenderRectFilledWithHole(
        draw_list: *mut ImDrawList,
        outer: ImRect,
        inner: ImRect,
        col: ImU32,
        rounding: f32,
    );
}
extern "C" {
    pub fn igCalcRoundingFlagsForRectInRect(
        r_in: ImRect,
        r_outer: ImRect,
        threshold: f32,
    ) -> ImDrawFlags;
}
extern "C" {
    pub fn igTextEx(
        text: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
        flags: ImGuiTextFlags,
    );
}
extern "C" {
    pub fn igButtonEx(
        label: *const ::std::os::raw::c_char,
        size_arg: ImVec2,
        flags: ImGuiButtonFlags,
    ) -> bool;
}
extern "C" {
    pub fn igCloseButton(id: ImGuiID, pos: ImVec2) -> bool;
}
extern "C" {
    pub fn igCollapseButton(id: ImGuiID, pos: ImVec2, dock_node: *mut ImGuiDockNode) -> bool;
}
extern "C" {
    pub fn igArrowButtonEx(
        str_id: *const ::std::os::raw::c_char,
        dir: ImGuiDir,
        size_arg: ImVec2,
        flags: ImGuiButtonFlags,
    ) -> bool;
}
extern "C" {
    pub fn igScrollbar(axis: ImGuiAxis);
}
extern "C" {
    pub fn igScrollbarEx(
        bb: ImRect,
        id: ImGuiID,
        axis: ImGuiAxis,
        p_scroll_v: *mut ImS64,
        avail_v: ImS64,
        contents_v: ImS64,
        flags: ImDrawFlags,
    ) -> bool;
}
extern "C" {
    pub fn igImageButtonEx(
        id: ImGuiID,
        texture_id: ImTextureID,
        size: ImVec2,
        uv0: ImVec2,
        uv1: ImVec2,
        padding: ImVec2,
        bg_col: ImVec4,
        tint_col: ImVec4,
    ) -> bool;
}
extern "C" {
    pub fn igGetWindowScrollbarRect(pOut: *mut ImRect, window: *mut ImGuiWindow, axis: ImGuiAxis);
}
extern "C" {
    pub fn igGetWindowScrollbarID(window: *mut ImGuiWindow, axis: ImGuiAxis) -> ImGuiID;
}
extern "C" {
    pub fn igGetWindowResizeCornerID(window: *mut ImGuiWindow, n: ::std::os::raw::c_int)
        -> ImGuiID;
}
extern "C" {
    pub fn igGetWindowResizeBorderID(window: *mut ImGuiWindow, dir: ImGuiDir) -> ImGuiID;
}
extern "C" {
    pub fn igSeparatorEx(flags: ImGuiSeparatorFlags);
}
extern "C" {
    pub fn igCheckboxFlags_S64Ptr(
        label: *const ::std::os::raw::c_char,
        flags: *mut ImS64,
        flags_value: ImS64,
    ) -> bool;
}
extern "C" {
    pub fn igCheckboxFlags_U64Ptr(
        label: *const ::std::os::raw::c_char,
        flags: *mut ImU64,
        flags_value: ImU64,
    ) -> bool;
}
extern "C" {
    pub fn igButtonBehavior(
        bb: ImRect,
        id: ImGuiID,
        out_hovered: *mut bool,
        out_held: *mut bool,
        flags: ImGuiButtonFlags,
    ) -> bool;
}
extern "C" {
    pub fn igDragBehavior(
        id: ImGuiID,
        data_type: ImGuiDataType,
        p_v: *mut ::std::os::raw::c_void,
        v_speed: f32,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
    ) -> bool;
}
extern "C" {
    pub fn igSliderBehavior(
        bb: ImRect,
        id: ImGuiID,
        data_type: ImGuiDataType,
        p_v: *mut ::std::os::raw::c_void,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        flags: ImGuiSliderFlags,
        out_grab_bb: *mut ImRect,
    ) -> bool;
}
extern "C" {
    pub fn igSplitterBehavior(
        bb: ImRect,
        id: ImGuiID,
        axis: ImGuiAxis,
        size1: *mut f32,
        size2: *mut f32,
        min_size1: f32,
        min_size2: f32,
        hover_extend: f32,
        hover_visibility_delay: f32,
        bg_col: ImU32,
    ) -> bool;
}
extern "C" {
    pub fn igTreeNodeBehavior(
        id: ImGuiID,
        flags: ImGuiTreeNodeFlags,
        label: *const ::std::os::raw::c_char,
        label_end: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn igTreeNodeBehaviorIsOpen(id: ImGuiID, flags: ImGuiTreeNodeFlags) -> bool;
}
extern "C" {
    pub fn igTreePushOverrideID(id: ImGuiID);
}
extern "C" {
    pub fn igDataTypeGetInfo(data_type: ImGuiDataType) -> *const ImGuiDataTypeInfo;
}
extern "C" {
    pub fn igDataTypeFormatString(
        buf: *mut ::std::os::raw::c_char,
        buf_size: ::std::os::raw::c_int,
        data_type: ImGuiDataType,
        p_data: *const ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igDataTypeApplyOp(
        data_type: ImGuiDataType,
        op: ::std::os::raw::c_int,
        output: *mut ::std::os::raw::c_void,
        arg_1: *const ::std::os::raw::c_void,
        arg_2: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn igDataTypeApplyFromText(
        buf: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn igDataTypeCompare(
        data_type: ImGuiDataType,
        arg_1: *const ::std::os::raw::c_void,
        arg_2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igDataTypeClamp(
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        p_min: *const ::std::os::raw::c_void,
        p_max: *const ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn igInputTextEx(
        label: *const ::std::os::raw::c_char,
        hint: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: ::std::os::raw::c_int,
        size_arg: ImVec2,
        flags: ImGuiInputTextFlags,
        callback: ImGuiInputTextCallback,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn igTempInputText(
        bb: ImRect,
        id: ImGuiID,
        label: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: ::std::os::raw::c_int,
        flags: ImGuiInputTextFlags,
    ) -> bool;
}
extern "C" {
    pub fn igTempInputScalar(
        bb: ImRect,
        id: ImGuiID,
        label: *const ::std::os::raw::c_char,
        data_type: ImGuiDataType,
        p_data: *mut ::std::os::raw::c_void,
        format: *const ::std::os::raw::c_char,
        p_clamp_min: *const ::std::os::raw::c_void,
        p_clamp_max: *const ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn igTempInputIsActive(id: ImGuiID) -> bool;
}
extern "C" {
    pub fn igGetInputTextState(id: ImGuiID) -> *mut ImGuiInputTextState;
}
extern "C" {
    pub fn igColorTooltip(
        text: *const ::std::os::raw::c_char,
        col: *const f32,
        flags: ImGuiColorEditFlags,
    );
}
extern "C" {
    pub fn igColorEditOptionsPopup(col: *const f32, flags: ImGuiColorEditFlags);
}
extern "C" {
    pub fn igColorPickerOptionsPopup(ref_col: *const f32, flags: ImGuiColorEditFlags);
}
extern "C" {
    pub fn igPlotEx(
        plot_type: ImGuiPlotType,
        label: *const ::std::os::raw::c_char,
        values_getter: ::std::option::Option<
            unsafe extern "C" fn(
                data: *mut ::std::os::raw::c_void,
                idx: ::std::os::raw::c_int,
            ) -> f32,
        >,
        data: *mut ::std::os::raw::c_void,
        values_count: ::std::os::raw::c_int,
        values_offset: ::std::os::raw::c_int,
        overlay_text: *const ::std::os::raw::c_char,
        scale_min: f32,
        scale_max: f32,
        frame_size: ImVec2,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn igShadeVertsLinearColorGradientKeepAlpha(
        draw_list: *mut ImDrawList,
        vert_start_idx: ::std::os::raw::c_int,
        vert_end_idx: ::std::os::raw::c_int,
        gradient_p0: ImVec2,
        gradient_p1: ImVec2,
        col0: ImU32,
        col1: ImU32,
    );
}
extern "C" {
    pub fn igShadeVertsLinearUV(
        draw_list: *mut ImDrawList,
        vert_start_idx: ::std::os::raw::c_int,
        vert_end_idx: ::std::os::raw::c_int,
        a: ImVec2,
        b: ImVec2,
        uv_a: ImVec2,
        uv_b: ImVec2,
        clamp: bool,
    );
}
extern "C" {
    pub fn igGcCompactTransientMiscBuffers();
}
extern "C" {
    pub fn igGcCompactTransientWindowBuffers(window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igGcAwakeTransientWindowBuffers(window: *mut ImGuiWindow);
}
extern "C" {
    pub fn igDebugLog(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn igDebugLogV(fmt: *const ::std::os::raw::c_char, args: va_list);
}
extern "C" {
    pub fn igErrorCheckEndFrameRecover(
        log_callback: ImGuiErrorLogCallback,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn igErrorCheckEndWindowRecover(
        log_callback: ImGuiErrorLogCallback,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn igDebugDrawItemRect(col: ImU32);
}
extern "C" {
    pub fn igDebugStartItemPicker();
}
extern "C" {
    pub fn igShowFontAtlas(atlas: *mut ImFontAtlas);
}
extern "C" {
    pub fn igDebugHookIdInfo(
        id: ImGuiID,
        data_type: ImGuiDataType,
        data_id: *const ::std::os::raw::c_void,
        data_id_end: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn igDebugNodeColumns(columns: *mut ImGuiOldColumns);
}
extern "C" {
    pub fn igDebugNodeDockNode(node: *mut ImGuiDockNode, label: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn igDebugNodeDrawList(
        window: *mut ImGuiWindow,
        viewport: *mut ImGuiViewportP,
        draw_list: *const ImDrawList,
        label: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn igDebugNodeDrawCmdShowMeshAndBoundingBox(
        out_draw_list: *mut ImDrawList,
        draw_list: *const ImDrawList,
        draw_cmd: *const ImDrawCmd,
        show_mesh: bool,
        show_aabb: bool,
    );
}
extern "C" {
    pub fn igDebugNodeFont(font: *mut ImFont);
}
extern "C" {
    pub fn igDebugNodeFontGlyph(font: *mut ImFont, glyph: *const ImFontGlyph);
}
extern "C" {
    pub fn igDebugNodeStorage(storage: *mut ImGuiStorage, label: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn igDebugNodeTabBar(tab_bar: *mut ImGuiTabBar, label: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn igDebugNodeTable(table: *mut ImGuiTable);
}
extern "C" {
    pub fn igDebugNodeTableSettings(settings: *mut ImGuiTableSettings);
}
extern "C" {
    pub fn igDebugNodeInputTextState(state: *mut ImGuiInputTextState);
}
extern "C" {
    pub fn igDebugNodeWindow(window: *mut ImGuiWindow, label: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn igDebugNodeWindowSettings(settings: *mut ImGuiWindowSettings);
}
extern "C" {
    pub fn igDebugNodeWindowsList(
        windows: *mut ImVector_ImGuiWindowPtr,
        label: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn igDebugNodeWindowsListByBeginStackParent(
        windows: *mut *mut ImGuiWindow,
        windows_size: ::std::os::raw::c_int,
        parent_in_begin_stack: *mut ImGuiWindow,
    );
}
extern "C" {
    pub fn igDebugNodeViewport(viewport: *mut ImGuiViewportP);
}
extern "C" {
    pub fn igDebugRenderViewportThumbnail(
        draw_list: *mut ImDrawList,
        viewport: *mut ImGuiViewportP,
        bb: ImRect,
    );
}
extern "C" {
    pub fn igImFontAtlasGetBuilderForStbTruetype() -> *const ImFontBuilderIO;
}
extern "C" {
    pub fn igImFontAtlasBuildInit(atlas: *mut ImFontAtlas);
}
extern "C" {
    pub fn igImFontAtlasBuildSetupFont(
        atlas: *mut ImFontAtlas,
        font: *mut ImFont,
        font_config: *mut ImFontConfig,
        ascent: f32,
        descent: f32,
    );
}
extern "C" {
    pub fn igImFontAtlasBuildPackCustomRects(
        atlas: *mut ImFontAtlas,
        stbrp_context_opaque: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn igImFontAtlasBuildFinish(atlas: *mut ImFontAtlas);
}
extern "C" {
    pub fn igImFontAtlasBuildRender8bppRectFromString(
        atlas: *mut ImFontAtlas,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        in_str: *const ::std::os::raw::c_char,
        in_marker_char: ::std::os::raw::c_char,
        in_marker_pixel_value: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn igImFontAtlasBuildRender32bppRectFromString(
        atlas: *mut ImFontAtlas,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        in_str: *const ::std::os::raw::c_char,
        in_marker_char: ::std::os::raw::c_char,
        in_marker_pixel_value: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn igImFontAtlasBuildMultiplyCalcLookupTable(
        out_table: *mut ::std::os::raw::c_uchar,
        in_multiply_factor: f32,
    );
}
extern "C" {
    pub fn igImFontAtlasBuildMultiplyRectAlpha8(
        table: *const ::std::os::raw::c_uchar,
        pixels: *mut ::std::os::raw::c_uchar,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[doc = "hand written functions"]
    pub fn igLogText(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn ImGuiTextBuffer_appendf(
        buffer: *mut ImGuiTextBuffer,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn igGET_FLT_MAX() -> f32;
}
extern "C" {
    pub fn igGET_FLT_MIN() -> f32;
}
extern "C" {
    pub fn ImVector_ImWchar_create() -> *mut ImVector_ImWchar;
}
extern "C" {
    pub fn ImVector_ImWchar_destroy(self_: *mut ImVector_ImWchar);
}
extern "C" {
    pub fn ImVector_ImWchar_Init(p: *mut ImVector_ImWchar);
}
extern "C" {
    pub fn ImVector_ImWchar_UnInit(p: *mut ImVector_ImWchar);
}
extern "C" {
    pub fn ImGuiPlatformIO_Set_Platform_GetWindowPos(
        platform_io: *mut ImGuiPlatformIO,
        user_callback: ::std::option::Option<
            unsafe extern "C" fn(vp: *mut ImGuiViewport, out_pos: *mut ImVec2),
        >,
    );
}
extern "C" {
    pub fn ImGuiPlatformIO_Set_Platform_GetWindowSize(
        platform_io: *mut ImGuiPlatformIO,
        user_callback: ::std::option::Option<
            unsafe extern "C" fn(vp: *mut ImGuiViewport, out_size: *mut ImVec2),
        >,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
